[{"label":"Interface elements","selectable":false,"expanded":true,"children":[{"label":"Factura electr√≥nica","data":{"uuid":"4b2a7af2-dc3c-4293-a268-58febeed4aed","selector":[{"type":null,"class_name":null,"name":null,"index":"0","value":null,"id":null,"use_type":false,"use_class_name":false,"use_name":false,"use_index":false,"use_value":false,"use_id":false,"var_type":1,"var_class_name":1,"var_name":1,"var_index":1,"var_id":1,"var_value":1,"properties":[{"name":"Type","variant":0,"value":"window","use":true},{"name":"Index","variant":0,"value":"4","use":false},{"name":"Value","variant":0,"value":"","use":false},{"name":"ClassName","variant":0,"value":"WindowsForms10.Window.8.app.0.34f5582_r7_ad1","use":true},{"name":"Name","variant":0,"value":"Descarga Masiva CFDi by SWDozar (Licencia por pagar)v. 1.0.2212.1","use":true},{"name":"AutomationId","variant":0,"value":"frmWBCFDis","use":false},{"name":"AcceleratorKey","variant":0,"value":"","use":false},{"name":"AccessKey","variant":0,"value":"","use":false},{"name":"FrameworkId","variant":0,"value":"WinForm","use":false},{"name":"HasKeyboardFocus","variant":0,"value":"False","use":false},{"name":"HelpText","variant":0,"value":"","use":false},{"name":"IsContentElement","variant":0,"value":"True","use":false},{"name":"IsControlElement","variant":0,"value":"True","use":false},{"name":"IsEnabled","variant":0,"value":"True","use":false},{"name":"IsKeyboardFocusable","variant":0,"value":"True","use":false},{"name":"IsOffscreen","variant":0,"value":"False","use":false},{"name":"IsPassword","variant":0,"value":"False","use":false},{"name":"IsRequiredForForm","variant":0,"value":"False","use":false},{"name":"ItemType","variant":0,"value":"","use":false},{"name":"ProcessId","variant":0,"value":"15208","use":false}],"items":null,"automationType":"ui","app_title":"Descarga Masiva CFDi by SWDozar (Licencia por pagar)v. 1.0.2212.1","product_name":null},{"type":null,"class_name":null,"name":null,"index":"0","value":null,"id":null,"use_type":false,"use_class_name":false,"use_name":false,"use_index":false,"use_value":false,"use_id":false,"var_type":1,"var_class_name":1,"var_name":1,"var_index":1,"var_id":1,"var_value":1,"properties":[{"name":"Type","variant":0,"value":"pane","use":true},{"name":"Index","variant":0,"value":"3","use":false},{"name":"Value","variant":0,"value":"","use":false},{"name":"ClassName","variant":0,"value":"WindowsForms10.Window.8.app.0.34f5582_r7_ad1","use":true},{"name":"Name","variant":0,"value":"","use":true},{"name":"AutomationId","variant":0,"value":"wbPortalSat","use":false},{"name":"AcceleratorKey","variant":0,"value":"","use":false},{"name":"AccessKey","variant":0,"value":"","use":false},{"name":"FrameworkId","variant":0,"value":"WinForm","use":false},{"name":"HasKeyboardFocus","variant":0,"value":"False","use":false},{"name":"HelpText","variant":0,"value":"","use":false},{"name":"IsContentElement","variant":0,"value":"True","use":false},{"name":"IsControlElement","variant":0,"value":"True","use":false},{"name":"IsEnabled","variant":0,"value":"True","use":false},{"name":"IsKeyboardFocusable","variant":0,"value":"True","use":false},{"name":"IsOffscreen","variant":0,"value":"False","use":false},{"name":"IsPassword","variant":0,"value":"False","use":false},{"name":"IsRequiredForForm","variant":0,"value":"False","use":false},{"name":"ItemType","variant":0,"value":"","use":false},{"name":"ProcessId","variant":0,"value":"15208","use":false}],"items":null,"automationType":"ui","app_title":"","product_name":null},{"type":null,"class_name":null,"name":null,"index":"0","value":null,"id":null,"use_type":false,"use_class_name":false,"use_name":false,"use_index":false,"use_value":false,"use_id":false,"var_type":1,"var_class_name":1,"var_name":1,"var_index":1,"var_id":1,"var_value":1,"properties":[{"name":"Type","variant":0,"value":"pane","use":true},{"name":"Index","variant":0,"value":"0","use":false},{"name":"Value","variant":0,"value":"","use":false},{"name":"ClassName","variant":0,"value":"Shell Embedding","use":true},{"name":"Name","variant":0,"value":"","use":true},{"name":"AutomationId","variant":0,"value":"","use":false},{"name":"AcceleratorKey","variant":0,"value":"","use":false},{"name":"AccessKey","variant":0,"value":"","use":false},{"name":"FrameworkId","variant":0,"value":"Win32","use":false},{"name":"HasKeyboardFocus","variant":0,"value":"False","use":false},{"name":"HelpText","variant":0,"value":"","use":false},{"name":"IsContentElement","variant":0,"value":"True","use":false},{"name":"IsControlElement","variant":0,"value":"True","use":false},{"name":"IsEnabled","variant":0,"value":"True","use":false},{"name":"IsKeyboardFocusable","variant":0,"value":"True","use":false},{"name":"IsOffscreen","variant":0,"value":"False","use":false},{"name":"IsPassword","variant":0,"value":"False","use":false},{"name":"IsRequiredForForm","variant":0,"value":"False","use":false},{"name":"ItemType","variant":0,"value":"","use":false},{"name":"ProcessId","variant":0,"value":"15208","use":false}],"items":null,"automationType":"ui","app_title":"","product_name":null},{"type":null,"class_name":null,"name":null,"index":"0","value":null,"id":null,"use_type":false,"use_class_name":false,"use_name":false,"use_index":false,"use_value":false,"use_id":false,"var_type":1,"var_class_name":1,"var_name":1,"var_index":1,"var_id":1,"var_value":1,"properties":[{"name":"Type","variant":0,"value":"pane","use":true},{"name":"Index","variant":0,"value":"0","use":false},{"name":"Value","variant":0,"value":"","use":false},{"name":"ClassName","variant":0,"value":"Shell DocObject View","use":true},{"name":"Name","variant":0,"value":"","use":true},{"name":"AutomationId","variant":0,"value":"","use":false},{"name":"AcceleratorKey","variant":0,"value":"","use":false},{"name":"AccessKey","variant":0,"value":"","use":false},{"name":"FrameworkId","variant":0,"value":"Win32","use":false},{"name":"HasKeyboardFocus","variant":0,"value":"False","use":false},{"name":"HelpText","variant":0,"value":"","use":false},{"name":"IsContentElement","variant":0,"value":"True","use":false},{"name":"IsControlElement","variant":0,"value":"True","use":false},{"name":"IsEnabled","variant":0,"value":"True","use":false},{"name":"IsKeyboardFocusable","variant":0,"value":"True","use":false},{"name":"IsOffscreen","variant":0,"value":"False","use":false},{"name":"IsPassword","variant":0,"value":"False","use":false},{"name":"IsRequiredForForm","variant":0,"value":"False","use":false},{"name":"ItemType","variant":0,"value":"","use":false},{"name":"ProcessId","variant":0,"value":"15208","use":false}],"items":null,"automationType":"ui","app_title":"","product_name":null},{"type":null,"class_name":null,"name":null,"index":"0","value":null,"id":null,"use_type":false,"use_class_name":false,"use_name":false,"use_index":false,"use_value":false,"use_id":false,"var_type":1,"var_class_name":1,"var_name":1,"var_index":1,"var_id":1,"var_value":1,"properties":[{"name":"Type","variant":0,"value":"pane","use":true},{"name":"Index","variant":0,"value":"0","use":false},{"name":"Value","variant":0,"value":"","use":false},{"name":"ClassName","variant":0,"value":"Internet Explorer_Server","use":true},{"name":"Name","variant":0,"value":"https://portalcfdi.facturaelectronica.sat.gob.mx/ConsultaEmisor.aspx","use":true},{"name":"AutomationId","variant":0,"value":"","use":false},{"name":"AcceleratorKey","variant":0,"value":"","use":false},{"name":"AccessKey","variant":0,"value":"","use":false},{"name":"FrameworkId","variant":0,"value":"Win32","use":false},{"name":"HasKeyboardFocus","variant":0,"value":"False","use":false},{"name":"HelpText","variant":0,"value":"","use":false},{"name":"IsContentElement","variant":0,"value":"True","use":false},{"name":"IsControlElement","variant":0,"value":"True","use":false},{"name":"IsEnabled","variant":0,"value":"True","use":false},{"name":"IsKeyboardFocusable","variant":0,"value":"True","use":false},{"name":"IsOffscreen","variant":0,"value":"False","use":false},{"name":"IsPassword","variant":0,"value":"False","use":false},{"name":"IsRequiredForForm","variant":0,"value":"False","use":false},{"name":"ItemType","variant":0,"value":"","use":false},{"name":"ProcessId","variant":0,"value":"15208","use":false}],"items":null,"automationType":"ui","app_title":"https://portalcfdi.facturaelectronica.sat.gob.mx/ConsultaEmisor.aspx","product_name":null},{"type":null,"class_name":null,"name":null,"index":"0","value":null,"id":null,"use_type":false,"use_class_name":false,"use_name":false,"use_index":false,"use_value":false,"use_id":false,"var_type":1,"var_class_name":1,"var_name":1,"var_index":1,"var_id":1,"var_value":1,"properties":[{"name":"Type","variant":0,"value":"pane","use":true},{"name":"Index","variant":0,"value":"0","use":false},{"name":"Value","variant":0,"value":"","use":false},{"name":"ClassName","variant":0,"value":"","use":true},{"name":"Name","variant":0,"value":"Portal Contribuyentes CFDI | Buscar CFDI","use":true},{"name":"AutomationId","variant":0,"value":"","use":false},{"name":"AcceleratorKey","variant":0,"value":"","use":false},{"name":"AccessKey","variant":0,"value":"","use":false},{"name":"FrameworkId","variant":0,"value":"InternetExplorer","use":false},{"name":"HasKeyboardFocus","variant":0,"value":"False","use":false},{"name":"HelpText","variant":0,"value":"","use":false},{"name":"IsContentElement","variant":0,"value":"True","use":false},{"name":"IsControlElement","variant":0,"value":"True","use":false},{"name":"IsEnabled","variant":0,"value":"True","use":false},{"name":"IsKeyboardFocusable","variant":0,"value":"False","use":false},{"name":"IsOffscreen","variant":0,"value":"False","use":false},{"name":"IsPassword","variant":0,"value":"False","use":false},{"name":"IsRequiredForForm","variant":0,"value":"False","use":false},{"name":"ItemType","variant":0,"value":"","use":false},{"name":"ProcessId","variant":0,"value":"15208","use":false}],"items":null,"automationType":"ui","app_title":"Portal Contribuyentes CFDI | Buscar CFDI","product_name":null},{"type":null,"class_name":null,"name":null,"index":"0","value":null,"id":null,"use_type":false,"use_class_name":false,"use_name":false,"use_index":false,"use_value":false,"use_id":false,"var_type":1,"var_class_name":1,"var_name":1,"var_index":1,"var_id":1,"var_value":1,"properties":[{"name":"Type","variant":0,"value":"group","use":true},{"name":"Index","variant":0,"value":"2","use":false},{"name":"Value","variant":0,"value":"","use":false},{"name":"ClassName","variant":0,"value":"","use":true},{"name":"Name","variant":0,"value":"//<![CDATA[ var theForm = document.forms['aspnetForm']; if (!theForm) { theForm = document.aspnetForm; } function __doPostBack(eventTarget, eventArgument) { if (!theForm.onsubmit || (theForm.onsubmit() != false)) { theForm.__EVENTTARGET.value = eventTarget; theForm.__EVENTARGUMENT.value = eventArgument; theForm.submit(); } } //]]>      //<![CDATA[ var PageMethods = function() { PageMethods.initializeBase(this); this._timeout = 0; this._userContext = null; this._succeeded = null; this._failed = null; } PageMethods.prototype = { _get_path:function() { var p = this.get_path(); if (p) return p; else return PageMethods._staticInstance.get_path();}, RecuperaAcuse:function(datos,succeededCallback, failedCallback, userContext) { return this._invoke(this._get_path(), 'RecuperaAcuse',false,{datos:datos},succeededCallback,failedCallback,userContext); }, RecuperaRepresentacionImpresa:function(datos,succeededCallback, failedCallback, userContext) { return this._invoke(this._get_path(), 'RecuperaRepresentacionImpresa',false,{datos:datos},succeededCallback,failedCallback,userContext); }, ValidarDescarga:function(id,succeededCallback, failedCallback, userContext) { return this._invoke(this._get_path(), 'ValidarDescarga',false,{id:id},succeededCallback,failedCallback,userContext); }, Descargar:function(param,succeededCallback, failedCallback, userContext) { return this._invoke(this._get_path(), 'Descargar',false,{param:param},succeededCallback,failedCallback,userContext); }, DescargaMetadatos:function(Parametros,succeededCallback, failedCallback, userContext) { return this._invoke(this._get_path(), 'DescargaMetadatos',false,{Parametros:Parametros},succeededCallback,failedCallback,userContext); }, ConsultaCuentaTerceros:function(Parametros,succeededCallback, failedCallback, userContext) { return this._invoke(this._get_path(), 'ConsultaCuentaTerceros',false,{Parametros:Parametros},succeededCallback,failedCallback,userContext); }, ObtieneUsuario:function(succeededCallback, failedCallback, userContext) { return this._invoke(this._get_path(), 'ObtieneUsuario',false,{},succeededCallback,failedCallback,userContext); }} PageMethods.registerClass('PageMethods',Sys.Net.WebServiceProxy); PageMethods._staticInstance = new PageMethods(); PageMethods.set_path = function(value) { PageMethods._staticInstance.set_path(value); } PageMethods.get_path = function() { return PageMethods._staticInstance.get_path(); } PageMethods.set_timeout = function(value) { PageMethods._staticInstance.set_timeout(value); } PageMethods.get_timeout = function() { return PageMethods._staticInstance.get_timeout(); } PageMethods.set_defaultUserContext = function(value) { PageMethods._staticInstance.set_defaultUserContext(value); } PageMethods.get_defaultUserContext = function() { return PageMethods._staticInstance.get_defaultUserContext(); } PageMethods.set_defaultSucceededCallback = function(value) { PageMethods._staticInstance.set_defaultSucceededCallback(value); } PageMethods.get_defaultSucceededCallback = function() { return PageMethods._staticInstance.get_defaultSucceededCallback(); } PageMethods.set_defaultFailedCallback = function(value) { PageMethods._staticInstance.set_defaultFailedCallback(value); } PageMethods.get_defaultFailedCallback = function() { return PageMethods._staticInstance.get_defaultFailedCallback(); } PageMethods.set_enableJsonp = function(value) { PageMethods._staticInstance.set_enableJsonp(value); } PageMethods.get_enableJsonp = function() { return PageMethods._staticInstance.get_enableJsonp(); } PageMethods.set_jsonpCallbackParameter = function(value) { PageMethods._staticInstance.set_jsonpCallbackParameter(value); } PageMethods.get_jsonpCallbackParameter = function() { return PageMethods._staticInstance.get_jsonpCallbackParameter(); } PageMethods.set_path(\"ConsultaEmisor.aspx\"); PageMethods.RecuperaAcuse= function(datos,onSuccess,onFailed,userContext) {PageMethods._staticInstance.RecuperaAcuse(datos,onSuccess,onFailed,userContext); } PageMethods.RecuperaRepresentacionImpresa= function(datos,onSuccess,onFailed,userContext) {PageMethods._staticInstance.RecuperaRepresentacionImpresa(datos,onSuccess,onFailed,userContext); } PageMethods.ValidarDescarga= function(id,onSuccess,onFailed,userContext) {PageMethods._staticInstance.ValidarDescarga(id,onSuccess,onFailed,userContext); } PageMethods.Descargar= function(param,onSuccess,onFailed,userContext) {PageMethods._staticInstance.Descargar(param,onSuccess,onFailed,userContext); } PageMethods.DescargaMetadatos= function(Parametros,onSuccess,onFailed,userContext) {PageMethods._staticInstance.DescargaMetadatos(Parametros,onSuccess,onFailed,userContext); } PageMethods.ConsultaCuentaTerceros= function(Parametros,onSuccess,onFailed,userContext) {PageMethods._staticInstance.ConsultaCuentaTerceros(Parametros,onSuccess,onFailed,userContext); } PageMethods.ObtieneUsuario= function(onSuccess,onFailed,userContext) {PageMethods._staticInstance.ObtieneUsuario(onSuccess,onFailed,userContext); } var gtc = Sys.Net.WebServiceProxy._generateTypedConstructor; Type.registerNamespace('Sat.Cfdi.Iu.Contribuyente.Portal'); if (typeof(Sat.Cfdi.Iu.Contribuyente.Portal.RespuestaValidaDescarga) === 'undefined') { Sat.Cfdi.Iu.Contribuyente.Portal.RespuestaValidaDescarga=gtc(\"Sat.Cfdi.Iu.Contribuyente.Portal.RespuestaValidaDescarga\"); Sat.Cfdi.Iu.Contribuyente.Portal.RespuestaValidaDescarga.registerClass('Sat.Cfdi.Iu.Contribuyente.Portal.RespuestaValidaDescarga'); } function WebForm_OnSubmit() { if (typeof(ValidatorOnSubmit) == \"function\" && ValidatorOnSubmit() == false) return false; return true; } //]]>  \r\n  \r\n//<![CDATA[ Sys.WebForms.PageRequestManager._initialize('ctl00$ScriptManager1', 'aspnetForm', ['fctl00$UpnlNombre','','tctl00$MainContent$UpnlBusqueda','','tctl00$MainContent$CldFechaInicial2$UpnlSeleccionFecha','','tctl00$MainContent$CldFechaFinal2$UpnlSeleccionFecha','','tctl00$MainContent$UpnlResultados',''], [], ['ctl00$MainContent$BtnDescargar','','ctl00$MainContent$BtnMetadata','','ctl00$MainContent$BtnCancelar','','ctl00$MainContent$BtnImprimir',''], 18000000, 'ctl00'); //]]>   \r\n\r\n\r\n\r\nInterruptor de Navegaci√≥n \r\n\r\n\r\n Factura electr√≥nica \r\n\r\nConsulta CFDI  \r\n\r\nFactura Electr√≥nica\r\n\r\n\r\nRetenciones e Inf. de Pagos\r\n\r\n\r\n\r\nGeneraci√≥n de CFDI \r\n\r\nConfiguraci√≥n de datos V 4.0\r\n\r\n\r\nConfiguraci√≥n de datos V 3.3\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n  Inicio \r\n Consultar Facturas Emitidas\r\n \r\n\r\nRFC Autenticado: AAMD660518TF2 Salir \r\n\r\n\r\n \r\n\r\n\r\nConsultar Facturas Emitidas\r\n\r\n\r\n\r\n\r\n\r\n\r\nFolio Fiscal * \r\n\r\n\r\n\r\n\r\n \r\n\r\n  /* the div that holds the date picker calendar */ .dpDiv { } /* the table (within the div) that holds the date picker calendar */ .dpTable { font-family: Open Sans, Helvetica Neue, Helvetica, Arial, sans-serif; font-size: 18px; line-height: 1.4285; text-align: center; color: #333; background-color: #fff; box-shadow: 0px 2px 7px rgba(0,0,0,0.2); border-radius: 0; width: 300px; height: 300px; } /* the top table row that holds the month, year, and forward/backward buttons */ .dpTitleTR { background-color: #222; } /* the second table row, that holds the names of days of the week (Mo, Tu, We, etc.) */ .dpDayTR { border-bottom: 1px solid #111; } /* a table cell that holds a date number (either blank or 1-31) */ .dpTD { /* border: 1px solid #ece9d8;*/ color: #003399; } /* a table cell that holds a highlighted day (usually either today's date or the current date field value) */ .dpDayHighlightTD { background-color: #ffdf88; } /* the date number table cell that the mouse pointer is currently over (you can use contrasting colors to make it apparent which cell is being hovered over) */ .dpTDHover { background-color: #ffffff; border: 1px solid #888888; cursor: pointer; color: red; } /* the table cell that holds the name of the month and the year */ .dpTitleTD { } /* a table cell that holds one of the forward/backward buttons */ .dpButtonTD { } /* the table cell that holds the \"This Month\" or \"Close\" button at the bottom */ .dpTodayButtonTD { } /* a table cell that holds the names of days of the week (Mo, Tu, We, etc.) */ .dpDayTD { /*background-color: #FFFFFF;*/ /*border: 1px solid #AAAAAA;*/ text-transform: uppercase; font-weight:300; color: #9d9d9d; font-size: 10px; } /* additional style information for the text that indicates the month and year */ .dpTitleText { font-size: 18px; color: #fff; line-height: 1em; text-align: center; } /* additional style information for the cell that holds a highlighted day (usually either today's date or the current date field value) */ .dpDayHighlight { /*color: 4060ff; font-weight: bold;*/ color: #003399; text-decoration: none; } /* the forward/backward buttons at the top */ .dpButton { font-family: Tahoma; font-size: 8pt; color: gray; background: #d8e8ff; font-weight: normal; padding: 0px; } .dpButtonExtra { font-family: Tahoma; font-size: 8pt; color: gray; background: #d8e8ff; font-weight: bold; padding: 0px; margin-left: -8px; } /* the \"This Month\" and \"Close\" buttons at the bottom */ .dpTodayButton { font-family: Tahoma; font-size: 7pt; color: gray; background: #d8e8ff; font-weight: bold; } .surveyTable, .surveytd { border-color: #000000; border-style: solid; font-family: Tahoma; font-size: 10pt; } .surveyTable { /*border-width: 0 0 1px 1px;*/ border-spacing: 0; /*border-collapse: collapse;*/ font-family: Tahoma; font-size: 10pt; } .surveytd { margin: 0; padding: 4px; /*border-width: 1px 1px 0 0;*/ font-family: Tahoma; font-size: 10pt; } .surveyButton { border-top: solid 1px #CCCCCC; background-color: #E5E5E5; font-family: Tahoma; font-size: 10pt; } #DivCalendario { position: absolute; top: 1px; width: 220px; display: none; margin-top: 10px; z-index: 1000; background: white; } #DivTexto { display: block; width: 200px; }  \r\n\r\n\r\nFecha Inicial de Emisi√≥n * \r\n\r\n  \r\n\r\n\r\n00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 \r\n\r\n:\r\n\r\n\r\n00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 \r\n\r\n:\r\n\r\n\r\n00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 \r\n//DataPicker var datePickerDivID = \"datepicker\"; var iFrameDivID = \"datepickeriframe\"; var dayArrayShort = new Array('DOM', 'LUN', 'MAR', 'MIE', 'JUE', 'VIE', 'SAB'); var dayArrayMed = new Array('Dom', 'Lun', 'Mar', 'Mie', 'Jue', 'Vie', 'Sab'); var dayArrayLong = new Array('Domingo', 'Lunes', 'Martes', 'Miercoles', 'Jueves', 'Viernes', 'Sabado'); var monthArrayShort = new Array('Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'); var monthArrayMed = new Array('Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'); var monthArrayLong = new Array('Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'); // these variables define the date formatting we're expecting and outputting. // If you want to use a different format by default, change the defaultDateSeparator // and defaultDateFormat variables either here or on your HTML page. var defaultDateSeparator = \"/\"; // common values would be \"/\" or \".\" var defaultDateFormat = \"mdy\" // valid values are \"mdy\", \"chadmy\", and \"ymd\" var dateSeparator = defaultDateSeparator; var dateFormat = defaultDateFormat; var idCajaTexto = 'ctl00_MainContent_CldFechaInicial2_Calendario_text'; var _CustomAction = null; /** This is the main function you'll call from the onClick event of a button. Normally, you'll have something like this on your HTML page: Start Date: <input name=\"StartDate\"> <input type=button value=\"select\" onclick=\"displayDatePicker('StartDate');\"> That will cause the datepicker to be displayed beneath the StartDate field and any date that is chosen will update the value of that field. If you'd rather have the datepicker display beneath the button that was clicked, you can code the button like this: <input type=button value=\"select\" onclick=\"displayDatePicker('StartDate', this);\"> So, pretty much, the first argument (dateFieldName) is a string representing the name of the field that will be modified if the user picks a date, and the second argument (displayBelowThisObject) is optional and represents an actual node on the HTML document that the datepicker should be displayed below. In version 1.1 of this code, the dtFormat and dtSep variables were added, allowing you to use a specific date format or date separator for a given call to this function. Normally, you'll just want to set these defaults globally with the defaultDateSeparator and defaultDateFormat variables, but it doesn't hurt anything to add them as optional parameters here. An example of use is: <input type=button value=\"select\" onclick=\"displayDatePicker('StartDate', false, 'dmy', '.');\"> This would display the datepicker beneath the StartDate field (because the displayBelowThisObject parameter was false), and update the StartDate field with the chosen value of the datepicker using a date format of dd.mm.yyyy */ function displayDatePicker(dateFieldName, displayBelowThisObject, dtFormat, dtSep) { var targetDateField = document.getElementById(dateFieldName); // this._CustomAction = CustomAction; // // if we weren't told what node to display the datepicker beneath, just display it // beneath the date field we're updating if (!displayBelowThisObject) { displayBelowThisObject = targetDateField; } // if a date separator character was given, update the dateSeparator variable if (dtSep) dateSeparator = dtSep; else dateSeparator = defaultDateSeparator; // if a date format was given, update the dateFormat variable if (dtFormat) dateFormat = dtFormat; else dateFormat = defaultDateFormat; var x = displayBelowThisObject.offsetLeft; var y = displayBelowThisObject.offsetTop + displayBelowThisObject.offsetHeight; // deal with elements inside tables and such var parent = displayBelowThisObject; while (parent.offsetParent) { parent = parent.offsetParent; x += parent.offsetLeft; y += parent.offsetTop; } drawDatePicker(targetDateField, x, y); } /** Draw the datepicker object (which is just a table with calendar elements) at the specified x and y coordinates, using the targetDateField object as the input tag that will ultimately be populated with a date. This function will normally be called by the displayDatePicker function. */ function drawDatePicker(targetDateField, x, y) { var dt = getFieldDate(targetDateField.value); // the datepicker table will be drawn inside of a <div> with an ID defined by the // global datePickerDivID variable. If such a div doesn't yet exist on the HTML // document we're working with, add one. if (!document.getElementById(datePickerDivID)) { // don't use innerHTML to update the body, because it can cause global variables // that are currently pointing to objects on the page to have bad references //document.body.innerHTML += \"<div id='\" + datePickerDivID + \"' class='dpDiv'></div>\"; var newNode = document.createElement(\"div\"); newNode.setAttribute(\"id\", datePickerDivID); newNode.setAttribute(\"class\", \"dpDiv\"); //newNode.setAttribute(\"style\", \"visibility: hidden;\"); document.body.appendChild(newNode); } // move the datepicker div to the proper x,y coordinate and toggle the visiblity var pickerDiv = document.getElementById(datePickerDivID); pickerDiv.style.position = \"absolute\"; pickerDiv.style.left = x + \"px\"; pickerDiv.style.top = y + \"px\"; pickerDiv.style.visibility = (pickerDiv.style.visibility == \"visible\" ? \"hidden\" : \"visible\"); //pickerDiv.style.visibility = \"visible\"; pickerDiv.style.display = (pickerDiv.style.display == \"block\" ? \"none\" : \"block\"); pickerDiv.style.zIndex = 10000; // draw the datepicker table refreshDatePicker(targetDateField.name, dt.getFullYear(), dt.getMonth(), dt.getDate()); } /** This is the function that actually draws the datepicker calendar. */ function refreshDatePicker(dateFieldName, year, month, day) { // if no arguments are passed, use today's date; otherwise, month and year // are required (if a day is passed, it will be highlighted later) var thisDay = new Date(); if ((month >= 0) && (year > 0)) { thisDay = new Date(year, month, 1); } else { day = thisDay.getDate(); thisDay.setDate(1); } // the calendar will be drawn as a table // you can customize the table elements with a global CSS style sheet, // or by hardcoding style and formatting elements below var crlf = \"\\r\\n\"; var TABLE = \"<table cols=7 class='dpTable'>\" + crlf; var xTABLE = \"</table>\" + crlf; var TR = \"<tr class='dpTR'>\"; var TR_title = \"<tr class='dpTitleTR'>\"; var TR_days = \"<tr>\"; var TR_todaybutton = \"<tr class='dpTodayButtonTR'>\"; var xTR = \"</tr>\" + crlf; var TD = \"<td class='dpTD' onMouseOut='this.className=\\\"dpTD\\\";' onMouseOver=' this.className=\\\"dpTDHover\\\";' \"; // leave this tag open, because we'll be adding an onClick event var TD_title = \"<td colspan=5 class='dpTitleTD'>\"; var TD_buttons = \"<td class='dpButtonTD'>\"; var TD_todaybutton = \"<td colspan=7 class='dpTodayButtonTD'>\"; var TD_days = \"<td class='dpDayTD'>\"; var TD_selected = \"<td class='dpDayHighlightTD' onMouseOut='this.className=\\\"dpDayHighlightTD\\\";' onMouseOver='this.className=\\\"dpTDHover\\\";' \"; // leave this tag open, because we'll be adding an onClick event var xTD = \"</td>\" + crlf; var DIV_title = \"<div class='dpTitleText'>\"; var DIV_selected = \"<div class='dpDayHighlight'>\"; var xDIV = \"</div>\"; // start generating the code for the calendar table var html = TABLE; // this is the title bar, which displays the month and the buttons to // go back to a previous month or forward to the next month html += TR_title; html += TD_buttons + getButtonCode(dateFieldName, thisDay, -1, \"&lt;\") + xTD; html += TD_title + DIV_title + monthArrayLong[thisDay.getMonth()] + \" \" + thisDay.getFullYear() + xDIV + xTD; html += TD_buttons + getButtonCode(dateFieldName, thisDay, 1, \"&gt;\") + xTD; html += xTR; // this is the row that indicates which day of the week we're on html += TR_days; for (i = 0; i < dayArrayShort.length; i++) html += TD_days + dayArrayShort[i] + xTD; html += xTR; // now we'll start populating the table with days of the month html += TR; // first, the leading blanks for (i = 0; i < thisDay.getDay(); i++) html += TD + \"&nbsp;\" + xTD; // now, the days of the month do { dayNum = thisDay.getDate(); TD_onclick = \" onclick=\\\"updateDateField('\" + dateFieldName + \"', '\" + getDateString(thisDay) + \"');\\\">\"; if (dayNum == day) html += TD_selected + TD_onclick + DIV_selected + dayNum + xDIV + xTD; else html += TD + TD_onclick + dayNum + xTD; // if this is a Saturday, start a new row if (thisDay.getDay() == 6) html += xTR + TR; // increment the day thisDay.setDate(thisDay.getDate() + 1); } while (thisDay.getDate() > 1) // fill in any trailing blanks if (thisDay.getDay() > 0) { for (i = 6; i > thisDay.getDay(); i--) html += TD + \"&nbsp;\" + xTD; } html += xTR; // add a button to allow the user to easily return to today, or close the calendar var today = new Date(); var todayString = \"Today is \" + dayArrayMed[today.getDay()] + \", \" + monthArrayMed[today.getMonth()] + \" \" + today.getDate(); html += TR_todaybutton + TD_todaybutton; //html += \"<button class='dpTodayButton' onClick='refreshDatePicker(\\\"\" + dateFieldName + \"\\\");'>this month</button> \"; html += \"<button class='dpTodayButton' onClick='updateDateField(\\\"\" + dateFieldName + \"\\\");'>cerrar</button>\"; html += xTD + xTR; // and finally, close the table html += xTABLE; document.getElementById(datePickerDivID).innerHTML = html; // add an \"iFrame shim\" to allow the datepicker to display above selection lists adjustiFrame(); } /** Convenience function for writing the code for the buttons that bring us back or forward a month. */ function getButtonCode(dateFieldName, dateVal, adjust, label) { var newMonth = (dateVal.getMonth() + adjust) % 12; var newYear = dateVal.getFullYear() + parseInt((dateVal.getMonth() + adjust) / 12); if (newMonth < 0) { newMonth += 12; newYear += -1; } return \"<button class='dpButton' onClick='refreshDatePicker(\\\"\" + dateFieldName + \"\\\", \" + newYear + \", \" + newMonth + \");'>\" + label + \"</button>\"; } /** Convert a JavaScript Date object to a string, based on the dateFormat and dateSeparator variables at the beginning of this script library. */ function getDateString(dateVal) { var dayString = \"00\" + dateVal.getDate(); var monthString = \"00\" + (dateVal.getMonth() + 1); dayString = dayString.substring(dayString.length - 2); monthString = monthString.substring(monthString.length - 2); switch (dateFormat) { case \"dmy\": return dayString + dateSeparator + monthString + dateSeparator + dateVal.getFullYear(); case \"ymd\": return dateVal.getFullYear() + dateSeparator + monthString + dateSeparator + dayString; case \"mdy\": default: return monthString + dateSeparator + dayString + dateSeparator + dateVal.getFullYear(); } } /** Convert a string to a JavaScript Date object. */ function getFieldDate(dateString) { var dateVal; var dArray; var d, m, y; try { dArray = splitDateString(dateString); if (dArray) { switch (dateFormat) { case \"dmy\": d = parseInt(dArray[0], 10); m = parseInt(dArray[1], 10) - 1; y = parseInt(dArray[2], 10); break; case \"ymd\": d = parseInt(dArray[2], 10); m = parseInt(dArray[1], 10) - 1; y = parseInt(dArray[0], 10); break; case \"mdy\": default: d = parseInt(dArray[1], 10); m = parseInt(dArray[0], 10) - 1; y = parseInt(dArray[2], 10); break; } dateVal = new Date(y, m, d); } else if (dateString) { dateVal = new Date(dateString); } else { dateVal = new Date(); } } catch (e) { dateVal = new Date(); } return dateVal; } /** Try to split a date string into an array of elements, using common date separators. If the date is split, an array is returned; otherwise, we just return false. */ function splitDateString(dateString) { var dArray; if (dateString.indexOf(\"/\") >= 0) dArray = dateString.split(\"/\"); else if (dateString.indexOf(\".\") >= 0) dArray = dateString.split(\".\"); else if (dateString.indexOf(\"-\") >= 0) dArray = dateString.split(\"-\"); else if (dateString.indexOf(\"\\\\\") >= 0) dArray = dateString.split(\"\\\\\"); else dArray = false; return dArray; } /** Update the field with the given dateFieldName with the dateString that has been passed, and hide the datepicker. If no dateString is passed, just close the datepicker without changing the field value. Also, if the page developer has defined a function called datePickerClosed anywhere on the page or in an imported library, we will attempt to run that function with the updated field as a parameter. This can be used for such things as date validation, setting default values for related fields, etc. For example, you might have a function like this to validate a start date field: function datePickerClosed(dateField) { var dateObj = getFieldDate(dateField.value); var today = new Date(); today = new Date(today.getFullYear(), today.getMonth(), today.getDate()); if (dateField.name == \"StartDate\") { if (dateObj < today) { // if the date is before today, alert the user and display the datepicker again alert(\"Please enter a date that is today or later\"); dateField.value = \"\"; document.getElementById(datePickerDivID).style.visibility = \"visible\"; adjustiFrame(); } else { // if the date is okay, set the EndDate field to 7 days after the StartDate dateObj.setTime(dateObj.getTime() + (7 * 24 * 60 * 60 * 1000)); var endDateField = document.getElementsByName (\"EndDate\").item(0); endDateField.value = getDateString(dateObj); } } } */ function SetDDL(targetField, dateFieldName, dateString) { var StartDate = 2014; var EndDate = 2014; var IsInicial = dateFieldName.indexOf(\"FechaInicial\"); var IsFinal = dateFieldName.indexOf(\"FechaFinal\"); var hfInicial = document.getElementById(\"hfInicial\"); var hfFinal = document.getElementById(\"hfFinal\"); if(IsInicial > -1) { hfInicial.value = dateString; hfInicial.value = getFieldDate(hfInicial.value).getFullYear(); } if(IsFinal > -1) { hfFinal.value = dateString; hfFinal.value = getFieldDate(hfFinal.value).getFullYear(); } if(hfInicial.value != \"\") { StartDate = hfInicial.value; } if(hfFinal.value != \"\") { EndDate = hfFinal.value; } //var dt = getFieldDate(targetField.value); //var year = dt.getFullYear(); //alert(targetField.id); var ddl = document.getElementById(\"ctl00_MainContent_ddlComplementos\"); var passed = true; if(StartDate < 2014 || EndDate < 2014) { passed = false; } if(!passed) { var hfInicialBool = document.getElementById(\"hfInicialBool\"); hfInicialBool.value = \"true\"; if(ddl != null) { ddl.selectedIndex=0; ddl.disabled= true; } } if(passed) { var hfInicialBool = document.getElementById(\"hfInicialBool\"); hfInicialBool.value = \"false\"; if(ddl != null) ddl.disabled= false; } } function updateDateField(dateFieldName, dateString) { var targetDateField = document.getElementsByName(dateFieldName).item(0); if (dateString) { //var Contenedor = $('#'+ dateFieldName); var idDependiente = '#' + $(targetDateField).attr('dependiente'); if (false) { $(idDependiente + '_Calendario_text').val(dateString); //$(idDependiente + '_DdlHora').val(\"23\"); var opHora = $(idDependiente + '_DdlHora').find(\"option[value=23]\"); $(idDependiente + '_DdlHora').selectbox(\"change\", opHora.attr('value'), opHora.html()); //$(idDependiente + '_DdlMinuto').val(\"59\"); var opMinuto = $(idDependiente + '_DdlMinuto').find(\"option[value=59]\"); $(idDependiente + '_DdlMinuto').selectbox(\"change\", opMinuto.attr('value'), opMinuto.html()); //$(idDependiente + '_DdlSegundo').val(\"59\"); var opSegundo = $(idDependiente + '_DdlSegundo').find(\"option[value=59]\"); $(idDependiente + '_DdlSegundo').selectbox(\"change\", opSegundo.attr('value'), opSegundo.html()); } targetDateField.value = dateString; if (this._CustomAction != null) this._CustomAction(dateString); SetDDL(targetDateField, dateFieldName, dateString); } // targetDateField.fireEvent('onchange'); var pickerDiv = document.getElementById(datePickerDivID); if(pickerDiv != null) { pickerDiv.style.visibility = \"hidden\"; pickerDiv.style.display = \"none\"; adjustiFrame(); // after the datepicker has closed, optionally run a user-defined function called // datePickerClosed, passing the field that was just updated as a parameter // (note that this will only run if the user actually selected a date from the datepicker) if ((dateString) && (typeof (datePickerClosed) == \"function\")) datePickerClosed(targetDateField); } } /** Use an \"iFrame shim\" to deal with problems where the datepicker shows up behind selection list elements, if they're below the datepicker. */ function adjustiFrame(pickerDiv, iFrameDiv) { // we know that Opera doesn't like something about this, so if we // think we're using Opera, don't even try var is_opera = (navigator.userAgent.toLowerCase().indexOf(\"opera\") != -1); if (is_opera) return; // put a try/catch block around the whole thing, just in case try { if (!document.getElementById(iFrameDivID)) { // don't use innerHTML to update the body, because it can cause global variables // that are currently pointing to objects on the page to have bad references //document.body.innerHTML += \"<iframe id='\" + iFrameDivID + \"' src='javascript:false;' scrolling='no' frameborder='0'>\"; var newNode = document.createElement(\"iFrame\"); newNode.setAttribute(\"id\", iFrameDivID); // newNode.setAttribute(\"src\", \"javascript:false;\"); newNode.setAttribute(\"scrolling\", \"no\"); newNode.setAttribute(\"frameborder\", \"0\"); document.body.appendChild(newNode); } if (!pickerDiv) pickerDiv = document.getElementById(datePickerDivID); if (!iFrameDiv) iFrameDiv = document.getElementById(iFrameDivID); try { iFrameDiv.style.position = \"absolute\"; iFrameDiv.style.width = pickerDiv.offsetWidth; iFrameDiv.style.height = pickerDiv.offsetHeight; iFrameDiv.style.top = pickerDiv.style.top; iFrameDiv.style.left = pickerDiv.style.left; iFrameDiv.style.zIndex = pickerDiv.style.zIndex - 1; iFrameDiv.style.visibility = pickerDiv.style.visibility; iFrameDiv.style.display = pickerDiv.style.display; } catch (e) { } } catch (ee) { } } /* Function Ends for calendar chk line 379 for doubts*/ /// ////Define la posici√≥n en donde aparecer√° el calendario. function DefinePosicionCalendario(NombreContenedor, NombreEtiqueta, NombreCaja) { var lblFecha = $(NombreEtiqueta); //Instancia de la etiqueta var txtFecha = $(NombreCaja); //Instancia de la caja de texto var TopCalendario = txtFecha.offset().top + txtFecha.height(); //Posici√≥n del calendario var Contenedor = $(NombreContenedor).children(\"#SeleccionFecha\"); Contenedor.children(\"#DivCalendario\").css('left', txtFecha.offset().left).css('top', TopCalendario); } // ////Define las posiciones iniciales de los controles. function DefinePosicionInicial() { var lblFecha = $(\"#ctl00_MainContent_CldFechaInicial2_LblFecha\"); //Instancia de la etiqueta var txtFecha = $(\"#\" + idCajaTexto); //Instancia de la caja de texto var ancho = $(\"#DivTexto\").width() + lblFecha.width(); //Se obtiene el ancho del div principal var LeftBotonFecha = lblFecha.position().left + lblFecha.width() + txtFecha.width(); // Se obtiene la posisici√≥n del bot√≥n var TopDivTexto = parseInt(lblFecha.height() / 2) - parseInt($(\"#DivTexto\").height() / 2); //Se obtiene la posicion vertical de la caja de texto y del bot√≥n var Contenedor = $(\"#ctl00_MainContent_CldFechaInicial2_UpnlSeleccionFecha\").children(\"#SeleccionFecha\"); Contenedor.children(\"#SeleccionFecha\").width(ancho); } function ConfiguraCombosMac() { var isMac = navigator.userAgent.indexOf(\"Macintosh\") if(isMac != -1) $(document.getElementsByClassName(\"calendarCombo\")).css(\"width\", \"45px\"); } $(function() { DefinePosicionInicial(); //Se establece la acci√≥n para mostrar el calendario $(\"#ctl00_MainContent_CldFechaInicial2_BtnFecha2\").live('click', function() { if ($(\"#ctl00_MainContent_CldFechaInicial2_BtnFecha2\").attr('habilitado') == \"true\") { var cajaTexto = $(this).parent().find(\":input\"); displayDatePicker(cajaTexto.attr('id'), false, 'dmy', '/'); } }); });  \r\n\r\n /* the div that holds the date picker calendar */ .dpDiv { } /* the table (within the div) that holds the date picker calendar */ .dpTable { font-family: Open Sans, Helvetica Neue, Helvetica, Arial, sans-serif; font-size: 18px; line-height: 1.4285; text-align: center; color: #333; background-color: #fff; box-shadow: 0px 2px 7px rgba(0,0,0,0.2); border-radius: 0; width: 300px; height: 300px; } /* the top table row that holds the month, year, and forward/backward buttons */ .dpTitleTR { background-color: #222; } /* the second table row, that holds the names of days of the week (Mo, Tu, We, etc.) */ .dpDayTR { border-bottom: 1px solid #111; } /* a table cell that holds a date number (either blank or 1-31) */ .dpTD { /* border: 1px solid #ece9d8;*/ color: #003399; } /* a table cell that holds a highlighted day (usually either today's date or the current date field value) */ .dpDayHighlightTD { background-color: #ffdf88; } /* the date number table cell that the mouse pointer is currently over (you can use contrasting colors to make it apparent which cell is being hovered over) */ .dpTDHover { background-color: #ffffff; border: 1px solid #888888; cursor: pointer; color: red; } /* the table cell that holds the name of the month and the year */ .dpTitleTD { } /* a table cell that holds one of the forward/backward buttons */ .dpButtonTD { } /* the table cell that holds the \"This Month\" or \"Close\" button at the bottom */ .dpTodayButtonTD { } /* a table cell that holds the names of days of the week (Mo, Tu, We, etc.) */ .dpDayTD { /*background-color: #FFFFFF;*/ /*border: 1px solid #AAAAAA;*/ text-transform: uppercase; font-weight:300; color: #9d9d9d; font-size: 10px; } /* additional style information for the text that indicates the month and year */ .dpTitleText { font-size: 18px; color: #fff; line-height: 1em; text-align: center; } /* additional style information for the cell that holds a highlighted day (usually either today's date or the current date field value) */ .dpDayHighlight { /*color: 4060ff; font-weight: bold;*/ color: #003399; text-decoration: none; } /* the forward/backward buttons at the top */ .dpButton { font-family: Tahoma; font-size: 8pt; color: gray; background: #d8e8ff; font-weight: normal; padding: 0px; } .dpButtonExtra { font-family: Tahoma; font-size: 8pt; color: gray; background: #d8e8ff; font-weight: bold; padding: 0px; margin-left: -8px; } /* the \"This Month\" and \"Close\" buttons at the bottom */ .dpTodayButton { font-family: Tahoma; font-size: 7pt; color: gray; background: #d8e8ff; font-weight: bold; } .surveyTable, .surveytd { border-color: #000000; border-style: solid; font-family: Tahoma; font-size: 10pt; } .surveyTable { /*border-width: 0 0 1px 1px;*/ border-spacing: 0; /*border-collapse: collapse;*/ font-family: Tahoma; font-size: 10pt; } .surveytd { margin: 0; padding: 4px; /*border-width: 1px 1px 0 0;*/ font-family: Tahoma; font-size: 10pt; } .surveyButton { border-top: solid 1px #CCCCCC; background-color: #E5E5E5; font-family: Tahoma; font-size: 10pt; } #DivCalendario { position: absolute; top: 1px; width: 220px; display: none; margin-top: 10px; z-index: 1000; background: white; } #DivTexto { display: block; width: 200px; }  \r\n\r\n\r\nFecha Final de Emisi√≥n * \r\n\r\n  \r\n\r\n\r\n00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 \r\n\r\n:\r\n\r\n\r\n00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 \r\n\r\n:\r\n\r\n\r\n00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 \r\n//DataPicker var datePickerDivID = \"datepicker\"; var iFrameDivID = \"datepickeriframe\"; var dayArrayShort = new Array('DOM', 'LUN', 'MAR', 'MIE', 'JUE', 'VIE', 'SAB'); var dayArrayMed = new Array('Dom', 'Lun', 'Mar', 'Mie', 'Jue', 'Vie', 'Sab'); var dayArrayLong = new Array('Domingo', 'Lunes', 'Martes', 'Miercoles', 'Jueves', 'Viernes', 'Sabado'); var monthArrayShort = new Array('Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'); var monthArrayMed = new Array('Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'); var monthArrayLong = new Array('Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'); // these variables define the date formatting we're expecting and outputting. // If you want to use a different format by default, change the defaultDateSeparator // and defaultDateFormat variables either here or on your HTML page. var defaultDateSeparator = \"/\"; // common values would be \"/\" or \".\" var defaultDateFormat = \"mdy\" // valid values are \"mdy\", \"chadmy\", and \"ymd\" var dateSeparator = defaultDateSeparator; var dateFormat = defaultDateFormat; var idCajaTexto = 'ctl00_MainContent_CldFechaFinal2_Calendario_text'; var _CustomAction = null; /** This is the main function you'll call from the onClick event of a button. Normally, you'll have something like this on your HTML page: Start Date: <input name=\"StartDate\"> <input type=button value=\"select\" onclick=\"displayDatePicker('StartDate');\"> That will cause the datepicker to be displayed beneath the StartDate field and any date that is chosen will update the value of that field. If you'd rather have the datepicker display beneath the button that was clicked, you can code the button like this: <input type=button value=\"select\" onclick=\"displayDatePicker('StartDate', this);\"> So, pretty much, the first argument (dateFieldName) is a string representing the name of the field that will be modified if the user picks a date, and the second argument (displayBelowThisObject) is optional and represents an actual node on the HTML document that the datepicker should be displayed below. In version 1.1 of this code, the dtFormat and dtSep variables were added, allowing you to use a specific date format or date separator for a given call to this function. Normally, you'll just want to set these defaults globally with the defaultDateSeparator and defaultDateFormat variables, but it doesn't hurt anything to add them as optional parameters here. An example of use is: <input type=button value=\"select\" onclick=\"displayDatePicker('StartDate', false, 'dmy', '.');\"> This would display the datepicker beneath the StartDate field (because the displayBelowThisObject parameter was false), and update the StartDate field with the chosen value of the datepicker using a date format of dd.mm.yyyy */ function displayDatePicker(dateFieldName, displayBelowThisObject, dtFormat, dtSep) { var targetDateField = document.getElementById(dateFieldName); // this._CustomAction = CustomAction; // // if we weren't told what node to display the datepicker beneath, just display it // beneath the date field we're updating if (!displayBelowThisObject) { displayBelowThisObject = targetDateField; } // if a date separator character was given, update the dateSeparator variable if (dtSep) dateSeparator = dtSep; else dateSeparator = defaultDateSeparator; // if a date format was given, update the dateFormat variable if (dtFormat) dateFormat = dtFormat; else dateFormat = defaultDateFormat; var x = displayBelowThisObject.offsetLeft; var y = displayBelowThisObject.offsetTop + displayBelowThisObject.offsetHeight; // deal with elements inside tables and such var parent = displayBelowThisObject; while (parent.offsetParent) { parent = parent.offsetParent; x += parent.offsetLeft; y += parent.offsetTop; } drawDatePicker(targetDateField, x, y); } /** Draw the datepicker object (which is just a table with calendar elements) at the specified x and y coordinates, using the targetDateField object as the input tag that will ultimately be populated with a date. This function will normally be called by the displayDatePicker function. */ function drawDatePicker(targetDateField, x, y) { var dt = getFieldDate(targetDateField.value); // the datepicker table will be drawn inside of a <div> with an ID defined by the // global datePickerDivID variable. If such a div doesn't yet exist on the HTML // document we're working with, add one. if (!document.getElementById(datePickerDivID)) { // don't use innerHTML to update the body, because it can cause global variables // that are currently pointing to objects on the page to have bad references //document.body.innerHTML += \"<div id='\" + datePickerDivID + \"' class='dpDiv'></div>\"; var newNode = document.createElement(\"div\"); newNode.setAttribute(\"id\", datePickerDivID); newNode.setAttribute(\"class\", \"dpDiv\"); //newNode.setAttribute(\"style\", \"visibility: hidden;\"); document.body.appendChild(newNode); } // move the datepicker div to the proper x,y coordinate and toggle the visiblity var pickerDiv = document.getElementById(datePickerDivID); pickerDiv.style.position = \"absolute\"; pickerDiv.style.left = x + \"px\"; pickerDiv.style.top = y + \"px\"; pickerDiv.style.visibility = (pickerDiv.style.visibility == \"visible\" ? \"hidden\" : \"visible\"); //pickerDiv.style.visibility = \"visible\"; pickerDiv.style.display = (pickerDiv.style.display == \"block\" ? \"none\" : \"block\"); pickerDiv.style.zIndex = 10000; // draw the datepicker table refreshDatePicker(targetDateField.name, dt.getFullYear(), dt.getMonth(), dt.getDate()); } /** This is the function that actually draws the datepicker calendar. */ function refreshDatePicker(dateFieldName, year, month, day) { // if no arguments are passed, use today's date; otherwise, month and year // are required (if a day is passed, it will be highlighted later) var thisDay = new Date(); if ((month >= 0) && (year > 0)) { thisDay = new Date(year, month, 1); } else { day = thisDay.getDate(); thisDay.setDate(1); } // the calendar will be drawn as a table // you can customize the table elements with a global CSS style sheet, // or by hardcoding style and formatting elements below var crlf = \"\\r\\n\"; var TABLE = \"<table cols=7 class='dpTable'>\" + crlf; var xTABLE = \"</table>\" + crlf; var TR = \"<tr class='dpTR'>\"; var TR_title = \"<tr class='dpTitleTR'>\"; var TR_days = \"<tr>\"; var TR_todaybutton = \"<tr class='dpTodayButtonTR'>\"; var xTR = \"</tr>\" + crlf; var TD = \"<td class='dpTD' onMouseOut='this.className=\\\"dpTD\\\";' onMouseOver=' this.className=\\\"dpTDHover\\\";' \"; // leave this tag open, because we'll be adding an onClick event var TD_title = \"<td colspan=5 class='dpTitleTD'>\"; var TD_buttons = \"<td class='dpButtonTD'>\"; var TD_todaybutton = \"<td colspan=7 class='dpTodayButtonTD'>\"; var TD_days = \"<td class='dpDayTD'>\"; var TD_selected = \"<td class='dpDayHighlightTD' onMouseOut='this.className=\\\"dpDayHighlightTD\\\";' onMouseOver='this.className=\\\"dpTDHover\\\";' \"; // leave this tag open, because we'll be adding an onClick event var xTD = \"</td>\" + crlf; var DIV_title = \"<div class='dpTitleText'>\"; var DIV_selected = \"<div class='dpDayHighlight'>\"; var xDIV = \"</div>\"; // start generating the code for the calendar table var html = TABLE; // this is the title bar, which displays the month and the buttons to // go back to a previous month or forward to the next month html += TR_title; html += TD_buttons + getButtonCode(dateFieldName, thisDay, -1, \"&lt;\") + xTD; html += TD_title + DIV_title + monthArrayLong[thisDay.getMonth()] + \" \" + thisDay.getFullYear() + xDIV + xTD; html += TD_buttons + getButtonCode(dateFieldName, thisDay, 1, \"&gt;\") + xTD; html += xTR; // this is the row that indicates which day of the week we're on html += TR_days; for (i = 0; i < dayArrayShort.length; i++) html += TD_days + dayArrayShort[i] + xTD; html += xTR; // now we'll start populating the table with days of the month html += TR; // first, the leading blanks for (i = 0; i < thisDay.getDay(); i++) html += TD + \"&nbsp;\" + xTD; // now, the days of the month do { dayNum = thisDay.getDate(); TD_onclick = \" onclick=\\\"updateDateField('\" + dateFieldName + \"', '\" + getDateString(thisDay) + \"');\\\">\"; if (dayNum == day) html += TD_selected + TD_onclick + DIV_selected + dayNum + xDIV + xTD; else html += TD + TD_onclick + dayNum + xTD; // if this is a Saturday, start a new row if (thisDay.getDay() == 6) html += xTR + TR; // increment the day thisDay.setDate(thisDay.getDate() + 1); } while (thisDay.getDate() > 1) // fill in any trailing blanks if (thisDay.getDay() > 0) { for (i = 6; i > thisDay.getDay(); i--) html += TD + \"&nbsp;\" + xTD; } html += xTR; // add a button to allow the user to easily return to today, or close the calendar var today = new Date(); var todayString = \"Today is \" + dayArrayMed[today.getDay()] + \", \" + monthArrayMed[today.getMonth()] + \" \" + today.getDate(); html += TR_todaybutton + TD_todaybutton; //html += \"<button class='dpTodayButton' onClick='refreshDatePicker(\\\"\" + dateFieldName + \"\\\");'>this month</button> \"; html += \"<button class='dpTodayButton' onClick='updateDateField(\\\"\" + dateFieldName + \"\\\");'>cerrar</button>\"; html += xTD + xTR; // and finally, close the table html += xTABLE; document.getElementById(datePickerDivID).innerHTML = html; // add an \"iFrame shim\" to allow the datepicker to display above selection lists adjustiFrame(); } /** Convenience function for writing the code for the buttons that bring us back or forward a month. */ function getButtonCode(dateFieldName, dateVal, adjust, label) { var newMonth = (dateVal.getMonth() + adjust) % 12; var newYear = dateVal.getFullYear() + parseInt((dateVal.getMonth() + adjust) / 12); if (newMonth < 0) { newMonth += 12; newYear += -1; } return \"<button class='dpButton' onClick='refreshDatePicker(\\\"\" + dateFieldName + \"\\\", \" + newYear + \", \" + newMonth + \");'>\" + label + \"</button>\"; } /** Convert a JavaScript Date object to a string, based on the dateFormat and dateSeparator variables at the beginning of this script library. */ function getDateString(dateVal) { var dayString = \"00\" + dateVal.getDate(); var monthString = \"00\" + (dateVal.getMonth() + 1); dayString = dayString.substring(dayString.length - 2); monthString = monthString.substring(monthString.length - 2); switch (dateFormat) { case \"dmy\": return dayString + dateSeparator + monthString + dateSeparator + dateVal.getFullYear(); case \"ymd\": return dateVal.getFullYear() + dateSeparator + monthString + dateSeparator + dayString; case \"mdy\": default: return monthString + dateSeparator + dayString + dateSeparator + dateVal.getFullYear(); } } /** Convert a string to a JavaScript Date object. */ function getFieldDate(dateString) { var dateVal; var dArray; var d, m, y; try { dArray = splitDateString(dateString); if (dArray) { switch (dateFormat) { case \"dmy\": d = parseInt(dArray[0], 10); m = parseInt(dArray[1], 10) - 1; y = parseInt(dArray[2], 10); break; case \"ymd\": d = parseInt(dArray[2], 10); m = parseInt(dArray[1], 10) - 1; y = parseInt(dArray[0], 10); break; case \"mdy\": default: d = parseInt(dArray[1], 10); m = parseInt(dArray[0], 10) - 1; y = parseInt(dArray[2], 10); break; } dateVal = new Date(y, m, d); } else if (dateString) { dateVal = new Date(dateString); } else { dateVal = new Date(); } } catch (e) { dateVal = new Date(); } return dateVal; } /** Try to split a date string into an array of elements, using common date separators. If the date is split, an array is returned; otherwise, we just return false. */ function splitDateString(dateString) { var dArray; if (dateString.indexOf(\"/\") >= 0) dArray = dateString.split(\"/\"); else if (dateString.indexOf(\".\") >= 0) dArray = dateString.split(\".\"); else if (dateString.indexOf(\"-\") >= 0) dArray = dateString.split(\"-\"); else if (dateString.indexOf(\"\\\\\") >= 0) dArray = dateString.split(\"\\\\\"); else dArray = false; return dArray; } /** Update the field with the given dateFieldName with the dateString that has been passed, and hide the datepicker. If no dateString is passed, just close the datepicker without changing the field value. Also, if the page developer has defined a function called datePickerClosed anywhere on the page or in an imported library, we will attempt to run that function with the updated field as a parameter. This can be used for such things as date validation, setting default values for related fields, etc. For example, you might have a function like this to validate a start date field: function datePickerClosed(dateField) { var dateObj = getFieldDate(dateField.value); var today = new Date(); today = new Date(today.getFullYear(), today.getMonth(), today.getDate()); if (dateField.name == \"StartDate\") { if (dateObj < today) { // if the date is before today, alert the user and display the datepicker again alert(\"Please enter a date that is today or later\"); dateField.value = \"\"; document.getElementById(datePickerDivID).style.visibility = \"visible\"; adjustiFrame(); } else { // if the date is okay, set the EndDate field to 7 days after the StartDate dateObj.setTime(dateObj.getTime() + (7 * 24 * 60 * 60 * 1000)); var endDateField = document.getElementsByName (\"EndDate\").item(0); endDateField.value = getDateString(dateObj); } } } */ function SetDDL(targetField, dateFieldName, dateString) { var StartDate = 2014; var EndDate = 2014; var IsInicial = dateFieldName.indexOf(\"FechaInicial\"); var IsFinal = dateFieldName.indexOf(\"FechaFinal\"); var hfInicial = document.getElementById(\"hfInicial\"); var hfFinal = document.getElementById(\"hfFinal\"); if(IsInicial > -1) { hfInicial.value = dateString; hfInicial.value = getFieldDate(hfInicial.value).getFullYear(); } if(IsFinal > -1) { hfFinal.value = dateString; hfFinal.value = getFieldDate(hfFinal.value).getFullYear(); } if(hfInicial.value != \"\") { StartDate = hfInicial.value; } if(hfFinal.value != \"\") { EndDate = hfFinal.value; } //var dt = getFieldDate(targetField.value); //var year = dt.getFullYear(); //alert(targetField.id); var ddl = document.getElementById(\"ctl00_MainContent_ddlComplementos\"); var passed = true; if(StartDate < 2014 || EndDate < 2014) { passed = false; } if(!passed) { var hfInicialBool = document.getElementById(\"hfInicialBool\"); hfInicialBool.value = \"true\"; if(ddl != null) { ddl.selectedIndex=0; ddl.disabled= true; } } if(passed) { var hfInicialBool = document.getElementById(\"hfInicialBool\"); hfInicialBool.value = \"false\"; if(ddl != null) ddl.disabled= false; } } function updateDateField(dateFieldName, dateString) { var targetDateField = document.getElementsByName(dateFieldName).item(0); if (dateString) { //var Contenedor = $('#'+ dateFieldName); var idDependiente = '#' + $(targetDateField).attr('dependiente'); if (true) { $(idDependiente + '_Calendario_text').val(dateString); //$(idDependiente + '_DdlHora').val(\"23\"); var opHora = $(idDependiente + '_DdlHora').find(\"option[value=23]\"); $(idDependiente + '_DdlHora').selectbox(\"change\", opHora.attr('value'), opHora.html()); //$(idDependiente + '_DdlMinuto').val(\"59\"); var opMinuto = $(idDependiente + '_DdlMinuto').find(\"option[value=59]\"); $(idDependiente + '_DdlMinuto').selectbox(\"change\", opMinuto.attr('value'), opMinuto.html()); //$(idDependiente + '_DdlSegundo').val(\"59\"); var opSegundo = $(idDependiente + '_DdlSegundo').find(\"option[value=59]\"); $(idDependiente + '_DdlSegundo').selectbox(\"change\", opSegundo.attr('value'), opSegundo.html()); } targetDateField.value = dateString; if (this._CustomAction != null) this._CustomAction(dateString); SetDDL(targetDateField, dateFieldName, dateString); } // targetDateField.fireEvent('onchange'); var pickerDiv = document.getElementById(datePickerDivID); if(pickerDiv != null) { pickerDiv.style.visibility = \"hidden\"; pickerDiv.style.display = \"none\"; adjustiFrame(); // after the datepicker has closed, optionally run a user-defined function called // datePickerClosed, passing the field that was just updated as a parameter // (note that this will only run if the user actually selected a date from the datepicker) if ((dateString) && (typeof (datePickerClosed) == \"function\")) datePickerClosed(targetDateField); } } /** Use an \"iFrame shim\" to deal with problems where the datepicker shows up behind selection list elements, if they're below the datepicker. */ function adjustiFrame(pickerDiv, iFrameDiv) { // we know that Opera doesn't like something about this, so if we // think we're using Opera, don't even try var is_opera = (navigator.userAgent.toLowerCase().indexOf(\"opera\") != -1); if (is_opera) return; // put a try/catch block around the whole thing, just in case try { if (!document.getElementById(iFrameDivID)) { // don't use innerHTML to update the body, because it can cause global variables // that are currently pointing to objects on the page to have bad references //document.body.innerHTML += \"<iframe id='\" + iFrameDivID + \"' src='javascript:false;' scrolling='no' frameborder='0'>\"; var newNode = document.createElement(\"iFrame\"); newNode.setAttribute(\"id\", iFrameDivID); // newNode.setAttribute(\"src\", \"javascript:false;\"); newNode.setAttribute(\"scrolling\", \"no\"); newNode.setAttribute(\"frameborder\", \"0\"); document.body.appendChild(newNode); } if (!pickerDiv) pickerDiv = document.getElementById(datePickerDivID); if (!iFrameDiv) iFrameDiv = document.getElementById(iFrameDivID); try { iFrameDiv.style.position = \"absolute\"; iFrameDiv.style.width = pickerDiv.offsetWidth; iFrameDiv.style.height = pickerDiv.offsetHeight; iFrameDiv.style.top = pickerDiv.style.top; iFrameDiv.style.left = pickerDiv.style.left; iFrameDiv.style.zIndex = pickerDiv.style.zIndex - 1; iFrameDiv.style.visibility = pickerDiv.style.visibility; iFrameDiv.style.display = pickerDiv.style.display; } catch (e) { } } catch (ee) { } } /* Function Ends for calendar chk line 379 for doubts*/ /// ////Define la posici√≥n en donde aparecer√° el calendario. function DefinePosicionCalendario(NombreContenedor, NombreEtiqueta, NombreCaja) { var lblFecha = $(NombreEtiqueta); //Instancia de la etiqueta var txtFecha = $(NombreCaja); //Instancia de la caja de texto var TopCalendario = txtFecha.offset().top + txtFecha.height(); //Posici√≥n del calendario var Contenedor = $(NombreContenedor).children(\"#SeleccionFecha\"); Contenedor.children(\"#DivCalendario\").css('left', txtFecha.offset().left).css('top', TopCalendario); } // ////Define las posiciones iniciales de los controles. function DefinePosicionInicial() { var lblFecha = $(\"#ctl00_MainContent_CldFechaFinal2_LblFecha\"); //Instancia de la etiqueta var txtFecha = $(\"#\" + idCajaTexto); //Instancia de la caja de texto var ancho = $(\"#DivTexto\").width() + lblFecha.width(); //Se obtiene el ancho del div principal var LeftBotonFecha = lblFecha.position().left + lblFecha.width() + txtFecha.width(); // Se obtiene la posisici√≥n del bot√≥n var TopDivTexto = parseInt(lblFecha.height() / 2) - parseInt($(\"#DivTexto\").height() / 2); //Se obtiene la posicion vertical de la caja de texto y del bot√≥n var Contenedor = $(\"#ctl00_MainContent_CldFechaFinal2_UpnlSeleccionFecha\").children(\"#SeleccionFecha\"); Contenedor.children(\"#SeleccionFecha\").width(ancho); } function ConfiguraCombosMac() { var isMac = navigator.userAgent.indexOf(\"Macintosh\") if(isMac != -1) $(document.getElementsByClassName(\"calendarCombo\")).css(\"width\", \"45px\"); } $(function() { DefinePosicionInicial(); //Se establece la acci√≥n para mostrar el calendario $(\"#ctl00_MainContent_CldFechaFinal2_BtnFecha2\").live('click', function() { if ($(\"#ctl00_MainContent_CldFechaFinal2_BtnFecha2\").attr('habilitado') == \"true\") { var cajaTexto = $(this).parent().find(\":input\"); displayDatePicker(cajaTexto.attr('id'), false, 'dmy', '/'); } }); });  \r\n\r\n\r\nRFC Receptor \r\n\r\nRFC a cuenta terceros \r\n\r\nEstado del Comprobante \r\n\r\n\r\n\r\n\r\n\r\n\r\nSeleccione un valor... Cancelado Vigente \r\n\r\n\r\n\r\nTipo de Comprobante (Complemento) \r\n\r\nEstatus Cancelaci√≥n \r\n\r\n\r\n\r\n\r\nSeleccione un valor... Est√°ndar Acreditamiento de IEPS Aerol√≠neas Carta Porte Carta Porte 2.0 Certificado de Destrucci√≥n Comercio Exterior Comercio Exterior 1.1 Compra Venta de Divisas Consumo de Combustibles Consumo De Combustibles 1.1 Donatarias Estado De Cuenta Bancario Estado de Cuenta Combustibles 1.2 Estado de cuenta de combustibles de monederos electr√≥nicos. Gastos de Hidrocarburos INE 1.1 Ingresos de Hidrocarburos Instituciones Educativas Privadas (Pago de colegiatura) Leyendas Fiscales Mis Cuentas Notarios P√∫blicos Obras de artes y antig√ºedades Otros Derechos e Impuestos Pago en Especie Persona F√≠sica Integrante de Coordinado Recepcion de Pagos Recepci√≥n de Pagos Recibo de donativo Recibo de Pago de Salarios Recibo de Pago de Salarios 1.2 Sector de Ventas al Detalle (Detallista) Servicios de construcci√≥n SPEI de Tercero a Tercero Sustituci√≥n y renovaci√≥n vehicular Terceros Terceros Timbre Fiscal Digital Turista o Pasajero Extranjero Vales de Despensa Veh√≠culo Usado Venta de Vehiculos \r\n(Criterio de b√∫squeda aplicable a CFDI emitidas a partir del 01/01/2014) \r\n\r\nSeleccione un valor... En Proceso Rechazada  Plazo vencido Sin proceso \r\n\r\n\r\nSeleccione un valor... Cancelado con aceptaci√≥n Cancelado sin aceptaci√≥n Plazo vencido \r\n\r\n\r\n* Campos obligatorios \r\n\r\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  Acciones \r\n\r\nFolio Fiscal \r\n\r\nRFC Emisor \r\n\r\nNombre o Raz√≥n Social del Emisor \r\n\r\nRFC Receptor \r\n\r\nNombre o Raz√≥n Social del Receptor \r\n\r\nFecha de Emisi√≥n \r\n\r\nFecha de Certificaci√≥n \r\n\r\nPAC que Certific√≥ \r\n\r\nTotal \r\n\r\nEfecto del Comprobante \r\n\r\nEstatus de cancelaci√≥n \r\n\r\nEstado del Comprobante \r\n\r\nEstatus de Proceso de Cancelaci√≥n \r\n\r\nFecha de Proceso de Cancelaci√≥n \r\n\r\nRFC a cuenta de terceros \r\n\r\nMotivo \r\n\r\nFolio de Sustituci√≥n \r\n\r\n\r\n\r\n\r\n\r\n\r\n         \r\n\r\n\r\n\r\n\r\n\r\nNo existen registros que cumplan con los criterios de b√∫squeda ingresados, intentar nuevamente.\r\n   \r\n\r\n\r\n\r\n \r\nEspere un momento...\r\n \r\n\r\n\r\n\r\n\r\nAddenda\r\n\r\n\r\n¬°Error! \r\n\r\n\r\n\r\n\r\nArchivo (.xml)*:  Buscar    \r\n \r\n\r\n* Campos obligatorios \r\n\r\n Cancelar Integrar \r\n \r\n\r\n\r\n\r\nConfirmaci√≥n.\r\n\r\n\r\n\r\n¬øDesea descargar el archivo xml?\r\n\r\n\r\nCerrar Guardar \r\n   \r\n\r\n\r\n\r\nRegistro de Motivos de Cancelaci√≥n \r\n\r\n\r\n!!! Atenci√≥n !!! \r\n* Estos campos son obligatorios\r\n\r\n** Estos campos no tienen el formato correcto\r\n\r\n\r\n\r\nPara cada CFDI que desea cancelar debe capturar el motivo de cancelaci√≥n.\r\n\r\n\r\n \r\nCerrar  \r\n \r\n\r\n \r\n\r\n\r\nRFC a cuenta de terceros\r\n\r\n\r\nNo fue posible obtener la informaci√≥n de los RFC a cuenta de terceros \r\n\r\n\r\n\r\n\r\nUUID Consultado :\r\n\r\n\r\n\r\n\r\nRFC Tercero\r\n\r\nNombre Tercero\r\n\r\n\r\n\r\n\r\nCerrar \r\n       /// Variables (Blobs) var validCookieInterval; var validSesionInterval; var downloadCookie = 'DownloadedFile' /** * Funci√≥n que muestra el update progress y crea 2 Intervals uno para validar que la descarga del archivo * se haya realizado y el otro mantiene la sesi√≥n. */ function ShowProgress() { validSesionInterval = setInterval(function () { MantieneSesion(); }, 60000); $get('ctl00_MainContent_UpdateProgress1').style.display = 'block'; validCookieInterval = setInterval(function () { if ($.cookie(downloadCookie) != null && $.cookie(downloadCookie) == \"OK\") { $.cookie(downloadCookie, null); $get('ctl00_MainContent_UpdateProgress1').style.display = \"none\"; clearInterval(validCookieInterval);//delete interval clearInterval(validSesionInterval); } }, 2000); } /** * Funci√≥n valida que al menos este seleccionado un registro. * Se toman los valores de los registros seleccionados (blobUri) y los guarda en un hidden **/ function validarSeleccionDescarga() { document.getElementById('dvAlert').innerHTML = ''; if ($('.ListaFolios').filter(':checked').length == 0) { //alert(\"Favor de seleccionar registro(s)\") var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-info alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Atenci√≥n! <br/></strong> Favor de seleccionar registro(s)\"; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#dvAlert').offset().top }, 'slow'); return false; } else { ShowProgress(); validarDescargaMasiva(); return false; } } function MetadataDescarga() { $('#hdnValAccion').attr('value', 'DescargaMetadata'); //ValidaCaptcha(); // Se habilita cuando este captcha AccionCaptcha(); // Se quita cuando este captcha return false; } function DescargaMetadata() { document.getElementById('dvAlert').innerHTML = ''; ShowProgress(); Metadatos(); return false; } function Metadatos() { var urlValidaDescarga = \"ConsultaEmisor.aspx/DescargaMetadatos\"; var Parametros = document.getElementById('hfParametrosMetadata').value; var data = encodeURIComponent($.base64.encode(Parametros)); $.ajax({ url: urlValidaDescarga, type: \"POST\", dataType: \"json\", contentType: 'application/json; charset=utf-8', data: \"{'Parametros':'\" + data + \"'}\", cache: false, async: true, success: function (respuestaValidacion) { $get('ctl00_MainContent_UpdateProgress1').style.display = \"none\"; document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); if (respuestaValidacion.d.startsWith(\"Error:\")) { newDivSuccess.className = \"alert alert-danger alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Error! <br/></strong>\" + respuestaValidacion.d.replace(\"Error:\", \"\"); } else { newDivSuccess.className = \"alert alert-success alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Descarga realizada con √©xito! <br/></strong>\" + respuestaValidacion.d; } document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#dvAlert').offset().top }, 'slow'); }, error: function (errorDetail) { $get('ctl00_MainContent_UpdateProgress1').style.display = \"none\"; document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-danger alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Error! <br/></strong> Ocurrio un error al procesar su solicitud. Por favor intentelo m√°s tarde\"; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#dvAlert').offset().top }, 'slow'); }, }); } function ValidaCaptcha() { $(\"#ventanaModalCaptcha\").modal(\"show\"); } function AccionCaptcha() { //$(\"#ventanaModalCaptcha\").modal(\"hide\"); // Se habilita cuando este captcha var accion = $(\"#hdnValAccion\").val(); if (accion.split('¬¨')[0] == \"DescargaMasiva\") { validarDescargaMasiva(); } else if (accion.split('¬¨')[0] == \"DescargaMetadata\") { DescargaMetadata(); } else { var uriblob1 = accion.split('¬¨')[1]; validarDescargaUnitaria(uriblob1); } } function testvalidarDescargaMasiva() { var datos = \"api/ValidaDescarga/\" + $('.ListaFolios').filter(':checked').length; PageMethods.RecuperaRepresentacionImpresa(datos, onDescargaMasivaSucceed, onDescargaMasivaFailed); } function onDescargaMasivaSucceed(result, userContext, methodName) { document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-success alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Descarga realizada con √©xito! <br/></strong>\" + result; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#dvAlert').offset().top }, 'slow'); } function onDescargaMasivaFailed(result, userContext, methodName) { document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-danger alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Descarga realizada con √©xito! <br/></strong>\" + result; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#dvAlert').offset().top }, 'slow'); //alert(result); } function validarDescargaMasiva() { var urlValidaDescarga = \"ConsultaEmisor.aspx/ValidarDescarga\"; $.ajax({ url: urlValidaDescarga, type: \"POST\", dataType: \"json\", contentType: 'application/json; charset=utf-8', data: \"{ id: \" + $('.ListaFolios').filter(':checked').length + \" }\", cache: false, async: true, success: function (respuestaValidacion) { if (respuestaValidacion.d) { respuestaValidacion = respuestaValidacion.d; } if (respuestaValidacion.Codigo == 0) { var folioUriDescaga = []; var descargaMasivaUrisModel = {}; var indiceFolio = 0; $(\"input.ListaFolios:checked\").each(function () { var folioDescarga = $(this).val(); var uriDescarga = $(this).parent().find(\"#ListaFoliosUrl\").val(); folioUriDescaga[indiceFolio] = { Folio: folioDescarga, Uri: uriDescarga }; indiceFolio = indiceFolio + 1; }); descargaMasivaUrisModel.FolioUriList = folioUriDescaga; var data = encodeURIComponent($.base64.encode(JSON.stringify(descargaMasivaUrisModel))); $.ajax({ url: \"ConsultaEmisor.aspx/Descargar\", type: \"POST\", dataType: \"json\", contentType: 'application/json; charset=utf-8', cache: false, async: true, data: \"{'param':'\" + data + \"'}\", success: function (respuestaDescarga) { $get('ctl00_MainContent_UpdateProgress1').style.display = \"none\"; document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); if (respuestaDescarga.d.startsWith(\"Error:\")) { newDivSuccess.className = \"alert alert-danger alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Ocurri√≥ un Error en la Descarga! <br/></strong>\" + respuestaDescarga.d.replace(\"Error:\", \"\"); } else { newDivSuccess.className = \"alert alert-success alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Descarga realizada con √©xito! <br/></strong>\" + respuestaDescarga.d; } document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#dvAlert').offset().top }, 'slow'); //alert(respuestaDescarga.d); }, error: function (xhr, ajaxOptions, thrownError) { //alert('Ocurrio un error al registrar la descarga :'); //alert(xhr.responseText); $get('ctl00_MainContent_UpdateProgress1').style.display = \"none\"; document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-danger alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Ocurri√≥ un Error en la Descarga! <br/></strong>\" + xhr.responseText; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#dvAlert').offset().top }, 'slow'); } }); } else { $get('ctl00_MainContent_UpdateProgress1').style.display = \"none\"; //alert(respuestaValidacion.Mensaje); document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-warning alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Precauci√≥n! <br/></strong>\" + respuestaValidacion.Mensaje; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#dvAlert').offset().top }, 'slow'); } }, error: function (errorDetail) { document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-danger alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Error! <br/></strong> Ocurrio un error al procesar su solicitud. Por favor intentelo m√°s tarde\"; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#dvAlert').offset().top }, 'slow'); }, }); } function validarDescargaUnitaria(blobUri) { var urlValidaDescargaUnitaria = \"ConsultaEmisor.aspx/ValidarDescarga\"; var dataParam = 1; $.ajax({ url: urlValidaDescargaUnitaria, type: \"POST\", dataType: \"json\", contentType: 'application/json; charset=utf-8', data: \"{ id:1 }\", cache: false, async: true, success: function (respuestaValidacion) { if (respuestaValidacion.d) { respuestaValidacion = respuestaValidacion.d; } if (respuestaValidacion.Codigo == 0) { var opcionesUnitaria = \"width=5,height=5,scrollbars=yes,menubar=no,status=no,directories=no,location=no,toolbar=no,resizable=yes,titlebar=no\"; window.open(blobUri, \"RecuperacionCFDI\", opcionesUnitaria); } else { $get('ctl00_MainContent_UpdateProgress1').style.display = \"none\"; document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-warning alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Atenci√≥n! <br/></strong> \" + respuestaValidacion.Mensaje; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#dvAlert').offset().top }, 'slow'); //alert(respuestaValidacion.Mensaje); } } }); } //Se agrega manejador de evento para cuando se termine la llamda del UpdatePanel Sys.WebForms.PageRequestManager.getInstance().add_endRequest(endQueryRequest); //function _doPostBack(eventTarget, eventArgument) { // document.forms[0]._EVENTTARGET.value = eventTarget; // document.forms[0]._EVENTARGUMENT.value = eventArgument; // document.forms[0].submit(); //} //Funcic√≥n que Forza la correcci√≥n del renderizado de tablas en IE9 function endQueryRequest(sender, e) { var hfInicialBool = document.getElementById(\"hfInicialBool\"); if (hfInicialBool.value == \"true\") { var ddl = document.getElementById(\"ddlComplementos\"); ddl.selectedIndex = 0; ddl.disabled = true; } if (hfInicialBool.value == \"false\") { var ddl = document.getElementById(\"ddlComplementos\"); ddl.disabled = false; } CorregirTablaResultados(document.getElementById(\"ctl00_MainContent_PnlResultados\")); } var rfcetiqueta; var rfcvalido; $(document).ready(function () { var hfFlag = document.getElementById('hfFlag'); var hfData = document.getElementById('hfDatos'); var hfDescarga = document.getElementById('hfDescarga'); var hfCancelacion = document.getElementById('hfCancelacion'); if (hfFlag.value == \"true\" && hfData.value != null && hfData.value != \"\") { SetValue(); } if (hfFlag.value == \"false\" && hfData.value != null && hfData.value != \"\") { SetValueSinPatron(); } if (hfCancelacion.value == \"NoElementosSeleccionados\") { document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-warning alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Atenci√≥n! <br/></strong> No ha seleccionado folios, seleccione elementos para cancelar.\"; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#ctl00_MainContent_TxtRfcReceptor').offset().top }, 'slow'); //alert('El o los comprobantes ya se encuentran cancelados'); } if (hfCancelacion.value == \"CancelacionesEnProceso\") { document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-warning alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Atenci√≥n! <br/></strong> Uno o m√°s de los elementos seleccionados ya cuenta con un proceso de cancelaci√≥n.\"; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#ctl00_MainContent_TxtRfcReceptor').offset().top }, 'slow'); //alert('El o los comprobantes ya se encuentran cancelados'); } if (hfCancelacion.value == \"ExistenCancelados\") { document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-warning alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Atenci√≥n! <br/></strong> Uno o m√°s de los elementos seleccionados han sido cancelados con anterioridad.\"; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#ctl00_MainContent_TxtRfcReceptor').offset().top }, 'slow'); //alert('El o los comprobantes ya se encuentran cancelados'); } if (hfCancelacion.value == \"ExisteRelacionado\") { document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-warning alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Atenci√≥n! <br/></strong> Ha seleccionado un elemento que tiene relaci√≥n por lo que no puede ser cancelado sin un folio relacionado.\"; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#dvAlert').offset().top }, 'slow'); } if (hfFlag.value == \"false\" && hfData.value == \"\" && hfCancelacion.value == \"\") { document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-warning alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Atenci√≥n! <br/></strong> No se puede realizar la solicitud de cancelaci√≥n ya que uno de los comprobantes no es simplificado.\"; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#dvAlert').offset().top }, 'slow'); } if (hfDescarga.value == \"CuotaParcial\") { document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-warning alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Atenci√≥n! <br/></strong> Est√°s intentando descargas m√°s documentos de los permitidos.\"; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#dvAlert').offset().top }, 'slow'); //alert(\"Est√°s intentando descargas m√°s documentos de los permitidos.\"); } if (hfDescarga.value == \"CuotaCompleta\") { document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-warning alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Atenci√≥n! <br/></strong> Ya no puedes descargar m√°s documentos, espera hasta ma√±ana.\"; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#dvAlert').offset().top }, 'slow'); //alert(\"Ya no puedes descargar m√°s documentos, espera hasta ma√±ana.\"); } if (hfDescarga.value == \"CuotaLibre\") { var opciones = \"width=100,height=50,scrollbars=yes,menubar=no,status=no,directories=no,location=no,toolbar=no,resizable=yes,titlebar=no\"; } $('#ctl00_MainContent_BtnBusqueda').live('click', function () { $(\"#ctl00_MainContent_PnlErrores\").empty(); $(\"#ctl00_MainContent_PnlErrores\").css('display', 'none'); var fechaInicial = $('#ctl00_MainContent_CldFechaInicial2_Calendario_text').val(); var horaInicial = $('#ctl00_MainContent_CldFechaInicial2_DdlHora').val(); var minutoInicial = $('#ctl00_MainContent_CldFechaInicial2_DdlMinuto').val(); var segundoInicial = $('#ctl00_MainContent_CldFechaInicial2_DdlSegundo').val(); var fechaSplitInicial = splitTextoFecha(fechaInicial, '/'); var fechaFinal = $('#ctl00_MainContent_CldFechaFinal2_Calendario_text').val(); var horaFinal = $('#ctl00_MainContent_CldFechaFinal2_DdlHora').val(); var minutoFinal = $('#ctl00_MainContent_CldFechaFinal2_DdlMinuto').val(); var segundoFinal = $('#ctl00_MainContent_CldFechaFinal2_DdlSegundo').val(); var fechaSplitFinal = splitTextoFecha(fechaFinal, '/'); //Se resta uno al valor del mes porque en JavaScript los meses numericamente se representan del 0 - 11 var dateInicial = new Date(fechaSplitInicial[2], parseEntero(fechaSplitInicial[1]) - 1, fechaSplitInicial[0], horaInicial, minutoInicial, segundoInicial, 0); var dateFinal = new Date(fechaSplitFinal[2], parseEntero(fechaSplitFinal[1]) - 1, fechaSplitFinal[0], horaFinal, minutoFinal, segundoFinal, 0); //Se verifica que la fehca final no sea menor a la incial if (dateFinal < dateInicial) { $(\"#ctl00_MainContent_PnlErrores\").append('<ul><li>La fecha inicial no puede ser posterior a la fecha final</li></ul>'); $(\"#ctl00_MainContent_PnlErrores\").css('display', 'inline'); return false; } //Se agrega un a√±o a la fecha incial y esa sera la fecha m√°xima a elegir var maxDate = new Date(dateInicial.getFullYear() + 1, dateInicial.getMonth(), dateInicial.getDate(), dateInicial.getHours(), dateInicial.getMinutes(), dateInicial.getSeconds()); //Se verifica si el mes es diferente, para actual ante la logica de suma del 29 de Febrero, que da como resultado 1 de Marzo if (maxDate.getMonth() != dateInicial.getMonth()) maxDate.setDate(maxDate.getDate() - 1); //Se compara que la fecha final no sea mayor a la fecha m√°xima if (dateFinal > maxDate) { $(\"#ctl00_MainContent_PnlErrores\").append('<ul><li>La consulta esta limitada a rangos de fechas de m√°ximo 12 meses.</li></ul>'); $(\"#ctl00_MainContent_PnlErrores\").css('display', 'inline'); return false; } }); $(\"#ctl00_MainContent_RdoFolioFiscal\").live('click', function () { //$(\"#datepicker\").css('visibility', 'hidden'); //$(\"#datepicker\").css('display', 'none'); //$(\"#datepickeriframe\").css('visibility', 'hidden'); //$(\"#datepickeriframe\").css('display', 'none'); validaRfcAutenticado(); }); $(\"#ctl00_MainContent_BtnBusqueda\").live('mouseover', function (event) { validaRfcAutenticado(); }); $(\"#ctl00_MainContent_BtnCancelar\").live('mouseover', function (event) { validaRfcAutenticado(); }); $(\"#BtnImprimirVisible\").live('click', function (event) { validaRfcAutenticado(); }); $(\"#ctl00_MainContent_BtnImprimir\").live('mouseover', function (event) { validaRfcAutenticado(); }); $(\"#ctl00_MainContent_BtnDescargar\").live('mouseover', function (event) { validaRfcAutenticado(); }); $(\"#ctl00_MainContent_BtnMetadata\").live('mouseover', function (event) { validaRfcAutenticado(); }); $(\"#ctl00_MainContent_RdoFechas\").live('click', function () { validaRfcAutenticado(); }); }); function AccionCfdi(blobUri, argumento) { //if (rfcvalido) { MantieneSesion(); var event = window.event; var opciones = \"\"; if (argumento == \"Detalle\") { opciones = \"width=5,height=5,scrollbars=yes,menubar=no,status=no,directories=no,location=no,toolbar=no,resizable=yes,titlebar=no\"; window.open(blobUri, \"DetalleCfdi\", opciones); } else if (argumento == \"Recuperacion\") { validarDescargaUnitaria(blobUri); } else if (argumento == \"Acuse\") { opciones = \"width=5,height=5,scrollbars=yes,menubar=no,status=no,directories=no,location=no,toolbar=no,resizable=yes,titlebar=no\"; window.open(blobUri, \"AcuseCancelacion\", opciones); } else if (argumento == \"Addenda\") { $('#modalExito').modal('show'); $('#errorFirmadoSL').hide(); $('#hfXML')[0].value = blobUri; } if (event.stopstopPropagation) { event.stopPropagation(); } else { event.cancelBubble = true; } //} } function consultaCuentaTerceros(parametros) { var urlConsultaCuentaTerceros = \"ConsultaEmisor.aspx/ConsultaCuentaTerceros\"; var Parametros = parametros; var data = encodeURIComponent($.base64.encode(Parametros)); $(\"#divResultadosTerceros\").hide(); $(\"#datosTerceros\").html(\"\"); $('#divErrorTerceros').hide(); $.ajax({ url: urlConsultaCuentaTerceros, type: \"POST\", dataType: \"json\", contentType: 'application/json; charset=utf-8', data: \"{'Parametros':'\" + data + \"'}\", cache: false, async: true, success: function (respuestaStr) { respuesta = JSON.parse(respuestaStr.d); if (respuesta.Estatus == 1) { listaTerceros = respuesta.ListCuentaTerceros; var contendTable = \"\"; for (var indice = 0; indice < listaTerceros.length; indice++) { contendTable = contendTable + \"<tr>\"; contendTable = contendTable + '<td>' + listaTerceros[indice].RfcACuentaTerceros + '</td>'; contendTable = contendTable + '<td>' + listaTerceros[indice].NombreACuentaTerceros + '</td>'; contendTable = contendTable + \"</tr>\"; } var params = parametros.split(\"|\"); $(\"#uuidConsultado\").text(params[0]); $(\"#datosTerceros\").html(contendTable); $(\"#divResultadosTerceros\").show(); $('#modalCuentaTerceros').modal('show'); } else { $('#modalCuentaTerceros').modal('show'); $('#divErrorTerceros').show(); $(\"#divResultadosTerceros\").hide(); } }, error: function (errorDetail) { alert(\"Error en la consulta de terceros\"); }, }); } ////Funci√≥n que maneja la seleccion y deseleccion multiple global para cancelaci√≥n function manejaseleccion() { var s = document.getElementById(\"seleccionador\"); var estado = s.checked; $('.ListaFolios').each(function (i, obj) { obj.checked = estado; }); } //Crea y retorna el html para los select de cancelacion de folios function crearSelectMotivoCancelacion(folio) { //var valores_catalogo_motivos_cancelacion = //Los valores de estos arreglos son llenados en el page_load desde el servicio de catalgos; //var textos_catalogo_motivos_cancelacion = //Los valores de estos arreglos son llenados en el page_load desde el servicio de catalgos; var select = document.createElement(\"select\"); select.name = \"ddl\" + folio; select.id = \"ddl\" + folio; for (let i = 0; i <= valores_catalogo_motivos_cancelacion.length - 1; i++) { var option = document.createElement(\"option\"); option.value = valores_catalogo_motivos_cancelacion[i]; option.text = textos_catalogo_motivos_cancelacion[i]; select.appendChild(option); } return select.outerHTML; } //Crea y retorna el html para el input del folio realcionado function CrearInputFolioRelacionado(folio) { var input = document.createElement(\"input\"); input.name = \"input\" + folio; input.id = \"input\" + folio; return input.outerHTML; } //Genera eventos onchange a los combos que se creraron dinamicamente para la cancelacion function AgregaEventoACombosDinamicos() { $(\"input.ListaFolios:checked\").each(function () { document.getElementById('ddl' + $(this).val()).addEventListener('change', function () { //console.log('You selected: ' + this.value + '-' + $(this).val() + this.id.replace('ddl', '')); //console.log(this.value === \"01\"); if (this.value === \"01\") { $(\"#input\" + this.id.replace('ddl', '')).show(); } else { $(\"#input\" + this.id.replace('ddl', '')).val(''); $(\"#input\" + this.id.replace('ddl', '')).hide(); } }); $(\"#input\" + $(this).val()).attr('style','text-transform: uppercase;'); $(\"#input\" + $(this).val()).mask(\"hhhhhhhh-hhhh-hhhh-hhhh-hhhhhhhhhhhh\"); $(\"#input\" + $(this).val()).hide(); }); } function validaMotivosCancelacion() { var expected = true; var errorFormato = false; $(\".error\").remove(); $(\"input.ListaFolios:checked\").each(function () { console.log(\"validando \" + $(this).val() + \": valor seleccionado :\" + $(\"#ddl\" + $(this).val()).val() + \", valor input :\" + $(\"#input\" + $(this).val()).val()); if ($(\"#input\" + $(this).val()).val().indexOf('_') != -1) { console.log(\"debe ingrar un UUID Valido\"); } if ($(\"#ddl\" + $(this).val()).val() === \"00\") { $(\"#ddl\" + $(this).val()).before('<span class=\"error\">*</span>'); expected = false; } //if ($(\"#ddl\" + $(this).val()).val() === \"01\" && $(\"#input\" + $(this).val()).val().replace('_', '').replace('-', '') === \"\") { // $(\"#input\" + $(this).val()).before('<span class=\"error\">*</span>'); // expected = false; //} //if ($(\"#ddl\" + $(this).val()).val() === \"01\" && $(\"#input\" + $(this).val()).val().indexOf('_') != -1) { // $(\"#input\" + $(this).val()).before('<span class=\"error\">**</span>'); // expected = false; // errorFormato = true; //} }); $(\"#errorFirmadoSL_cancelacion\").css(\"display\", ((expected) ? \"none\" : \"block\")); $(\"#errorCliente_cancelacion_formatoUUID\").css(\"display\", ((!errorFormato) ? \"none\" : \"block\")); return expected; } function creaPropiedadJSON(nombre, valor) { var expected = \"\\\"\" + nombre + \"\\\":\" + \"\\\"\" + valor + \"\\\"\"; return expected; } function PrepararJSONCancelacion() { var valido = validaMotivosCancelacion(); if (valido) { console.log('preparando JSON'); var JSONCancelacion = \"[\"; $(\"input.ListaFolios:checked\").each(function () { JSONCancelacion += \"{\" JSONCancelacion += creaPropiedadJSON(\"UUID\", $(this).val()) + \",\"; JSONCancelacion += creaPropiedadJSON(\"Motivo\", $(\"#ddl\" + $(this).val()).val()) + \",\"; JSONCancelacion += creaPropiedadJSON(\"FolioSustitucion\", $(\"#input\" + $(this).val()).val().replace(\"________-____-____-____-____________\",\"\")); JSONCancelacion += \"},\" }); JSONCancelacion += \"]\"; $(\"#hfJSONCancelacion\").val(JSONCancelacion); console.log('JSON preparado ' + $(\"#hfJSONCancelacion\").val()); } return valido; } ////Funci√≥n para mostrar el modal de captura de motivos de cancelaci√≥n function CancelarSeleccionCliente() { $('#dvMotivosCancelacion').empty(); var htmlHeader = \"<tr><th>Folio Fiscal</th><th>Motivo Cancelaci√≥n</th><th>Folio Relacionado</th></tr>\" var htmlTable = \"<table>\" + htmlHeader; $(\"input.ListaFolios:checked\").each(function () { htmlTable += \"<tr >\" ; htmlTable += \"<td ><small><b>\" + $(this).val() + \"</b></small></td>\"; htmlTable += \"<td ><small>\" + crearSelectMotivoCancelacion($(this).val()) + \"</small></td>\"; htmlTable += \"<td ><small>\" + CrearInputFolioRelacionado($(this).val()) + \"</small></td>\"; htmlTable += \"</tr>\" }); htmlTable += \"</table>\"; var tableMotivosCancelacion = document.createElement('div'); tableMotivosCancelacion.innerHTML = htmlTable; document.getElementById('dvMotivosCancelacion').appendChild(tableMotivosCancelacion); AgregaEventoACombosDinamicos(); $('#modalCancelacion').modal('show'); return false; } ////Funci√≥n que maneja la seleccion y deseleccion multiple por elemento para cancelaci√≥n function validaseleccion() { var estado = true; $('.ListaFolios').each(function (i, obj) { if (!(obj.checked)) estado = false; }); var s = document.getElementById(\"seleccionador\"); s.checked = estado; } ////Funci√≥n que oculta los panelers de resultados function ocultaResultados() { $(\"#ctl00_MainContent_PnlResultados\").css('display', 'none'); $(\"#ctl00_MainContent_PnlNoResultados\").css('display', 'none'); } ////Funci√≥n que invoca al metodo de recuperaci√≥n de acuse. function recuperaAcuse(datos) { MantieneSesion(); PageMethods.RecuperaAcuse(datos, onRecuperaAcuseSucceed, onRecuperaAcuseFailed); } function validarCaracteres() { supressUpdatePanelRequestErrorCharacters(\"#ctl00_MainContent_TxtRfcReceptor\"); } function recuperaRepresentacionImpresa(datos) { PageMethods.RecuperaRepresentacionImpresa(datos, onRecuperaRISucceed, onRecuperaRIFailed); } function onRecuperaRISucceed(result, userContext, methodName) { opciones = \"width=5,height=5,scrollbars=no,menubar=no,status=no,directories=no,location=no,toolbar=no,resizable=no,titlebar=no\"; window.open(result, \"RecuperacionRepresentacionImpresa\", opciones); } function onRecuperaRIFailed(result, userContext, methodName) { document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-warning alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Atenci√≥n! <br/></strong> No se ha podido recuperar la representaci√≥n Impresa, por favor intentelo m√°s tarde.\"; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#dvAlert').offset().top }, 'slow'); //alert(\"No se ha podido recuperar la representaci√≥n Impresa, por favor intentelo m√°s tarde.\"); } function onRecuperaAcuseSucceed(result, userContext, methodName) { opciones = \"width=5,height=5,scrollbars=yes,menubar=no,status=no,directories=no,location=no,toolbar=no,resizable=yes,titlebar=no\"; window.open(result, \"RecuperacionAcuseCancelacion\", opciones); } function onRecuperaAcuseFailed(result, userContext, methodName) { document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-warning alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Atenci√≥n! <br/></strong> No se ha podido recuperar el acuse de cancelaci√≥n, por favor intentelo m√°s tarde.\"; document.getElementById('dvAlert').appendChild(newDivSuccess); //alert(\"No se ha podido recuperar el acuse de cancelaci√≥n, por favor intentelo m√°s tarde.\"); } function SetValue() { if (confirm(\"¬øSeguro desea cancelar la seleccion?\")) { document.getElementById('setLinkButton').click(); //$(\"#hiddenFlagCancelacion\").val = \"true\"; //document.forms[\"fulanito\"].action=\"CancelaBeta\" // .submit(); } else { //alert('NO'); } } function SetValueSinPatron() { document.getElementById('setLinkButton').click(); } function Pager(tableName, itemsPerPage) { this.tableName = tableName; this.itemsPerPage = itemsPerPage; this.currentPage = 1; this.pages = 0; this.inited = false; this.showRecords = function (from, to) { var rows = document.getElementById(tableName).rows; // i starts from 1 to skip table header row for (var i = 1; i < rows.length; i++) { if (i < from || i > to) rows[i].style.display = 'none'; else rows[i].style.display = ''; } } this.showPage = function (pageNumber) { if (!this.inited) { alert(\"not inited\"); return; } var oldPageAnchor = document.getElementById('pg' + this.currentPage); oldPageAnchor.className = 'pg-normal'; this.currentPage = pageNumber; var newPageAnchor = document.getElementById('pg' + this.currentPage); newPageAnchor.className = 'pg-selected'; var from = (pageNumber - 1) * itemsPerPage + 1; var to = from + itemsPerPage - 1; this.showRecords(from, to); } this.prev = function () { if (this.currentPage > 1) this.showPage(this.currentPage - 1); } this.next = function () { if (this.currentPage < this.pages) { this.showPage(this.currentPage + 1); } } this.init = function () { var rows = document.getElementById(tableName).rows; var records = (rows.length - 1); this.pages = Math.ceil(records / itemsPerPage); this.inited = true; } this.showPageNav = function (pagerName, positionId) { if (!this.inited) { alert(\"not inited\"); return; } var element = document.getElementById(positionId); var pagerHtml = '<ul class=\"pagination\">'; pagerHtml += '<li onclick=\"' + pagerName + '.prev();\"><a>&laquo;</a></li>'; for (var page = 1; page <= this.pages; page++) pagerHtml += '<li id=\"pg' + page + '\" class=\"pg-normal\" onclick=\"' + pagerName + '.showPage(' + page + ');\"><a>' + page + '</a></li>'; pagerHtml += '<li onclick=\"' + pagerName + '.next();\"><a>&raquo;</a></li>'; element.innerHTML = pagerHtml; } }  \r\n\r\n\r\n//<![CDATA[ var Page_ValidationSummaries = new Array(document.getElementById(\"ctl00_MainContent_ValidationSummary1\")); var Page_Validators = new Array(document.getElementById(\"ctl00_MainContent_CldFechaInicial2_RvFecha\"), document.getElementById(\"ctl00_MainContent_CldFechaFinal2_RvFecha\")); //]]>  //<![CDATA[ var ctl00_MainContent_CldFechaInicial2_RvFecha = document.all ? document.all[\"ctl00_MainContent_CldFechaInicial2_RvFecha\"] : document.getElementById(\"ctl00_MainContent_CldFechaInicial2_RvFecha\"); ctl00_MainContent_CldFechaInicial2_RvFecha.controltovalidate = \"ctl00_MainContent_CldFechaInicial2_Calendario_text\"; ctl00_MainContent_CldFechaInicial2_RvFecha.errormessage = \"ERROR: Favor de proporcionar la fecha inicial de emisi√≥n\"; ctl00_MainContent_CldFechaInicial2_RvFecha.display = \"None\"; ctl00_MainContent_CldFechaInicial2_RvFecha.validationGroup = \"Fechas\"; ctl00_MainContent_CldFechaInicial2_RvFecha.evaluationfunction = \"RequiredFieldValidatorEvaluateIsValid\"; ctl00_MainContent_CldFechaInicial2_RvFecha.initialvalue = \"\"; var ctl00_MainContent_CldFechaFinal2_RvFecha = document.all ? document.all[\"ctl00_MainContent_CldFechaFinal2_RvFecha\"] : document.getElementById(\"ctl00_MainContent_CldFechaFinal2_RvFecha\"); ctl00_MainContent_CldFechaFinal2_RvFecha.controltovalidate = \"ctl00_MainContent_CldFechaFinal2_Calendario_text\"; ctl00_MainContent_CldFechaFinal2_RvFecha.errormessage = \"ERROR: Favor de proporcionar la fecha final de emisi√≥n\"; ctl00_MainContent_CldFechaFinal2_RvFecha.display = \"None\"; ctl00_MainContent_CldFechaFinal2_RvFecha.validationGroup = \"Fechas\"; ctl00_MainContent_CldFechaFinal2_RvFecha.evaluationfunction = \"RequiredFieldValidatorEvaluateIsValid\"; ctl00_MainContent_CldFechaFinal2_RvFecha.initialvalue = \"\"; var ctl00_MainContent_ValidationSummary1 = document.all ? document.all[\"ctl00_MainContent_ValidationSummary1\"] : document.getElementById(\"ctl00_MainContent_ValidationSummary1\"); ctl00_MainContent_ValidationSummary1.validationGroup = \"FolioFiscal\"; //]]>  //<![CDATA[ $(\"#ctl00_MainContent_TxtUUID\").mask(\"hhhhhhhh-hhhh-hhhh-hhhh-hhhhhhhhhhhh\");validarCaracteres();var valores_catalogo_motivos_cancelacion = [\"00\",\"01\",\"02\",\"03\",\"04\"]; var textos_catalogo_motivos_cancelacion = [\"-- Seleccione una opci√≥n--\", \"01-Comprobante emitido con errores con relaci√≥n\",\"02-Comprobante emitido con errores sin relaci√≥n\",\"03-No se llev√≥ a cabo la operaci√≥n\",\"04-Operaci√≥n nominativa relacionada en una factura global\" ]; DefinePosicionInicial();updateDateField(ctl00_MainContent_CldFechaInicial2_SeleccionFecha); EstadoComprobante('-1'); EstadoComprobante('-1'); ConfiguraCombosMac(); var Page_ValidationActive = false; if (typeof(ValidatorOnLoad) == \"function\") { ValidatorOnLoad(); } function ValidatorOnSubmit() { if (Page_ValidationActive) { return ValidatorCommonOnSubmit(); } else { return true; } } (function(id) { var e = document.getElementById(id); if (e) { e.dispose = function() { Array.remove(Page_ValidationSummaries, document.getElementById(id)); } e = null; } })('ctl00_MainContent_ValidationSummary1'); document.getElementById('ctl00_MainContent_CldFechaInicial2_RvFecha').dispose = function() { Array.remove(Page_Validators, document.getElementById('ctl00_MainContent_CldFechaInicial2_RvFecha')); } document.getElementById('ctl00_MainContent_CldFechaFinal2_RvFecha').dispose = function() { Array.remove(Page_Validators, document.getElementById('ctl00_MainContent_CldFechaFinal2_RvFecha')); } Sys.Application.add_init(function() { $create(Sys.UI._UpdateProgress, {\"associatedUpdatePanelId\":null,\"displayAfter\":500,\"dynamicLayout\":true}, null, null, $get(\"ctl00_MainContent_UpdateProgress1\")); }); //]]>","use":true},{"name":"AutomationId","variant":0,"value":"aspnetForm","use":false},{"name":"AcceleratorKey","variant":0,"value":"","use":false},{"name":"AccessKey","variant":0,"value":"","use":false},{"name":"FrameworkId","variant":0,"value":"InternetExplorer","use":false},{"name":"HasKeyboardFocus","variant":0,"value":"False","use":false},{"name":"HelpText","variant":0,"value":"","use":false},{"name":"IsContentElement","variant":0,"value":"True","use":false},{"name":"IsControlElement","variant":0,"value":"True","use":false},{"name":"IsEnabled","variant":0,"value":"True","use":false},{"name":"IsKeyboardFocusable","variant":0,"value":"False","use":false},{"name":"IsOffscreen","variant":0,"value":"False","use":false},{"name":"IsPassword","variant":0,"value":"False","use":false},{"name":"IsRequiredForForm","variant":0,"value":"False","use":false},{"name":"ItemType","variant":0,"value":"","use":false},{"name":"ProcessId","variant":0,"value":"15208","use":false}],"items":null,"automationType":"ui","app_title":"//<![CDATA[ var theForm = document.forms['aspnetForm']; if (!theForm) { theForm = document.aspnetForm; } function __doPostBack(eventTarget, eventArgument) { if (!theForm.onsubmit || (theForm.onsubmit() != false)) { theForm.__EVENTTARGET.value = eventTarget; theForm.__EVENTARGUMENT.value = eventArgument; theForm.submit(); } } //]]>      //<![CDATA[ var PageMethods = function() { PageMethods.initializeBase(this); this._timeout = 0; this._userContext = null; this._succeeded = null; this._failed = null; } PageMethods.prototype = { _get_path:function() { var p = this.get_path(); if (p) return p; else return PageMethods._staticInstance.get_path();}, RecuperaAcuse:function(datos,succeededCallback, failedCallback, userContext) { return this._invoke(this._get_path(), 'RecuperaAcuse',false,{datos:datos},succeededCallback,failedCallback,userContext); }, RecuperaRepresentacionImpresa:function(datos,succeededCallback, failedCallback, userContext) { return this._invoke(this._get_path(), 'RecuperaRepresentacionImpresa',false,{datos:datos},succeededCallback,failedCallback,userContext); }, ValidarDescarga:function(id,succeededCallback, failedCallback, userContext) { return this._invoke(this._get_path(), 'ValidarDescarga',false,{id:id},succeededCallback,failedCallback,userContext); }, Descargar:function(param,succeededCallback, failedCallback, userContext) { return this._invoke(this._get_path(), 'Descargar',false,{param:param},succeededCallback,failedCallback,userContext); }, DescargaMetadatos:function(Parametros,succeededCallback, failedCallback, userContext) { return this._invoke(this._get_path(), 'DescargaMetadatos',false,{Parametros:Parametros},succeededCallback,failedCallback,userContext); }, ConsultaCuentaTerceros:function(Parametros,succeededCallback, failedCallback, userContext) { return this._invoke(this._get_path(), 'ConsultaCuentaTerceros',false,{Parametros:Parametros},succeededCallback,failedCallback,userContext); }, ObtieneUsuario:function(succeededCallback, failedCallback, userContext) { return this._invoke(this._get_path(), 'ObtieneUsuario',false,{},succeededCallback,failedCallback,userContext); }} PageMethods.registerClass('PageMethods',Sys.Net.WebServiceProxy); PageMethods._staticInstance = new PageMethods(); PageMethods.set_path = function(value) { PageMethods._staticInstance.set_path(value); } PageMethods.get_path = function() { return PageMethods._staticInstance.get_path(); } PageMethods.set_timeout = function(value) { PageMethods._staticInstance.set_timeout(value); } PageMethods.get_timeout = function() { return PageMethods._staticInstance.get_timeout(); } PageMethods.set_defaultUserContext = function(value) { PageMethods._staticInstance.set_defaultUserContext(value); } PageMethods.get_defaultUserContext = function() { return PageMethods._staticInstance.get_defaultUserContext(); } PageMethods.set_defaultSucceededCallback = function(value) { PageMethods._staticInstance.set_defaultSucceededCallback(value); } PageMethods.get_defaultSucceededCallback = function() { return PageMethods._staticInstance.get_defaultSucceededCallback(); } PageMethods.set_defaultFailedCallback = function(value) { PageMethods._staticInstance.set_defaultFailedCallback(value); } PageMethods.get_defaultFailedCallback = function() { return PageMethods._staticInstance.get_defaultFailedCallback(); } PageMethods.set_enableJsonp = function(value) { PageMethods._staticInstance.set_enableJsonp(value); } PageMethods.get_enableJsonp = function() { return PageMethods._staticInstance.get_enableJsonp(); } PageMethods.set_jsonpCallbackParameter = function(value) { PageMethods._staticInstance.set_jsonpCallbackParameter(value); } PageMethods.get_jsonpCallbackParameter = function() { return PageMethods._staticInstance.get_jsonpCallbackParameter(); } PageMethods.set_path(\"ConsultaEmisor.aspx\"); PageMethods.RecuperaAcuse= function(datos,onSuccess,onFailed,userContext) {PageMethods._staticInstance.RecuperaAcuse(datos,onSuccess,onFailed,userContext); } PageMethods.RecuperaRepresentacionImpresa= function(datos,onSuccess,onFailed,userContext) {PageMethods._staticInstance.RecuperaRepresentacionImpresa(datos,onSuccess,onFailed,userContext); } PageMethods.ValidarDescarga= function(id,onSuccess,onFailed,userContext) {PageMethods._staticInstance.ValidarDescarga(id,onSuccess,onFailed,userContext); } PageMethods.Descargar= function(param,onSuccess,onFailed,userContext) {PageMethods._staticInstance.Descargar(param,onSuccess,onFailed,userContext); } PageMethods.DescargaMetadatos= function(Parametros,onSuccess,onFailed,userContext) {PageMethods._staticInstance.DescargaMetadatos(Parametros,onSuccess,onFailed,userContext); } PageMethods.ConsultaCuentaTerceros= function(Parametros,onSuccess,onFailed,userContext) {PageMethods._staticInstance.ConsultaCuentaTerceros(Parametros,onSuccess,onFailed,userContext); } PageMethods.ObtieneUsuario= function(onSuccess,onFailed,userContext) {PageMethods._staticInstance.ObtieneUsuario(onSuccess,onFailed,userContext); } var gtc = Sys.Net.WebServiceProxy._generateTypedConstructor; Type.registerNamespace('Sat.Cfdi.Iu.Contribuyente.Portal'); if (typeof(Sat.Cfdi.Iu.Contribuyente.Portal.RespuestaValidaDescarga) === 'undefined') { Sat.Cfdi.Iu.Contribuyente.Portal.RespuestaValidaDescarga=gtc(\"Sat.Cfdi.Iu.Contribuyente.Portal.RespuestaValidaDescarga\"); Sat.Cfdi.Iu.Contribuyente.Portal.RespuestaValidaDescarga.registerClass('Sat.Cfdi.Iu.Contribuyente.Portal.RespuestaValidaDescarga'); } function WebForm_OnSubmit() { if (typeof(ValidatorOnSubmit) == \"function\" && ValidatorOnSubmit() == false) return false; return true; } //]]>  \r\n  \r\n//<![CDATA[ Sys.WebForms.PageRequestManager._initialize('ctl00$ScriptManager1', 'aspnetForm', ['fctl00$UpnlNombre','','tctl00$MainContent$UpnlBusqueda','','tctl00$MainContent$CldFechaInicial2$UpnlSeleccionFecha','','tctl00$MainContent$CldFechaFinal2$UpnlSeleccionFecha','','tctl00$MainContent$UpnlResultados',''], [], ['ctl00$MainContent$BtnDescargar','','ctl00$MainContent$BtnMetadata','','ctl00$MainContent$BtnCancelar','','ctl00$MainContent$BtnImprimir',''], 18000000, 'ctl00'); //]]>   \r\n\r\n\r\n\r\nInterruptor de Navegaci√≥n \r\n\r\n\r\n Factura electr√≥nica \r\n\r\nConsulta CFDI  \r\n\r\nFactura Electr√≥nica\r\n\r\n\r\nRetenciones e Inf. de Pagos\r\n\r\n\r\n\r\nGeneraci√≥n de CFDI \r\n\r\nConfiguraci√≥n de datos V 4.0\r\n\r\n\r\nConfiguraci√≥n de datos V 3.3\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n  Inicio \r\n Consultar Facturas Emitidas\r\n \r\n\r\nRFC Autenticado: AAMD660518TF2 Salir \r\n\r\n\r\n \r\n\r\n\r\nConsultar Facturas Emitidas\r\n\r\n\r\n\r\n\r\n\r\n\r\nFolio Fiscal * \r\n\r\n\r\n\r\n\r\n \r\n\r\n  /* the div that holds the date picker calendar */ .dpDiv { } /* the table (within the div) that holds the date picker calendar */ .dpTable { font-family: Open Sans, Helvetica Neue, Helvetica, Arial, sans-serif; font-size: 18px; line-height: 1.4285; text-align: center; color: #333; background-color: #fff; box-shadow: 0px 2px 7px rgba(0,0,0,0.2); border-radius: 0; width: 300px; height: 300px; } /* the top table row that holds the month, year, and forward/backward buttons */ .dpTitleTR { background-color: #222; } /* the second table row, that holds the names of days of the week (Mo, Tu, We, etc.) */ .dpDayTR { border-bottom: 1px solid #111; } /* a table cell that holds a date number (either blank or 1-31) */ .dpTD { /* border: 1px solid #ece9d8;*/ color: #003399; } /* a table cell that holds a highlighted day (usually either today's date or the current date field value) */ .dpDayHighlightTD { background-color: #ffdf88; } /* the date number table cell that the mouse pointer is currently over (you can use contrasting colors to make it apparent which cell is being hovered over) */ .dpTDHover { background-color: #ffffff; border: 1px solid #888888; cursor: pointer; color: red; } /* the table cell that holds the name of the month and the year */ .dpTitleTD { } /* a table cell that holds one of the forward/backward buttons */ .dpButtonTD { } /* the table cell that holds the \"This Month\" or \"Close\" button at the bottom */ .dpTodayButtonTD { } /* a table cell that holds the names of days of the week (Mo, Tu, We, etc.) */ .dpDayTD { /*background-color: #FFFFFF;*/ /*border: 1px solid #AAAAAA;*/ text-transform: uppercase; font-weight:300; color: #9d9d9d; font-size: 10px; } /* additional style information for the text that indicates the month and year */ .dpTitleText { font-size: 18px; color: #fff; line-height: 1em; text-align: center; } /* additional style information for the cell that holds a highlighted day (usually either today's date or the current date field value) */ .dpDayHighlight { /*color: 4060ff; font-weight: bold;*/ color: #003399; text-decoration: none; } /* the forward/backward buttons at the top */ .dpButton { font-family: Tahoma; font-size: 8pt; color: gray; background: #d8e8ff; font-weight: normal; padding: 0px; } .dpButtonExtra { font-family: Tahoma; font-size: 8pt; color: gray; background: #d8e8ff; font-weight: bold; padding: 0px; margin-left: -8px; } /* the \"This Month\" and \"Close\" buttons at the bottom */ .dpTodayButton { font-family: Tahoma; font-size: 7pt; color: gray; background: #d8e8ff; font-weight: bold; } .surveyTable, .surveytd { border-color: #000000; border-style: solid; font-family: Tahoma; font-size: 10pt; } .surveyTable { /*border-width: 0 0 1px 1px;*/ border-spacing: 0; /*border-collapse: collapse;*/ font-family: Tahoma; font-size: 10pt; } .surveytd { margin: 0; padding: 4px; /*border-width: 1px 1px 0 0;*/ font-family: Tahoma; font-size: 10pt; } .surveyButton { border-top: solid 1px #CCCCCC; background-color: #E5E5E5; font-family: Tahoma; font-size: 10pt; } #DivCalendario { position: absolute; top: 1px; width: 220px; display: none; margin-top: 10px; z-index: 1000; background: white; } #DivTexto { display: block; width: 200px; }  \r\n\r\n\r\nFecha Inicial de Emisi√≥n * \r\n\r\n  \r\n\r\n\r\n00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 \r\n\r\n:\r\n\r\n\r\n00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 \r\n\r\n:\r\n\r\n\r\n00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 \r\n//DataPicker var datePickerDivID = \"datepicker\"; var iFrameDivID = \"datepickeriframe\"; var dayArrayShort = new Array('DOM', 'LUN', 'MAR', 'MIE', 'JUE', 'VIE', 'SAB'); var dayArrayMed = new Array('Dom', 'Lun', 'Mar', 'Mie', 'Jue', 'Vie', 'Sab'); var dayArrayLong = new Array('Domingo', 'Lunes', 'Martes', 'Miercoles', 'Jueves', 'Viernes', 'Sabado'); var monthArrayShort = new Array('Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'); var monthArrayMed = new Array('Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'); var monthArrayLong = new Array('Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'); // these variables define the date formatting we're expecting and outputting. // If you want to use a different format by default, change the defaultDateSeparator // and defaultDateFormat variables either here or on your HTML page. var defaultDateSeparator = \"/\"; // common values would be \"/\" or \".\" var defaultDateFormat = \"mdy\" // valid values are \"mdy\", \"chadmy\", and \"ymd\" var dateSeparator = defaultDateSeparator; var dateFormat = defaultDateFormat; var idCajaTexto = 'ctl00_MainContent_CldFechaInicial2_Calendario_text'; var _CustomAction = null; /** This is the main function you'll call from the onClick event of a button. Normally, you'll have something like this on your HTML page: Start Date: <input name=\"StartDate\"> <input type=button value=\"select\" onclick=\"displayDatePicker('StartDate');\"> That will cause the datepicker to be displayed beneath the StartDate field and any date that is chosen will update the value of that field. If you'd rather have the datepicker display beneath the button that was clicked, you can code the button like this: <input type=button value=\"select\" onclick=\"displayDatePicker('StartDate', this);\"> So, pretty much, the first argument (dateFieldName) is a string representing the name of the field that will be modified if the user picks a date, and the second argument (displayBelowThisObject) is optional and represents an actual node on the HTML document that the datepicker should be displayed below. In version 1.1 of this code, the dtFormat and dtSep variables were added, allowing you to use a specific date format or date separator for a given call to this function. Normally, you'll just want to set these defaults globally with the defaultDateSeparator and defaultDateFormat variables, but it doesn't hurt anything to add them as optional parameters here. An example of use is: <input type=button value=\"select\" onclick=\"displayDatePicker('StartDate', false, 'dmy', '.');\"> This would display the datepicker beneath the StartDate field (because the displayBelowThisObject parameter was false), and update the StartDate field with the chosen value of the datepicker using a date format of dd.mm.yyyy */ function displayDatePicker(dateFieldName, displayBelowThisObject, dtFormat, dtSep) { var targetDateField = document.getElementById(dateFieldName); // this._CustomAction = CustomAction; // // if we weren't told what node to display the datepicker beneath, just display it // beneath the date field we're updating if (!displayBelowThisObject) { displayBelowThisObject = targetDateField; } // if a date separator character was given, update the dateSeparator variable if (dtSep) dateSeparator = dtSep; else dateSeparator = defaultDateSeparator; // if a date format was given, update the dateFormat variable if (dtFormat) dateFormat = dtFormat; else dateFormat = defaultDateFormat; var x = displayBelowThisObject.offsetLeft; var y = displayBelowThisObject.offsetTop + displayBelowThisObject.offsetHeight; // deal with elements inside tables and such var parent = displayBelowThisObject; while (parent.offsetParent) { parent = parent.offsetParent; x += parent.offsetLeft; y += parent.offsetTop; } drawDatePicker(targetDateField, x, y); } /** Draw the datepicker object (which is just a table with calendar elements) at the specified x and y coordinates, using the targetDateField object as the input tag that will ultimately be populated with a date. This function will normally be called by the displayDatePicker function. */ function drawDatePicker(targetDateField, x, y) { var dt = getFieldDate(targetDateField.value); // the datepicker table will be drawn inside of a <div> with an ID defined by the // global datePickerDivID variable. If such a div doesn't yet exist on the HTML // document we're working with, add one. if (!document.getElementById(datePickerDivID)) { // don't use innerHTML to update the body, because it can cause global variables // that are currently pointing to objects on the page to have bad references //document.body.innerHTML += \"<div id='\" + datePickerDivID + \"' class='dpDiv'></div>\"; var newNode = document.createElement(\"div\"); newNode.setAttribute(\"id\", datePickerDivID); newNode.setAttribute(\"class\", \"dpDiv\"); //newNode.setAttribute(\"style\", \"visibility: hidden;\"); document.body.appendChild(newNode); } // move the datepicker div to the proper x,y coordinate and toggle the visiblity var pickerDiv = document.getElementById(datePickerDivID); pickerDiv.style.position = \"absolute\"; pickerDiv.style.left = x + \"px\"; pickerDiv.style.top = y + \"px\"; pickerDiv.style.visibility = (pickerDiv.style.visibility == \"visible\" ? \"hidden\" : \"visible\"); //pickerDiv.style.visibility = \"visible\"; pickerDiv.style.display = (pickerDiv.style.display == \"block\" ? \"none\" : \"block\"); pickerDiv.style.zIndex = 10000; // draw the datepicker table refreshDatePicker(targetDateField.name, dt.getFullYear(), dt.getMonth(), dt.getDate()); } /** This is the function that actually draws the datepicker calendar. */ function refreshDatePicker(dateFieldName, year, month, day) { // if no arguments are passed, use today's date; otherwise, month and year // are required (if a day is passed, it will be highlighted later) var thisDay = new Date(); if ((month >= 0) && (year > 0)) { thisDay = new Date(year, month, 1); } else { day = thisDay.getDate(); thisDay.setDate(1); } // the calendar will be drawn as a table // you can customize the table elements with a global CSS style sheet, // or by hardcoding style and formatting elements below var crlf = \"\\r\\n\"; var TABLE = \"<table cols=7 class='dpTable'>\" + crlf; var xTABLE = \"</table>\" + crlf; var TR = \"<tr class='dpTR'>\"; var TR_title = \"<tr class='dpTitleTR'>\"; var TR_days = \"<tr>\"; var TR_todaybutton = \"<tr class='dpTodayButtonTR'>\"; var xTR = \"</tr>\" + crlf; var TD = \"<td class='dpTD' onMouseOut='this.className=\\\"dpTD\\\";' onMouseOver=' this.className=\\\"dpTDHover\\\";' \"; // leave this tag open, because we'll be adding an onClick event var TD_title = \"<td colspan=5 class='dpTitleTD'>\"; var TD_buttons = \"<td class='dpButtonTD'>\"; var TD_todaybutton = \"<td colspan=7 class='dpTodayButtonTD'>\"; var TD_days = \"<td class='dpDayTD'>\"; var TD_selected = \"<td class='dpDayHighlightTD' onMouseOut='this.className=\\\"dpDayHighlightTD\\\";' onMouseOver='this.className=\\\"dpTDHover\\\";' \"; // leave this tag open, because we'll be adding an onClick event var xTD = \"</td>\" + crlf; var DIV_title = \"<div class='dpTitleText'>\"; var DIV_selected = \"<div class='dpDayHighlight'>\"; var xDIV = \"</div>\"; // start generating the code for the calendar table var html = TABLE; // this is the title bar, which displays the month and the buttons to // go back to a previous month or forward to the next month html += TR_title; html += TD_buttons + getButtonCode(dateFieldName, thisDay, -1, \"&lt;\") + xTD; html += TD_title + DIV_title + monthArrayLong[thisDay.getMonth()] + \" \" + thisDay.getFullYear() + xDIV + xTD; html += TD_buttons + getButtonCode(dateFieldName, thisDay, 1, \"&gt;\") + xTD; html += xTR; // this is the row that indicates which day of the week we're on html += TR_days; for (i = 0; i < dayArrayShort.length; i++) html += TD_days + dayArrayShort[i] + xTD; html += xTR; // now we'll start populating the table with days of the month html += TR; // first, the leading blanks for (i = 0; i < thisDay.getDay(); i++) html += TD + \"&nbsp;\" + xTD; // now, the days of the month do { dayNum = thisDay.getDate(); TD_onclick = \" onclick=\\\"updateDateField('\" + dateFieldName + \"', '\" + getDateString(thisDay) + \"');\\\">\"; if (dayNum == day) html += TD_selected + TD_onclick + DIV_selected + dayNum + xDIV + xTD; else html += TD + TD_onclick + dayNum + xTD; // if this is a Saturday, start a new row if (thisDay.getDay() == 6) html += xTR + TR; // increment the day thisDay.setDate(thisDay.getDate() + 1); } while (thisDay.getDate() > 1) // fill in any trailing blanks if (thisDay.getDay() > 0) { for (i = 6; i > thisDay.getDay(); i--) html += TD + \"&nbsp;\" + xTD; } html += xTR; // add a button to allow the user to easily return to today, or close the calendar var today = new Date(); var todayString = \"Today is \" + dayArrayMed[today.getDay()] + \", \" + monthArrayMed[today.getMonth()] + \" \" + today.getDate(); html += TR_todaybutton + TD_todaybutton; //html += \"<button class='dpTodayButton' onClick='refreshDatePicker(\\\"\" + dateFieldName + \"\\\");'>this month</button> \"; html += \"<button class='dpTodayButton' onClick='updateDateField(\\\"\" + dateFieldName + \"\\\");'>cerrar</button>\"; html += xTD + xTR; // and finally, close the table html += xTABLE; document.getElementById(datePickerDivID).innerHTML = html; // add an \"iFrame shim\" to allow the datepicker to display above selection lists adjustiFrame(); } /** Convenience function for writing the code for the buttons that bring us back or forward a month. */ function getButtonCode(dateFieldName, dateVal, adjust, label) { var newMonth = (dateVal.getMonth() + adjust) % 12; var newYear = dateVal.getFullYear() + parseInt((dateVal.getMonth() + adjust) / 12); if (newMonth < 0) { newMonth += 12; newYear += -1; } return \"<button class='dpButton' onClick='refreshDatePicker(\\\"\" + dateFieldName + \"\\\", \" + newYear + \", \" + newMonth + \");'>\" + label + \"</button>\"; } /** Convert a JavaScript Date object to a string, based on the dateFormat and dateSeparator variables at the beginning of this script library. */ function getDateString(dateVal) { var dayString = \"00\" + dateVal.getDate(); var monthString = \"00\" + (dateVal.getMonth() + 1); dayString = dayString.substring(dayString.length - 2); monthString = monthString.substring(monthString.length - 2); switch (dateFormat) { case \"dmy\": return dayString + dateSeparator + monthString + dateSeparator + dateVal.getFullYear(); case \"ymd\": return dateVal.getFullYear() + dateSeparator + monthString + dateSeparator + dayString; case \"mdy\": default: return monthString + dateSeparator + dayString + dateSeparator + dateVal.getFullYear(); } } /** Convert a string to a JavaScript Date object. */ function getFieldDate(dateString) { var dateVal; var dArray; var d, m, y; try { dArray = splitDateString(dateString); if (dArray) { switch (dateFormat) { case \"dmy\": d = parseInt(dArray[0], 10); m = parseInt(dArray[1], 10) - 1; y = parseInt(dArray[2], 10); break; case \"ymd\": d = parseInt(dArray[2], 10); m = parseInt(dArray[1], 10) - 1; y = parseInt(dArray[0], 10); break; case \"mdy\": default: d = parseInt(dArray[1], 10); m = parseInt(dArray[0], 10) - 1; y = parseInt(dArray[2], 10); break; } dateVal = new Date(y, m, d); } else if (dateString) { dateVal = new Date(dateString); } else { dateVal = new Date(); } } catch (e) { dateVal = new Date(); } return dateVal; } /** Try to split a date string into an array of elements, using common date separators. If the date is split, an array is returned; otherwise, we just return false. */ function splitDateString(dateString) { var dArray; if (dateString.indexOf(\"/\") >= 0) dArray = dateString.split(\"/\"); else if (dateString.indexOf(\".\") >= 0) dArray = dateString.split(\".\"); else if (dateString.indexOf(\"-\") >= 0) dArray = dateString.split(\"-\"); else if (dateString.indexOf(\"\\\\\") >= 0) dArray = dateString.split(\"\\\\\"); else dArray = false; return dArray; } /** Update the field with the given dateFieldName with the dateString that has been passed, and hide the datepicker. If no dateString is passed, just close the datepicker without changing the field value. Also, if the page developer has defined a function called datePickerClosed anywhere on the page or in an imported library, we will attempt to run that function with the updated field as a parameter. This can be used for such things as date validation, setting default values for related fields, etc. For example, you might have a function like this to validate a start date field: function datePickerClosed(dateField) { var dateObj = getFieldDate(dateField.value); var today = new Date(); today = new Date(today.getFullYear(), today.getMonth(), today.getDate()); if (dateField.name == \"StartDate\") { if (dateObj < today) { // if the date is before today, alert the user and display the datepicker again alert(\"Please enter a date that is today or later\"); dateField.value = \"\"; document.getElementById(datePickerDivID).style.visibility = \"visible\"; adjustiFrame(); } else { // if the date is okay, set the EndDate field to 7 days after the StartDate dateObj.setTime(dateObj.getTime() + (7 * 24 * 60 * 60 * 1000)); var endDateField = document.getElementsByName (\"EndDate\").item(0); endDateField.value = getDateString(dateObj); } } } */ function SetDDL(targetField, dateFieldName, dateString) { var StartDate = 2014; var EndDate = 2014; var IsInicial = dateFieldName.indexOf(\"FechaInicial\"); var IsFinal = dateFieldName.indexOf(\"FechaFinal\"); var hfInicial = document.getElementById(\"hfInicial\"); var hfFinal = document.getElementById(\"hfFinal\"); if(IsInicial > -1) { hfInicial.value = dateString; hfInicial.value = getFieldDate(hfInicial.value).getFullYear(); } if(IsFinal > -1) { hfFinal.value = dateString; hfFinal.value = getFieldDate(hfFinal.value).getFullYear(); } if(hfInicial.value != \"\") { StartDate = hfInicial.value; } if(hfFinal.value != \"\") { EndDate = hfFinal.value; } //var dt = getFieldDate(targetField.value); //var year = dt.getFullYear(); //alert(targetField.id); var ddl = document.getElementById(\"ctl00_MainContent_ddlComplementos\"); var passed = true; if(StartDate < 2014 || EndDate < 2014) { passed = false; } if(!passed) { var hfInicialBool = document.getElementById(\"hfInicialBool\"); hfInicialBool.value = \"true\"; if(ddl != null) { ddl.selectedIndex=0; ddl.disabled= true; } } if(passed) { var hfInicialBool = document.getElementById(\"hfInicialBool\"); hfInicialBool.value = \"false\"; if(ddl != null) ddl.disabled= false; } } function updateDateField(dateFieldName, dateString) { var targetDateField = document.getElementsByName(dateFieldName).item(0); if (dateString) { //var Contenedor = $('#'+ dateFieldName); var idDependiente = '#' + $(targetDateField).attr('dependiente'); if (false) { $(idDependiente + '_Calendario_text').val(dateString); //$(idDependiente + '_DdlHora').val(\"23\"); var opHora = $(idDependiente + '_DdlHora').find(\"option[value=23]\"); $(idDependiente + '_DdlHora').selectbox(\"change\", opHora.attr('value'), opHora.html()); //$(idDependiente + '_DdlMinuto').val(\"59\"); var opMinuto = $(idDependiente + '_DdlMinuto').find(\"option[value=59]\"); $(idDependiente + '_DdlMinuto').selectbox(\"change\", opMinuto.attr('value'), opMinuto.html()); //$(idDependiente + '_DdlSegundo').val(\"59\"); var opSegundo = $(idDependiente + '_DdlSegundo').find(\"option[value=59]\"); $(idDependiente + '_DdlSegundo').selectbox(\"change\", opSegundo.attr('value'), opSegundo.html()); } targetDateField.value = dateString; if (this._CustomAction != null) this._CustomAction(dateString); SetDDL(targetDateField, dateFieldName, dateString); } // targetDateField.fireEvent('onchange'); var pickerDiv = document.getElementById(datePickerDivID); if(pickerDiv != null) { pickerDiv.style.visibility = \"hidden\"; pickerDiv.style.display = \"none\"; adjustiFrame(); // after the datepicker has closed, optionally run a user-defined function called // datePickerClosed, passing the field that was just updated as a parameter // (note that this will only run if the user actually selected a date from the datepicker) if ((dateString) && (typeof (datePickerClosed) == \"function\")) datePickerClosed(targetDateField); } } /** Use an \"iFrame shim\" to deal with problems where the datepicker shows up behind selection list elements, if they're below the datepicker. */ function adjustiFrame(pickerDiv, iFrameDiv) { // we know that Opera doesn't like something about this, so if we // think we're using Opera, don't even try var is_opera = (navigator.userAgent.toLowerCase().indexOf(\"opera\") != -1); if (is_opera) return; // put a try/catch block around the whole thing, just in case try { if (!document.getElementById(iFrameDivID)) { // don't use innerHTML to update the body, because it can cause global variables // that are currently pointing to objects on the page to have bad references //document.body.innerHTML += \"<iframe id='\" + iFrameDivID + \"' src='javascript:false;' scrolling='no' frameborder='0'>\"; var newNode = document.createElement(\"iFrame\"); newNode.setAttribute(\"id\", iFrameDivID); // newNode.setAttribute(\"src\", \"javascript:false;\"); newNode.setAttribute(\"scrolling\", \"no\"); newNode.setAttribute(\"frameborder\", \"0\"); document.body.appendChild(newNode); } if (!pickerDiv) pickerDiv = document.getElementById(datePickerDivID); if (!iFrameDiv) iFrameDiv = document.getElementById(iFrameDivID); try { iFrameDiv.style.position = \"absolute\"; iFrameDiv.style.width = pickerDiv.offsetWidth; iFrameDiv.style.height = pickerDiv.offsetHeight; iFrameDiv.style.top = pickerDiv.style.top; iFrameDiv.style.left = pickerDiv.style.left; iFrameDiv.style.zIndex = pickerDiv.style.zIndex - 1; iFrameDiv.style.visibility = pickerDiv.style.visibility; iFrameDiv.style.display = pickerDiv.style.display; } catch (e) { } } catch (ee) { } } /* Function Ends for calendar chk line 379 for doubts*/ /// ////Define la posici√≥n en donde aparecer√° el calendario. function DefinePosicionCalendario(NombreContenedor, NombreEtiqueta, NombreCaja) { var lblFecha = $(NombreEtiqueta); //Instancia de la etiqueta var txtFecha = $(NombreCaja); //Instancia de la caja de texto var TopCalendario = txtFecha.offset().top + txtFecha.height(); //Posici√≥n del calendario var Contenedor = $(NombreContenedor).children(\"#SeleccionFecha\"); Contenedor.children(\"#DivCalendario\").css('left', txtFecha.offset().left).css('top', TopCalendario); } // ////Define las posiciones iniciales de los controles. function DefinePosicionInicial() { var lblFecha = $(\"#ctl00_MainContent_CldFechaInicial2_LblFecha\"); //Instancia de la etiqueta var txtFecha = $(\"#\" + idCajaTexto); //Instancia de la caja de texto var ancho = $(\"#DivTexto\").width() + lblFecha.width(); //Se obtiene el ancho del div principal var LeftBotonFecha = lblFecha.position().left + lblFecha.width() + txtFecha.width(); // Se obtiene la posisici√≥n del bot√≥n var TopDivTexto = parseInt(lblFecha.height() / 2) - parseInt($(\"#DivTexto\").height() / 2); //Se obtiene la posicion vertical de la caja de texto y del bot√≥n var Contenedor = $(\"#ctl00_MainContent_CldFechaInicial2_UpnlSeleccionFecha\").children(\"#SeleccionFecha\"); Contenedor.children(\"#SeleccionFecha\").width(ancho); } function ConfiguraCombosMac() { var isMac = navigator.userAgent.indexOf(\"Macintosh\") if(isMac != -1) $(document.getElementsByClassName(\"calendarCombo\")).css(\"width\", \"45px\"); } $(function() { DefinePosicionInicial(); //Se establece la acci√≥n para mostrar el calendario $(\"#ctl00_MainContent_CldFechaInicial2_BtnFecha2\").live('click', function() { if ($(\"#ctl00_MainContent_CldFechaInicial2_BtnFecha2\").attr('habilitado') == \"true\") { var cajaTexto = $(this).parent().find(\":input\"); displayDatePicker(cajaTexto.attr('id'), false, 'dmy', '/'); } }); });  \r\n\r\n /* the div that holds the date picker calendar */ .dpDiv { } /* the table (within the div) that holds the date picker calendar */ .dpTable { font-family: Open Sans, Helvetica Neue, Helvetica, Arial, sans-serif; font-size: 18px; line-height: 1.4285; text-align: center; color: #333; background-color: #fff; box-shadow: 0px 2px 7px rgba(0,0,0,0.2); border-radius: 0; width: 300px; height: 300px; } /* the top table row that holds the month, year, and forward/backward buttons */ .dpTitleTR { background-color: #222; } /* the second table row, that holds the names of days of the week (Mo, Tu, We, etc.) */ .dpDayTR { border-bottom: 1px solid #111; } /* a table cell that holds a date number (either blank or 1-31) */ .dpTD { /* border: 1px solid #ece9d8;*/ color: #003399; } /* a table cell that holds a highlighted day (usually either today's date or the current date field value) */ .dpDayHighlightTD { background-color: #ffdf88; } /* the date number table cell that the mouse pointer is currently over (you can use contrasting colors to make it apparent which cell is being hovered over) */ .dpTDHover { background-color: #ffffff; border: 1px solid #888888; cursor: pointer; color: red; } /* the table cell that holds the name of the month and the year */ .dpTitleTD { } /* a table cell that holds one of the forward/backward buttons */ .dpButtonTD { } /* the table cell that holds the \"This Month\" or \"Close\" button at the bottom */ .dpTodayButtonTD { } /* a table cell that holds the names of days of the week (Mo, Tu, We, etc.) */ .dpDayTD { /*background-color: #FFFFFF;*/ /*border: 1px solid #AAAAAA;*/ text-transform: uppercase; font-weight:300; color: #9d9d9d; font-size: 10px; } /* additional style information for the text that indicates the month and year */ .dpTitleText { font-size: 18px; color: #fff; line-height: 1em; text-align: center; } /* additional style information for the cell that holds a highlighted day (usually either today's date or the current date field value) */ .dpDayHighlight { /*color: 4060ff; font-weight: bold;*/ color: #003399; text-decoration: none; } /* the forward/backward buttons at the top */ .dpButton { font-family: Tahoma; font-size: 8pt; color: gray; background: #d8e8ff; font-weight: normal; padding: 0px; } .dpButtonExtra { font-family: Tahoma; font-size: 8pt; color: gray; background: #d8e8ff; font-weight: bold; padding: 0px; margin-left: -8px; } /* the \"This Month\" and \"Close\" buttons at the bottom */ .dpTodayButton { font-family: Tahoma; font-size: 7pt; color: gray; background: #d8e8ff; font-weight: bold; } .surveyTable, .surveytd { border-color: #000000; border-style: solid; font-family: Tahoma; font-size: 10pt; } .surveyTable { /*border-width: 0 0 1px 1px;*/ border-spacing: 0; /*border-collapse: collapse;*/ font-family: Tahoma; font-size: 10pt; } .surveytd { margin: 0; padding: 4px; /*border-width: 1px 1px 0 0;*/ font-family: Tahoma; font-size: 10pt; } .surveyButton { border-top: solid 1px #CCCCCC; background-color: #E5E5E5; font-family: Tahoma; font-size: 10pt; } #DivCalendario { position: absolute; top: 1px; width: 220px; display: none; margin-top: 10px; z-index: 1000; background: white; } #DivTexto { display: block; width: 200px; }  \r\n\r\n\r\nFecha Final de Emisi√≥n * \r\n\r\n  \r\n\r\n\r\n00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 \r\n\r\n:\r\n\r\n\r\n00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 \r\n\r\n:\r\n\r\n\r\n00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 \r\n//DataPicker var datePickerDivID = \"datepicker\"; var iFrameDivID = \"datepickeriframe\"; var dayArrayShort = new Array('DOM', 'LUN', 'MAR', 'MIE', 'JUE', 'VIE', 'SAB'); var dayArrayMed = new Array('Dom', 'Lun', 'Mar', 'Mie', 'Jue', 'Vie', 'Sab'); var dayArrayLong = new Array('Domingo', 'Lunes', 'Martes', 'Miercoles', 'Jueves', 'Viernes', 'Sabado'); var monthArrayShort = new Array('Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'); var monthArrayMed = new Array('Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'); var monthArrayLong = new Array('Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'); // these variables define the date formatting we're expecting and outputting. // If you want to use a different format by default, change the defaultDateSeparator // and defaultDateFormat variables either here or on your HTML page. var defaultDateSeparator = \"/\"; // common values would be \"/\" or \".\" var defaultDateFormat = \"mdy\" // valid values are \"mdy\", \"chadmy\", and \"ymd\" var dateSeparator = defaultDateSeparator; var dateFormat = defaultDateFormat; var idCajaTexto = 'ctl00_MainContent_CldFechaFinal2_Calendario_text'; var _CustomAction = null; /** This is the main function you'll call from the onClick event of a button. Normally, you'll have something like this on your HTML page: Start Date: <input name=\"StartDate\"> <input type=button value=\"select\" onclick=\"displayDatePicker('StartDate');\"> That will cause the datepicker to be displayed beneath the StartDate field and any date that is chosen will update the value of that field. If you'd rather have the datepicker display beneath the button that was clicked, you can code the button like this: <input type=button value=\"select\" onclick=\"displayDatePicker('StartDate', this);\"> So, pretty much, the first argument (dateFieldName) is a string representing the name of the field that will be modified if the user picks a date, and the second argument (displayBelowThisObject) is optional and represents an actual node on the HTML document that the datepicker should be displayed below. In version 1.1 of this code, the dtFormat and dtSep variables were added, allowing you to use a specific date format or date separator for a given call to this function. Normally, you'll just want to set these defaults globally with the defaultDateSeparator and defaultDateFormat variables, but it doesn't hurt anything to add them as optional parameters here. An example of use is: <input type=button value=\"select\" onclick=\"displayDatePicker('StartDate', false, 'dmy', '.');\"> This would display the datepicker beneath the StartDate field (because the displayBelowThisObject parameter was false), and update the StartDate field with the chosen value of the datepicker using a date format of dd.mm.yyyy */ function displayDatePicker(dateFieldName, displayBelowThisObject, dtFormat, dtSep) { var targetDateField = document.getElementById(dateFieldName); // this._CustomAction = CustomAction; // // if we weren't told what node to display the datepicker beneath, just display it // beneath the date field we're updating if (!displayBelowThisObject) { displayBelowThisObject = targetDateField; } // if a date separator character was given, update the dateSeparator variable if (dtSep) dateSeparator = dtSep; else dateSeparator = defaultDateSeparator; // if a date format was given, update the dateFormat variable if (dtFormat) dateFormat = dtFormat; else dateFormat = defaultDateFormat; var x = displayBelowThisObject.offsetLeft; var y = displayBelowThisObject.offsetTop + displayBelowThisObject.offsetHeight; // deal with elements inside tables and such var parent = displayBelowThisObject; while (parent.offsetParent) { parent = parent.offsetParent; x += parent.offsetLeft; y += parent.offsetTop; } drawDatePicker(targetDateField, x, y); } /** Draw the datepicker object (which is just a table with calendar elements) at the specified x and y coordinates, using the targetDateField object as the input tag that will ultimately be populated with a date. This function will normally be called by the displayDatePicker function. */ function drawDatePicker(targetDateField, x, y) { var dt = getFieldDate(targetDateField.value); // the datepicker table will be drawn inside of a <div> with an ID defined by the // global datePickerDivID variable. If such a div doesn't yet exist on the HTML // document we're working with, add one. if (!document.getElementById(datePickerDivID)) { // don't use innerHTML to update the body, because it can cause global variables // that are currently pointing to objects on the page to have bad references //document.body.innerHTML += \"<div id='\" + datePickerDivID + \"' class='dpDiv'></div>\"; var newNode = document.createElement(\"div\"); newNode.setAttribute(\"id\", datePickerDivID); newNode.setAttribute(\"class\", \"dpDiv\"); //newNode.setAttribute(\"style\", \"visibility: hidden;\"); document.body.appendChild(newNode); } // move the datepicker div to the proper x,y coordinate and toggle the visiblity var pickerDiv = document.getElementById(datePickerDivID); pickerDiv.style.position = \"absolute\"; pickerDiv.style.left = x + \"px\"; pickerDiv.style.top = y + \"px\"; pickerDiv.style.visibility = (pickerDiv.style.visibility == \"visible\" ? \"hidden\" : \"visible\"); //pickerDiv.style.visibility = \"visible\"; pickerDiv.style.display = (pickerDiv.style.display == \"block\" ? \"none\" : \"block\"); pickerDiv.style.zIndex = 10000; // draw the datepicker table refreshDatePicker(targetDateField.name, dt.getFullYear(), dt.getMonth(), dt.getDate()); } /** This is the function that actually draws the datepicker calendar. */ function refreshDatePicker(dateFieldName, year, month, day) { // if no arguments are passed, use today's date; otherwise, month and year // are required (if a day is passed, it will be highlighted later) var thisDay = new Date(); if ((month >= 0) && (year > 0)) { thisDay = new Date(year, month, 1); } else { day = thisDay.getDate(); thisDay.setDate(1); } // the calendar will be drawn as a table // you can customize the table elements with a global CSS style sheet, // or by hardcoding style and formatting elements below var crlf = \"\\r\\n\"; var TABLE = \"<table cols=7 class='dpTable'>\" + crlf; var xTABLE = \"</table>\" + crlf; var TR = \"<tr class='dpTR'>\"; var TR_title = \"<tr class='dpTitleTR'>\"; var TR_days = \"<tr>\"; var TR_todaybutton = \"<tr class='dpTodayButtonTR'>\"; var xTR = \"</tr>\" + crlf; var TD = \"<td class='dpTD' onMouseOut='this.className=\\\"dpTD\\\";' onMouseOver=' this.className=\\\"dpTDHover\\\";' \"; // leave this tag open, because we'll be adding an onClick event var TD_title = \"<td colspan=5 class='dpTitleTD'>\"; var TD_buttons = \"<td class='dpButtonTD'>\"; var TD_todaybutton = \"<td colspan=7 class='dpTodayButtonTD'>\"; var TD_days = \"<td class='dpDayTD'>\"; var TD_selected = \"<td class='dpDayHighlightTD' onMouseOut='this.className=\\\"dpDayHighlightTD\\\";' onMouseOver='this.className=\\\"dpTDHover\\\";' \"; // leave this tag open, because we'll be adding an onClick event var xTD = \"</td>\" + crlf; var DIV_title = \"<div class='dpTitleText'>\"; var DIV_selected = \"<div class='dpDayHighlight'>\"; var xDIV = \"</div>\"; // start generating the code for the calendar table var html = TABLE; // this is the title bar, which displays the month and the buttons to // go back to a previous month or forward to the next month html += TR_title; html += TD_buttons + getButtonCode(dateFieldName, thisDay, -1, \"&lt;\") + xTD; html += TD_title + DIV_title + monthArrayLong[thisDay.getMonth()] + \" \" + thisDay.getFullYear() + xDIV + xTD; html += TD_buttons + getButtonCode(dateFieldName, thisDay, 1, \"&gt;\") + xTD; html += xTR; // this is the row that indicates which day of the week we're on html += TR_days; for (i = 0; i < dayArrayShort.length; i++) html += TD_days + dayArrayShort[i] + xTD; html += xTR; // now we'll start populating the table with days of the month html += TR; // first, the leading blanks for (i = 0; i < thisDay.getDay(); i++) html += TD + \"&nbsp;\" + xTD; // now, the days of the month do { dayNum = thisDay.getDate(); TD_onclick = \" onclick=\\\"updateDateField('\" + dateFieldName + \"', '\" + getDateString(thisDay) + \"');\\\">\"; if (dayNum == day) html += TD_selected + TD_onclick + DIV_selected + dayNum + xDIV + xTD; else html += TD + TD_onclick + dayNum + xTD; // if this is a Saturday, start a new row if (thisDay.getDay() == 6) html += xTR + TR; // increment the day thisDay.setDate(thisDay.getDate() + 1); } while (thisDay.getDate() > 1) // fill in any trailing blanks if (thisDay.getDay() > 0) { for (i = 6; i > thisDay.getDay(); i--) html += TD + \"&nbsp;\" + xTD; } html += xTR; // add a button to allow the user to easily return to today, or close the calendar var today = new Date(); var todayString = \"Today is \" + dayArrayMed[today.getDay()] + \", \" + monthArrayMed[today.getMonth()] + \" \" + today.getDate(); html += TR_todaybutton + TD_todaybutton; //html += \"<button class='dpTodayButton' onClick='refreshDatePicker(\\\"\" + dateFieldName + \"\\\");'>this month</button> \"; html += \"<button class='dpTodayButton' onClick='updateDateField(\\\"\" + dateFieldName + \"\\\");'>cerrar</button>\"; html += xTD + xTR; // and finally, close the table html += xTABLE; document.getElementById(datePickerDivID).innerHTML = html; // add an \"iFrame shim\" to allow the datepicker to display above selection lists adjustiFrame(); } /** Convenience function for writing the code for the buttons that bring us back or forward a month. */ function getButtonCode(dateFieldName, dateVal, adjust, label) { var newMonth = (dateVal.getMonth() + adjust) % 12; var newYear = dateVal.getFullYear() + parseInt((dateVal.getMonth() + adjust) / 12); if (newMonth < 0) { newMonth += 12; newYear += -1; } return \"<button class='dpButton' onClick='refreshDatePicker(\\\"\" + dateFieldName + \"\\\", \" + newYear + \", \" + newMonth + \");'>\" + label + \"</button>\"; } /** Convert a JavaScript Date object to a string, based on the dateFormat and dateSeparator variables at the beginning of this script library. */ function getDateString(dateVal) { var dayString = \"00\" + dateVal.getDate(); var monthString = \"00\" + (dateVal.getMonth() + 1); dayString = dayString.substring(dayString.length - 2); monthString = monthString.substring(monthString.length - 2); switch (dateFormat) { case \"dmy\": return dayString + dateSeparator + monthString + dateSeparator + dateVal.getFullYear(); case \"ymd\": return dateVal.getFullYear() + dateSeparator + monthString + dateSeparator + dayString; case \"mdy\": default: return monthString + dateSeparator + dayString + dateSeparator + dateVal.getFullYear(); } } /** Convert a string to a JavaScript Date object. */ function getFieldDate(dateString) { var dateVal; var dArray; var d, m, y; try { dArray = splitDateString(dateString); if (dArray) { switch (dateFormat) { case \"dmy\": d = parseInt(dArray[0], 10); m = parseInt(dArray[1], 10) - 1; y = parseInt(dArray[2], 10); break; case \"ymd\": d = parseInt(dArray[2], 10); m = parseInt(dArray[1], 10) - 1; y = parseInt(dArray[0], 10); break; case \"mdy\": default: d = parseInt(dArray[1], 10); m = parseInt(dArray[0], 10) - 1; y = parseInt(dArray[2], 10); break; } dateVal = new Date(y, m, d); } else if (dateString) { dateVal = new Date(dateString); } else { dateVal = new Date(); } } catch (e) { dateVal = new Date(); } return dateVal; } /** Try to split a date string into an array of elements, using common date separators. If the date is split, an array is returned; otherwise, we just return false. */ function splitDateString(dateString) { var dArray; if (dateString.indexOf(\"/\") >= 0) dArray = dateString.split(\"/\"); else if (dateString.indexOf(\".\") >= 0) dArray = dateString.split(\".\"); else if (dateString.indexOf(\"-\") >= 0) dArray = dateString.split(\"-\"); else if (dateString.indexOf(\"\\\\\") >= 0) dArray = dateString.split(\"\\\\\"); else dArray = false; return dArray; } /** Update the field with the given dateFieldName with the dateString that has been passed, and hide the datepicker. If no dateString is passed, just close the datepicker without changing the field value. Also, if the page developer has defined a function called datePickerClosed anywhere on the page or in an imported library, we will attempt to run that function with the updated field as a parameter. This can be used for such things as date validation, setting default values for related fields, etc. For example, you might have a function like this to validate a start date field: function datePickerClosed(dateField) { var dateObj = getFieldDate(dateField.value); var today = new Date(); today = new Date(today.getFullYear(), today.getMonth(), today.getDate()); if (dateField.name == \"StartDate\") { if (dateObj < today) { // if the date is before today, alert the user and display the datepicker again alert(\"Please enter a date that is today or later\"); dateField.value = \"\"; document.getElementById(datePickerDivID).style.visibility = \"visible\"; adjustiFrame(); } else { // if the date is okay, set the EndDate field to 7 days after the StartDate dateObj.setTime(dateObj.getTime() + (7 * 24 * 60 * 60 * 1000)); var endDateField = document.getElementsByName (\"EndDate\").item(0); endDateField.value = getDateString(dateObj); } } } */ function SetDDL(targetField, dateFieldName, dateString) { var StartDate = 2014; var EndDate = 2014; var IsInicial = dateFieldName.indexOf(\"FechaInicial\"); var IsFinal = dateFieldName.indexOf(\"FechaFinal\"); var hfInicial = document.getElementById(\"hfInicial\"); var hfFinal = document.getElementById(\"hfFinal\"); if(IsInicial > -1) { hfInicial.value = dateString; hfInicial.value = getFieldDate(hfInicial.value).getFullYear(); } if(IsFinal > -1) { hfFinal.value = dateString; hfFinal.value = getFieldDate(hfFinal.value).getFullYear(); } if(hfInicial.value != \"\") { StartDate = hfInicial.value; } if(hfFinal.value != \"\") { EndDate = hfFinal.value; } //var dt = getFieldDate(targetField.value); //var year = dt.getFullYear(); //alert(targetField.id); var ddl = document.getElementById(\"ctl00_MainContent_ddlComplementos\"); var passed = true; if(StartDate < 2014 || EndDate < 2014) { passed = false; } if(!passed) { var hfInicialBool = document.getElementById(\"hfInicialBool\"); hfInicialBool.value = \"true\"; if(ddl != null) { ddl.selectedIndex=0; ddl.disabled= true; } } if(passed) { var hfInicialBool = document.getElementById(\"hfInicialBool\"); hfInicialBool.value = \"false\"; if(ddl != null) ddl.disabled= false; } } function updateDateField(dateFieldName, dateString) { var targetDateField = document.getElementsByName(dateFieldName).item(0); if (dateString) { //var Contenedor = $('#'+ dateFieldName); var idDependiente = '#' + $(targetDateField).attr('dependiente'); if (true) { $(idDependiente + '_Calendario_text').val(dateString); //$(idDependiente + '_DdlHora').val(\"23\"); var opHora = $(idDependiente + '_DdlHora').find(\"option[value=23]\"); $(idDependiente + '_DdlHora').selectbox(\"change\", opHora.attr('value'), opHora.html()); //$(idDependiente + '_DdlMinuto').val(\"59\"); var opMinuto = $(idDependiente + '_DdlMinuto').find(\"option[value=59]\"); $(idDependiente + '_DdlMinuto').selectbox(\"change\", opMinuto.attr('value'), opMinuto.html()); //$(idDependiente + '_DdlSegundo').val(\"59\"); var opSegundo = $(idDependiente + '_DdlSegundo').find(\"option[value=59]\"); $(idDependiente + '_DdlSegundo').selectbox(\"change\", opSegundo.attr('value'), opSegundo.html()); } targetDateField.value = dateString; if (this._CustomAction != null) this._CustomAction(dateString); SetDDL(targetDateField, dateFieldName, dateString); } // targetDateField.fireEvent('onchange'); var pickerDiv = document.getElementById(datePickerDivID); if(pickerDiv != null) { pickerDiv.style.visibility = \"hidden\"; pickerDiv.style.display = \"none\"; adjustiFrame(); // after the datepicker has closed, optionally run a user-defined function called // datePickerClosed, passing the field that was just updated as a parameter // (note that this will only run if the user actually selected a date from the datepicker) if ((dateString) && (typeof (datePickerClosed) == \"function\")) datePickerClosed(targetDateField); } } /** Use an \"iFrame shim\" to deal with problems where the datepicker shows up behind selection list elements, if they're below the datepicker. */ function adjustiFrame(pickerDiv, iFrameDiv) { // we know that Opera doesn't like something about this, so if we // think we're using Opera, don't even try var is_opera = (navigator.userAgent.toLowerCase().indexOf(\"opera\") != -1); if (is_opera) return; // put a try/catch block around the whole thing, just in case try { if (!document.getElementById(iFrameDivID)) { // don't use innerHTML to update the body, because it can cause global variables // that are currently pointing to objects on the page to have bad references //document.body.innerHTML += \"<iframe id='\" + iFrameDivID + \"' src='javascript:false;' scrolling='no' frameborder='0'>\"; var newNode = document.createElement(\"iFrame\"); newNode.setAttribute(\"id\", iFrameDivID); // newNode.setAttribute(\"src\", \"javascript:false;\"); newNode.setAttribute(\"scrolling\", \"no\"); newNode.setAttribute(\"frameborder\", \"0\"); document.body.appendChild(newNode); } if (!pickerDiv) pickerDiv = document.getElementById(datePickerDivID); if (!iFrameDiv) iFrameDiv = document.getElementById(iFrameDivID); try { iFrameDiv.style.position = \"absolute\"; iFrameDiv.style.width = pickerDiv.offsetWidth; iFrameDiv.style.height = pickerDiv.offsetHeight; iFrameDiv.style.top = pickerDiv.style.top; iFrameDiv.style.left = pickerDiv.style.left; iFrameDiv.style.zIndex = pickerDiv.style.zIndex - 1; iFrameDiv.style.visibility = pickerDiv.style.visibility; iFrameDiv.style.display = pickerDiv.style.display; } catch (e) { } } catch (ee) { } } /* Function Ends for calendar chk line 379 for doubts*/ /// ////Define la posici√≥n en donde aparecer√° el calendario. function DefinePosicionCalendario(NombreContenedor, NombreEtiqueta, NombreCaja) { var lblFecha = $(NombreEtiqueta); //Instancia de la etiqueta var txtFecha = $(NombreCaja); //Instancia de la caja de texto var TopCalendario = txtFecha.offset().top + txtFecha.height(); //Posici√≥n del calendario var Contenedor = $(NombreContenedor).children(\"#SeleccionFecha\"); Contenedor.children(\"#DivCalendario\").css('left', txtFecha.offset().left).css('top', TopCalendario); } // ////Define las posiciones iniciales de los controles. function DefinePosicionInicial() { var lblFecha = $(\"#ctl00_MainContent_CldFechaFinal2_LblFecha\"); //Instancia de la etiqueta var txtFecha = $(\"#\" + idCajaTexto); //Instancia de la caja de texto var ancho = $(\"#DivTexto\").width() + lblFecha.width(); //Se obtiene el ancho del div principal var LeftBotonFecha = lblFecha.position().left + lblFecha.width() + txtFecha.width(); // Se obtiene la posisici√≥n del bot√≥n var TopDivTexto = parseInt(lblFecha.height() / 2) - parseInt($(\"#DivTexto\").height() / 2); //Se obtiene la posicion vertical de la caja de texto y del bot√≥n var Contenedor = $(\"#ctl00_MainContent_CldFechaFinal2_UpnlSeleccionFecha\").children(\"#SeleccionFecha\"); Contenedor.children(\"#SeleccionFecha\").width(ancho); } function ConfiguraCombosMac() { var isMac = navigator.userAgent.indexOf(\"Macintosh\") if(isMac != -1) $(document.getElementsByClassName(\"calendarCombo\")).css(\"width\", \"45px\"); } $(function() { DefinePosicionInicial(); //Se establece la acci√≥n para mostrar el calendario $(\"#ctl00_MainContent_CldFechaFinal2_BtnFecha2\").live('click', function() { if ($(\"#ctl00_MainContent_CldFechaFinal2_BtnFecha2\").attr('habilitado') == \"true\") { var cajaTexto = $(this).parent().find(\":input\"); displayDatePicker(cajaTexto.attr('id'), false, 'dmy', '/'); } }); });  \r\n\r\n\r\nRFC Receptor \r\n\r\nRFC a cuenta terceros \r\n\r\nEstado del Comprobante \r\n\r\n\r\n\r\n\r\n\r\n\r\nSeleccione un valor... Cancelado Vigente \r\n\r\n\r\n\r\nTipo de Comprobante (Complemento) \r\n\r\nEstatus Cancelaci√≥n \r\n\r\n\r\n\r\n\r\nSeleccione un valor... Est√°ndar Acreditamiento de IEPS Aerol√≠neas Carta Porte Carta Porte 2.0 Certificado de Destrucci√≥n Comercio Exterior Comercio Exterior 1.1 Compra Venta de Divisas Consumo de Combustibles Consumo De Combustibles 1.1 Donatarias Estado De Cuenta Bancario Estado de Cuenta Combustibles 1.2 Estado de cuenta de combustibles de monederos electr√≥nicos. Gastos de Hidrocarburos INE 1.1 Ingresos de Hidrocarburos Instituciones Educativas Privadas (Pago de colegiatura) Leyendas Fiscales Mis Cuentas Notarios P√∫blicos Obras de artes y antig√ºedades Otros Derechos e Impuestos Pago en Especie Persona F√≠sica Integrante de Coordinado Recepcion de Pagos Recepci√≥n de Pagos Recibo de donativo Recibo de Pago de Salarios Recibo de Pago de Salarios 1.2 Sector de Ventas al Detalle (Detallista) Servicios de construcci√≥n SPEI de Tercero a Tercero Sustituci√≥n y renovaci√≥n vehicular Terceros Terceros Timbre Fiscal Digital Turista o Pasajero Extranjero Vales de Despensa Veh√≠culo Usado Venta de Vehiculos \r\n(Criterio de b√∫squeda aplicable a CFDI emitidas a partir del 01/01/2014) \r\n\r\nSeleccione un valor... En Proceso Rechazada  Plazo vencido Sin proceso \r\n\r\n\r\nSeleccione un valor... Cancelado con aceptaci√≥n Cancelado sin aceptaci√≥n Plazo vencido \r\n\r\n\r\n* Campos obligatorios \r\n\r\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  Acciones \r\n\r\nFolio Fiscal \r\n\r\nRFC Emisor \r\n\r\nNombre o Raz√≥n Social del Emisor \r\n\r\nRFC Receptor \r\n\r\nNombre o Raz√≥n Social del Receptor \r\n\r\nFecha de Emisi√≥n \r\n\r\nFecha de Certificaci√≥n \r\n\r\nPAC que Certific√≥ \r\n\r\nTotal \r\n\r\nEfecto del Comprobante \r\n\r\nEstatus de cancelaci√≥n \r\n\r\nEstado del Comprobante \r\n\r\nEstatus de Proceso de Cancelaci√≥n \r\n\r\nFecha de Proceso de Cancelaci√≥n \r\n\r\nRFC a cuenta de terceros \r\n\r\nMotivo \r\n\r\nFolio de Sustituci√≥n \r\n\r\n\r\n\r\n\r\n\r\n\r\n         \r\n\r\n\r\n\r\n\r\n\r\nNo existen registros que cumplan con los criterios de b√∫squeda ingresados, intentar nuevamente.\r\n   \r\n\r\n\r\n\r\n \r\nEspere un momento...\r\n \r\n\r\n\r\n\r\n\r\nAddenda\r\n\r\n\r\n¬°Error! \r\n\r\n\r\n\r\n\r\nArchivo (.xml)*:  Buscar    \r\n \r\n\r\n* Campos obligatorios \r\n\r\n Cancelar Integrar \r\n \r\n\r\n\r\n\r\nConfirmaci√≥n.\r\n\r\n\r\n\r\n¬øDesea descargar el archivo xml?\r\n\r\n\r\nCerrar Guardar \r\n   \r\n\r\n\r\n\r\nRegistro de Motivos de Cancelaci√≥n \r\n\r\n\r\n!!! Atenci√≥n !!! \r\n* Estos campos son obligatorios\r\n\r\n** Estos campos no tienen el formato correcto\r\n\r\n\r\n\r\nPara cada CFDI que desea cancelar debe capturar el motivo de cancelaci√≥n.\r\n\r\n\r\n \r\nCerrar  \r\n \r\n\r\n \r\n\r\n\r\nRFC a cuenta de terceros\r\n\r\n\r\nNo fue posible obtener la informaci√≥n de los RFC a cuenta de terceros \r\n\r\n\r\n\r\n\r\nUUID Consultado :\r\n\r\n\r\n\r\n\r\nRFC Tercero\r\n\r\nNombre Tercero\r\n\r\n\r\n\r\n\r\nCerrar \r\n       /// Variables (Blobs) var validCookieInterval; var validSesionInterval; var downloadCookie = 'DownloadedFile' /** * Funci√≥n que muestra el update progress y crea 2 Intervals uno para validar que la descarga del archivo * se haya realizado y el otro mantiene la sesi√≥n. */ function ShowProgress() { validSesionInterval = setInterval(function () { MantieneSesion(); }, 60000); $get('ctl00_MainContent_UpdateProgress1').style.display = 'block'; validCookieInterval = setInterval(function () { if ($.cookie(downloadCookie) != null && $.cookie(downloadCookie) == \"OK\") { $.cookie(downloadCookie, null); $get('ctl00_MainContent_UpdateProgress1').style.display = \"none\"; clearInterval(validCookieInterval);//delete interval clearInterval(validSesionInterval); } }, 2000); } /** * Funci√≥n valida que al menos este seleccionado un registro. * Se toman los valores de los registros seleccionados (blobUri) y los guarda en un hidden **/ function validarSeleccionDescarga() { document.getElementById('dvAlert').innerHTML = ''; if ($('.ListaFolios').filter(':checked').length == 0) { //alert(\"Favor de seleccionar registro(s)\") var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-info alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Atenci√≥n! <br/></strong> Favor de seleccionar registro(s)\"; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#dvAlert').offset().top }, 'slow'); return false; } else { ShowProgress(); validarDescargaMasiva(); return false; } } function MetadataDescarga() { $('#hdnValAccion').attr('value', 'DescargaMetadata'); //ValidaCaptcha(); // Se habilita cuando este captcha AccionCaptcha(); // Se quita cuando este captcha return false; } function DescargaMetadata() { document.getElementById('dvAlert').innerHTML = ''; ShowProgress(); Metadatos(); return false; } function Metadatos() { var urlValidaDescarga = \"ConsultaEmisor.aspx/DescargaMetadatos\"; var Parametros = document.getElementById('hfParametrosMetadata').value; var data = encodeURIComponent($.base64.encode(Parametros)); $.ajax({ url: urlValidaDescarga, type: \"POST\", dataType: \"json\", contentType: 'application/json; charset=utf-8', data: \"{'Parametros':'\" + data + \"'}\", cache: false, async: true, success: function (respuestaValidacion) { $get('ctl00_MainContent_UpdateProgress1').style.display = \"none\"; document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); if (respuestaValidacion.d.startsWith(\"Error:\")) { newDivSuccess.className = \"alert alert-danger alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Error! <br/></strong>\" + respuestaValidacion.d.replace(\"Error:\", \"\"); } else { newDivSuccess.className = \"alert alert-success alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Descarga realizada con √©xito! <br/></strong>\" + respuestaValidacion.d; } document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#dvAlert').offset().top }, 'slow'); }, error: function (errorDetail) { $get('ctl00_MainContent_UpdateProgress1').style.display = \"none\"; document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-danger alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Error! <br/></strong> Ocurrio un error al procesar su solicitud. Por favor intentelo m√°s tarde\"; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#dvAlert').offset().top }, 'slow'); }, }); } function ValidaCaptcha() { $(\"#ventanaModalCaptcha\").modal(\"show\"); } function AccionCaptcha() { //$(\"#ventanaModalCaptcha\").modal(\"hide\"); // Se habilita cuando este captcha var accion = $(\"#hdnValAccion\").val(); if (accion.split('¬¨')[0] == \"DescargaMasiva\") { validarDescargaMasiva(); } else if (accion.split('¬¨')[0] == \"DescargaMetadata\") { DescargaMetadata(); } else { var uriblob1 = accion.split('¬¨')[1]; validarDescargaUnitaria(uriblob1); } } function testvalidarDescargaMasiva() { var datos = \"api/ValidaDescarga/\" + $('.ListaFolios').filter(':checked').length; PageMethods.RecuperaRepresentacionImpresa(datos, onDescargaMasivaSucceed, onDescargaMasivaFailed); } function onDescargaMasivaSucceed(result, userContext, methodName) { document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-success alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Descarga realizada con √©xito! <br/></strong>\" + result; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#dvAlert').offset().top }, 'slow'); } function onDescargaMasivaFailed(result, userContext, methodName) { document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-danger alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Descarga realizada con √©xito! <br/></strong>\" + result; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#dvAlert').offset().top }, 'slow'); //alert(result); } function validarDescargaMasiva() { var urlValidaDescarga = \"ConsultaEmisor.aspx/ValidarDescarga\"; $.ajax({ url: urlValidaDescarga, type: \"POST\", dataType: \"json\", contentType: 'application/json; charset=utf-8', data: \"{ id: \" + $('.ListaFolios').filter(':checked').length + \" }\", cache: false, async: true, success: function (respuestaValidacion) { if (respuestaValidacion.d) { respuestaValidacion = respuestaValidacion.d; } if (respuestaValidacion.Codigo == 0) { var folioUriDescaga = []; var descargaMasivaUrisModel = {}; var indiceFolio = 0; $(\"input.ListaFolios:checked\").each(function () { var folioDescarga = $(this).val(); var uriDescarga = $(this).parent().find(\"#ListaFoliosUrl\").val(); folioUriDescaga[indiceFolio] = { Folio: folioDescarga, Uri: uriDescarga }; indiceFolio = indiceFolio + 1; }); descargaMasivaUrisModel.FolioUriList = folioUriDescaga; var data = encodeURIComponent($.base64.encode(JSON.stringify(descargaMasivaUrisModel))); $.ajax({ url: \"ConsultaEmisor.aspx/Descargar\", type: \"POST\", dataType: \"json\", contentType: 'application/json; charset=utf-8', cache: false, async: true, data: \"{'param':'\" + data + \"'}\", success: function (respuestaDescarga) { $get('ctl00_MainContent_UpdateProgress1').style.display = \"none\"; document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); if (respuestaDescarga.d.startsWith(\"Error:\")) { newDivSuccess.className = \"alert alert-danger alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Ocurri√≥ un Error en la Descarga! <br/></strong>\" + respuestaDescarga.d.replace(\"Error:\", \"\"); } else { newDivSuccess.className = \"alert alert-success alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Descarga realizada con √©xito! <br/></strong>\" + respuestaDescarga.d; } document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#dvAlert').offset().top }, 'slow'); //alert(respuestaDescarga.d); }, error: function (xhr, ajaxOptions, thrownError) { //alert('Ocurrio un error al registrar la descarga :'); //alert(xhr.responseText); $get('ctl00_MainContent_UpdateProgress1').style.display = \"none\"; document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-danger alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Ocurri√≥ un Error en la Descarga! <br/></strong>\" + xhr.responseText; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#dvAlert').offset().top }, 'slow'); } }); } else { $get('ctl00_MainContent_UpdateProgress1').style.display = \"none\"; //alert(respuestaValidacion.Mensaje); document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-warning alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Precauci√≥n! <br/></strong>\" + respuestaValidacion.Mensaje; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#dvAlert').offset().top }, 'slow'); } }, error: function (errorDetail) { document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-danger alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Error! <br/></strong> Ocurrio un error al procesar su solicitud. Por favor intentelo m√°s tarde\"; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#dvAlert').offset().top }, 'slow'); }, }); } function validarDescargaUnitaria(blobUri) { var urlValidaDescargaUnitaria = \"ConsultaEmisor.aspx/ValidarDescarga\"; var dataParam = 1; $.ajax({ url: urlValidaDescargaUnitaria, type: \"POST\", dataType: \"json\", contentType: 'application/json; charset=utf-8', data: \"{ id:1 }\", cache: false, async: true, success: function (respuestaValidacion) { if (respuestaValidacion.d) { respuestaValidacion = respuestaValidacion.d; } if (respuestaValidacion.Codigo == 0) { var opcionesUnitaria = \"width=5,height=5,scrollbars=yes,menubar=no,status=no,directories=no,location=no,toolbar=no,resizable=yes,titlebar=no\"; window.open(blobUri, \"RecuperacionCFDI\", opcionesUnitaria); } else { $get('ctl00_MainContent_UpdateProgress1').style.display = \"none\"; document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-warning alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Atenci√≥n! <br/></strong> \" + respuestaValidacion.Mensaje; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#dvAlert').offset().top }, 'slow'); //alert(respuestaValidacion.Mensaje); } } }); } //Se agrega manejador de evento para cuando se termine la llamda del UpdatePanel Sys.WebForms.PageRequestManager.getInstance().add_endRequest(endQueryRequest); //function _doPostBack(eventTarget, eventArgument) { // document.forms[0]._EVENTTARGET.value = eventTarget; // document.forms[0]._EVENTARGUMENT.value = eventArgument; // document.forms[0].submit(); //} //Funcic√≥n que Forza la correcci√≥n del renderizado de tablas en IE9 function endQueryRequest(sender, e) { var hfInicialBool = document.getElementById(\"hfInicialBool\"); if (hfInicialBool.value == \"true\") { var ddl = document.getElementById(\"ddlComplementos\"); ddl.selectedIndex = 0; ddl.disabled = true; } if (hfInicialBool.value == \"false\") { var ddl = document.getElementById(\"ddlComplementos\"); ddl.disabled = false; } CorregirTablaResultados(document.getElementById(\"ctl00_MainContent_PnlResultados\")); } var rfcetiqueta; var rfcvalido; $(document).ready(function () { var hfFlag = document.getElementById('hfFlag'); var hfData = document.getElementById('hfDatos'); var hfDescarga = document.getElementById('hfDescarga'); var hfCancelacion = document.getElementById('hfCancelacion'); if (hfFlag.value == \"true\" && hfData.value != null && hfData.value != \"\") { SetValue(); } if (hfFlag.value == \"false\" && hfData.value != null && hfData.value != \"\") { SetValueSinPatron(); } if (hfCancelacion.value == \"NoElementosSeleccionados\") { document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-warning alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Atenci√≥n! <br/></strong> No ha seleccionado folios, seleccione elementos para cancelar.\"; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#ctl00_MainContent_TxtRfcReceptor').offset().top }, 'slow'); //alert('El o los comprobantes ya se encuentran cancelados'); } if (hfCancelacion.value == \"CancelacionesEnProceso\") { document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-warning alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Atenci√≥n! <br/></strong> Uno o m√°s de los elementos seleccionados ya cuenta con un proceso de cancelaci√≥n.\"; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#ctl00_MainContent_TxtRfcReceptor').offset().top }, 'slow'); //alert('El o los comprobantes ya se encuentran cancelados'); } if (hfCancelacion.value == \"ExistenCancelados\") { document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-warning alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Atenci√≥n! <br/></strong> Uno o m√°s de los elementos seleccionados han sido cancelados con anterioridad.\"; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#ctl00_MainContent_TxtRfcReceptor').offset().top }, 'slow'); //alert('El o los comprobantes ya se encuentran cancelados'); } if (hfCancelacion.value == \"ExisteRelacionado\") { document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-warning alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Atenci√≥n! <br/></strong> Ha seleccionado un elemento que tiene relaci√≥n por lo que no puede ser cancelado sin un folio relacionado.\"; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#dvAlert').offset().top }, 'slow'); } if (hfFlag.value == \"false\" && hfData.value == \"\" && hfCancelacion.value == \"\") { document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-warning alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Atenci√≥n! <br/></strong> No se puede realizar la solicitud de cancelaci√≥n ya que uno de los comprobantes no es simplificado.\"; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#dvAlert').offset().top }, 'slow'); } if (hfDescarga.value == \"CuotaParcial\") { document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-warning alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Atenci√≥n! <br/></strong> Est√°s intentando descargas m√°s documentos de los permitidos.\"; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#dvAlert').offset().top }, 'slow'); //alert(\"Est√°s intentando descargas m√°s documentos de los permitidos.\"); } if (hfDescarga.value == \"CuotaCompleta\") { document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-warning alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Atenci√≥n! <br/></strong> Ya no puedes descargar m√°s documentos, espera hasta ma√±ana.\"; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#dvAlert').offset().top }, 'slow'); //alert(\"Ya no puedes descargar m√°s documentos, espera hasta ma√±ana.\"); } if (hfDescarga.value == \"CuotaLibre\") { var opciones = \"width=100,height=50,scrollbars=yes,menubar=no,status=no,directories=no,location=no,toolbar=no,resizable=yes,titlebar=no\"; } $('#ctl00_MainContent_BtnBusqueda').live('click', function () { $(\"#ctl00_MainContent_PnlErrores\").empty(); $(\"#ctl00_MainContent_PnlErrores\").css('display', 'none'); var fechaInicial = $('#ctl00_MainContent_CldFechaInicial2_Calendario_text').val(); var horaInicial = $('#ctl00_MainContent_CldFechaInicial2_DdlHora').val(); var minutoInicial = $('#ctl00_MainContent_CldFechaInicial2_DdlMinuto').val(); var segundoInicial = $('#ctl00_MainContent_CldFechaInicial2_DdlSegundo').val(); var fechaSplitInicial = splitTextoFecha(fechaInicial, '/'); var fechaFinal = $('#ctl00_MainContent_CldFechaFinal2_Calendario_text').val(); var horaFinal = $('#ctl00_MainContent_CldFechaFinal2_DdlHora').val(); var minutoFinal = $('#ctl00_MainContent_CldFechaFinal2_DdlMinuto').val(); var segundoFinal = $('#ctl00_MainContent_CldFechaFinal2_DdlSegundo').val(); var fechaSplitFinal = splitTextoFecha(fechaFinal, '/'); //Se resta uno al valor del mes porque en JavaScript los meses numericamente se representan del 0 - 11 var dateInicial = new Date(fechaSplitInicial[2], parseEntero(fechaSplitInicial[1]) - 1, fechaSplitInicial[0], horaInicial, minutoInicial, segundoInicial, 0); var dateFinal = new Date(fechaSplitFinal[2], parseEntero(fechaSplitFinal[1]) - 1, fechaSplitFinal[0], horaFinal, minutoFinal, segundoFinal, 0); //Se verifica que la fehca final no sea menor a la incial if (dateFinal < dateInicial) { $(\"#ctl00_MainContent_PnlErrores\").append('<ul><li>La fecha inicial no puede ser posterior a la fecha final</li></ul>'); $(\"#ctl00_MainContent_PnlErrores\").css('display', 'inline'); return false; } //Se agrega un a√±o a la fecha incial y esa sera la fecha m√°xima a elegir var maxDate = new Date(dateInicial.getFullYear() + 1, dateInicial.getMonth(), dateInicial.getDate(), dateInicial.getHours(), dateInicial.getMinutes(), dateInicial.getSeconds()); //Se verifica si el mes es diferente, para actual ante la logica de suma del 29 de Febrero, que da como resultado 1 de Marzo if (maxDate.getMonth() != dateInicial.getMonth()) maxDate.setDate(maxDate.getDate() - 1); //Se compara que la fecha final no sea mayor a la fecha m√°xima if (dateFinal > maxDate) { $(\"#ctl00_MainContent_PnlErrores\").append('<ul><li>La consulta esta limitada a rangos de fechas de m√°ximo 12 meses.</li></ul>'); $(\"#ctl00_MainContent_PnlErrores\").css('display', 'inline'); return false; } }); $(\"#ctl00_MainContent_RdoFolioFiscal\").live('click', function () { //$(\"#datepicker\").css('visibility', 'hidden'); //$(\"#datepicker\").css('display', 'none'); //$(\"#datepickeriframe\").css('visibility', 'hidden'); //$(\"#datepickeriframe\").css('display', 'none'); validaRfcAutenticado(); }); $(\"#ctl00_MainContent_BtnBusqueda\").live('mouseover', function (event) { validaRfcAutenticado(); }); $(\"#ctl00_MainContent_BtnCancelar\").live('mouseover', function (event) { validaRfcAutenticado(); }); $(\"#BtnImprimirVisible\").live('click', function (event) { validaRfcAutenticado(); }); $(\"#ctl00_MainContent_BtnImprimir\").live('mouseover', function (event) { validaRfcAutenticado(); }); $(\"#ctl00_MainContent_BtnDescargar\").live('mouseover', function (event) { validaRfcAutenticado(); }); $(\"#ctl00_MainContent_BtnMetadata\").live('mouseover', function (event) { validaRfcAutenticado(); }); $(\"#ctl00_MainContent_RdoFechas\").live('click', function () { validaRfcAutenticado(); }); }); function AccionCfdi(blobUri, argumento) { //if (rfcvalido) { MantieneSesion(); var event = window.event; var opciones = \"\"; if (argumento == \"Detalle\") { opciones = \"width=5,height=5,scrollbars=yes,menubar=no,status=no,directories=no,location=no,toolbar=no,resizable=yes,titlebar=no\"; window.open(blobUri, \"DetalleCfdi\", opciones); } else if (argumento == \"Recuperacion\") { validarDescargaUnitaria(blobUri); } else if (argumento == \"Acuse\") { opciones = \"width=5,height=5,scrollbars=yes,menubar=no,status=no,directories=no,location=no,toolbar=no,resizable=yes,titlebar=no\"; window.open(blobUri, \"AcuseCancelacion\", opciones); } else if (argumento == \"Addenda\") { $('#modalExito').modal('show'); $('#errorFirmadoSL').hide(); $('#hfXML')[0].value = blobUri; } if (event.stopstopPropagation) { event.stopPropagation(); } else { event.cancelBubble = true; } //} } function consultaCuentaTerceros(parametros) { var urlConsultaCuentaTerceros = \"ConsultaEmisor.aspx/ConsultaCuentaTerceros\"; var Parametros = parametros; var data = encodeURIComponent($.base64.encode(Parametros)); $(\"#divResultadosTerceros\").hide(); $(\"#datosTerceros\").html(\"\"); $('#divErrorTerceros').hide(); $.ajax({ url: urlConsultaCuentaTerceros, type: \"POST\", dataType: \"json\", contentType: 'application/json; charset=utf-8', data: \"{'Parametros':'\" + data + \"'}\", cache: false, async: true, success: function (respuestaStr) { respuesta = JSON.parse(respuestaStr.d); if (respuesta.Estatus == 1) { listaTerceros = respuesta.ListCuentaTerceros; var contendTable = \"\"; for (var indice = 0; indice < listaTerceros.length; indice++) { contendTable = contendTable + \"<tr>\"; contendTable = contendTable + '<td>' + listaTerceros[indice].RfcACuentaTerceros + '</td>'; contendTable = contendTable + '<td>' + listaTerceros[indice].NombreACuentaTerceros + '</td>'; contendTable = contendTable + \"</tr>\"; } var params = parametros.split(\"|\"); $(\"#uuidConsultado\").text(params[0]); $(\"#datosTerceros\").html(contendTable); $(\"#divResultadosTerceros\").show(); $('#modalCuentaTerceros').modal('show'); } else { $('#modalCuentaTerceros').modal('show'); $('#divErrorTerceros').show(); $(\"#divResultadosTerceros\").hide(); } }, error: function (errorDetail) { alert(\"Error en la consulta de terceros\"); }, }); } ////Funci√≥n que maneja la seleccion y deseleccion multiple global para cancelaci√≥n function manejaseleccion() { var s = document.getElementById(\"seleccionador\"); var estado = s.checked; $('.ListaFolios').each(function (i, obj) { obj.checked = estado; }); } //Crea y retorna el html para los select de cancelacion de folios function crearSelectMotivoCancelacion(folio) { //var valores_catalogo_motivos_cancelacion = //Los valores de estos arreglos son llenados en el page_load desde el servicio de catalgos; //var textos_catalogo_motivos_cancelacion = //Los valores de estos arreglos son llenados en el page_load desde el servicio de catalgos; var select = document.createElement(\"select\"); select.name = \"ddl\" + folio; select.id = \"ddl\" + folio; for (let i = 0; i <= valores_catalogo_motivos_cancelacion.length - 1; i++) { var option = document.createElement(\"option\"); option.value = valores_catalogo_motivos_cancelacion[i]; option.text = textos_catalogo_motivos_cancelacion[i]; select.appendChild(option); } return select.outerHTML; } //Crea y retorna el html para el input del folio realcionado function CrearInputFolioRelacionado(folio) { var input = document.createElement(\"input\"); input.name = \"input\" + folio; input.id = \"input\" + folio; return input.outerHTML; } //Genera eventos onchange a los combos que se creraron dinamicamente para la cancelacion function AgregaEventoACombosDinamicos() { $(\"input.ListaFolios:checked\").each(function () { document.getElementById('ddl' + $(this).val()).addEventListener('change', function () { //console.log('You selected: ' + this.value + '-' + $(this).val() + this.id.replace('ddl', '')); //console.log(this.value === \"01\"); if (this.value === \"01\") { $(\"#input\" + this.id.replace('ddl', '')).show(); } else { $(\"#input\" + this.id.replace('ddl', '')).val(''); $(\"#input\" + this.id.replace('ddl', '')).hide(); } }); $(\"#input\" + $(this).val()).attr('style','text-transform: uppercase;'); $(\"#input\" + $(this).val()).mask(\"hhhhhhhh-hhhh-hhhh-hhhh-hhhhhhhhhhhh\"); $(\"#input\" + $(this).val()).hide(); }); } function validaMotivosCancelacion() { var expected = true; var errorFormato = false; $(\".error\").remove(); $(\"input.ListaFolios:checked\").each(function () { console.log(\"validando \" + $(this).val() + \": valor seleccionado :\" + $(\"#ddl\" + $(this).val()).val() + \", valor input :\" + $(\"#input\" + $(this).val()).val()); if ($(\"#input\" + $(this).val()).val().indexOf('_') != -1) { console.log(\"debe ingrar un UUID Valido\"); } if ($(\"#ddl\" + $(this).val()).val() === \"00\") { $(\"#ddl\" + $(this).val()).before('<span class=\"error\">*</span>'); expected = false; } //if ($(\"#ddl\" + $(this).val()).val() === \"01\" && $(\"#input\" + $(this).val()).val().replace('_', '').replace('-', '') === \"\") { // $(\"#input\" + $(this).val()).before('<span class=\"error\">*</span>'); // expected = false; //} //if ($(\"#ddl\" + $(this).val()).val() === \"01\" && $(\"#input\" + $(this).val()).val().indexOf('_') != -1) { // $(\"#input\" + $(this).val()).before('<span class=\"error\">**</span>'); // expected = false; // errorFormato = true; //} }); $(\"#errorFirmadoSL_cancelacion\").css(\"display\", ((expected) ? \"none\" : \"block\")); $(\"#errorCliente_cancelacion_formatoUUID\").css(\"display\", ((!errorFormato) ? \"none\" : \"block\")); return expected; } function creaPropiedadJSON(nombre, valor) { var expected = \"\\\"\" + nombre + \"\\\":\" + \"\\\"\" + valor + \"\\\"\"; return expected; } function PrepararJSONCancelacion() { var valido = validaMotivosCancelacion(); if (valido) { console.log('preparando JSON'); var JSONCancelacion = \"[\"; $(\"input.ListaFolios:checked\").each(function () { JSONCancelacion += \"{\" JSONCancelacion += creaPropiedadJSON(\"UUID\", $(this).val()) + \",\"; JSONCancelacion += creaPropiedadJSON(\"Motivo\", $(\"#ddl\" + $(this).val()).val()) + \",\"; JSONCancelacion += creaPropiedadJSON(\"FolioSustitucion\", $(\"#input\" + $(this).val()).val().replace(\"________-____-____-____-____________\",\"\")); JSONCancelacion += \"},\" }); JSONCancelacion += \"]\"; $(\"#hfJSONCancelacion\").val(JSONCancelacion); console.log('JSON preparado ' + $(\"#hfJSONCancelacion\").val()); } return valido; } ////Funci√≥n para mostrar el modal de captura de motivos de cancelaci√≥n function CancelarSeleccionCliente() { $('#dvMotivosCancelacion').empty(); var htmlHeader = \"<tr><th>Folio Fiscal</th><th>Motivo Cancelaci√≥n</th><th>Folio Relacionado</th></tr>\" var htmlTable = \"<table>\" + htmlHeader; $(\"input.ListaFolios:checked\").each(function () { htmlTable += \"<tr >\" ; htmlTable += \"<td ><small><b>\" + $(this).val() + \"</b></small></td>\"; htmlTable += \"<td ><small>\" + crearSelectMotivoCancelacion($(this).val()) + \"</small></td>\"; htmlTable += \"<td ><small>\" + CrearInputFolioRelacionado($(this).val()) + \"</small></td>\"; htmlTable += \"</tr>\" }); htmlTable += \"</table>\"; var tableMotivosCancelacion = document.createElement('div'); tableMotivosCancelacion.innerHTML = htmlTable; document.getElementById('dvMotivosCancelacion').appendChild(tableMotivosCancelacion); AgregaEventoACombosDinamicos(); $('#modalCancelacion').modal('show'); return false; } ////Funci√≥n que maneja la seleccion y deseleccion multiple por elemento para cancelaci√≥n function validaseleccion() { var estado = true; $('.ListaFolios').each(function (i, obj) { if (!(obj.checked)) estado = false; }); var s = document.getElementById(\"seleccionador\"); s.checked = estado; } ////Funci√≥n que oculta los panelers de resultados function ocultaResultados() { $(\"#ctl00_MainContent_PnlResultados\").css('display', 'none'); $(\"#ctl00_MainContent_PnlNoResultados\").css('display', 'none'); } ////Funci√≥n que invoca al metodo de recuperaci√≥n de acuse. function recuperaAcuse(datos) { MantieneSesion(); PageMethods.RecuperaAcuse(datos, onRecuperaAcuseSucceed, onRecuperaAcuseFailed); } function validarCaracteres() { supressUpdatePanelRequestErrorCharacters(\"#ctl00_MainContent_TxtRfcReceptor\"); } function recuperaRepresentacionImpresa(datos) { PageMethods.RecuperaRepresentacionImpresa(datos, onRecuperaRISucceed, onRecuperaRIFailed); } function onRecuperaRISucceed(result, userContext, methodName) { opciones = \"width=5,height=5,scrollbars=no,menubar=no,status=no,directories=no,location=no,toolbar=no,resizable=no,titlebar=no\"; window.open(result, \"RecuperacionRepresentacionImpresa\", opciones); } function onRecuperaRIFailed(result, userContext, methodName) { document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-warning alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Atenci√≥n! <br/></strong> No se ha podido recuperar la representaci√≥n Impresa, por favor intentelo m√°s tarde.\"; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#dvAlert').offset().top }, 'slow'); //alert(\"No se ha podido recuperar la representaci√≥n Impresa, por favor intentelo m√°s tarde.\"); } function onRecuperaAcuseSucceed(result, userContext, methodName) { opciones = \"width=5,height=5,scrollbars=yes,menubar=no,status=no,directories=no,location=no,toolbar=no,resizable=yes,titlebar=no\"; window.open(result, \"RecuperacionAcuseCancelacion\", opciones); } function onRecuperaAcuseFailed(result, userContext, methodName) { document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-warning alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Atenci√≥n! <br/></strong> No se ha podido recuperar el acuse de cancelaci√≥n, por favor intentelo m√°s tarde.\"; document.getElementById('dvAlert').appendChild(newDivSuccess); //alert(\"No se ha podido recuperar el acuse de cancelaci√≥n, por favor intentelo m√°s tarde.\"); } function SetValue() { if (confirm(\"¬øSeguro desea cancelar la seleccion?\")) { document.getElementById('setLinkButton').click(); //$(\"#hiddenFlagCancelacion\").val = \"true\"; //document.forms[\"fulanito\"].action=\"CancelaBeta\" // .submit(); } else { //alert('NO'); } } function SetValueSinPatron() { document.getElementById('setLinkButton').click(); } function Pager(tableName, itemsPerPage) { this.tableName = tableName; this.itemsPerPage = itemsPerPage; this.currentPage = 1; this.pages = 0; this.inited = false; this.showRecords = function (from, to) { var rows = document.getElementById(tableName).rows; // i starts from 1 to skip table header row for (var i = 1; i < rows.length; i++) { if (i < from || i > to) rows[i].style.display = 'none'; else rows[i].style.display = ''; } } this.showPage = function (pageNumber) { if (!this.inited) { alert(\"not inited\"); return; } var oldPageAnchor = document.getElementById('pg' + this.currentPage); oldPageAnchor.className = 'pg-normal'; this.currentPage = pageNumber; var newPageAnchor = document.getElementById('pg' + this.currentPage); newPageAnchor.className = 'pg-selected'; var from = (pageNumber - 1) * itemsPerPage + 1; var to = from + itemsPerPage - 1; this.showRecords(from, to); } this.prev = function () { if (this.currentPage > 1) this.showPage(this.currentPage - 1); } this.next = function () { if (this.currentPage < this.pages) { this.showPage(this.currentPage + 1); } } this.init = function () { var rows = document.getElementById(tableName).rows; var records = (rows.length - 1); this.pages = Math.ceil(records / itemsPerPage); this.inited = true; } this.showPageNav = function (pagerName, positionId) { if (!this.inited) { alert(\"not inited\"); return; } var element = document.getElementById(positionId); var pagerHtml = '<ul class=\"pagination\">'; pagerHtml += '<li onclick=\"' + pagerName + '.prev();\"><a>&laquo;</a></li>'; for (var page = 1; page <= this.pages; page++) pagerHtml += '<li id=\"pg' + page + '\" class=\"pg-normal\" onclick=\"' + pagerName + '.showPage(' + page + ');\"><a>' + page + '</a></li>'; pagerHtml += '<li onclick=\"' + pagerName + '.next();\"><a>&raquo;</a></li>'; element.innerHTML = pagerHtml; } }  \r\n\r\n\r\n//<![CDATA[ var Page_ValidationSummaries = new Array(document.getElementById(\"ctl00_MainContent_ValidationSummary1\")); var Page_Validators = new Array(document.getElementById(\"ctl00_MainContent_CldFechaInicial2_RvFecha\"), document.getElementById(\"ctl00_MainContent_CldFechaFinal2_RvFecha\")); //]]>  //<![CDATA[ var ctl00_MainContent_CldFechaInicial2_RvFecha = document.all ? document.all[\"ctl00_MainContent_CldFechaInicial2_RvFecha\"] : document.getElementById(\"ctl00_MainContent_CldFechaInicial2_RvFecha\"); ctl00_MainContent_CldFechaInicial2_RvFecha.controltovalidate = \"ctl00_MainContent_CldFechaInicial2_Calendario_text\"; ctl00_MainContent_CldFechaInicial2_RvFecha.errormessage = \"ERROR: Favor de proporcionar la fecha inicial de emisi√≥n\"; ctl00_MainContent_CldFechaInicial2_RvFecha.display = \"None\"; ctl00_MainContent_CldFechaInicial2_RvFecha.validationGroup = \"Fechas\"; ctl00_MainContent_CldFechaInicial2_RvFecha.evaluationfunction = \"RequiredFieldValidatorEvaluateIsValid\"; ctl00_MainContent_CldFechaInicial2_RvFecha.initialvalue = \"\"; var ctl00_MainContent_CldFechaFinal2_RvFecha = document.all ? document.all[\"ctl00_MainContent_CldFechaFinal2_RvFecha\"] : document.getElementById(\"ctl00_MainContent_CldFechaFinal2_RvFecha\"); ctl00_MainContent_CldFechaFinal2_RvFecha.controltovalidate = \"ctl00_MainContent_CldFechaFinal2_Calendario_text\"; ctl00_MainContent_CldFechaFinal2_RvFecha.errormessage = \"ERROR: Favor de proporcionar la fecha final de emisi√≥n\"; ctl00_MainContent_CldFechaFinal2_RvFecha.display = \"None\"; ctl00_MainContent_CldFechaFinal2_RvFecha.validationGroup = \"Fechas\"; ctl00_MainContent_CldFechaFinal2_RvFecha.evaluationfunction = \"RequiredFieldValidatorEvaluateIsValid\"; ctl00_MainContent_CldFechaFinal2_RvFecha.initialvalue = \"\"; var ctl00_MainContent_ValidationSummary1 = document.all ? document.all[\"ctl00_MainContent_ValidationSummary1\"] : document.getElementById(\"ctl00_MainContent_ValidationSummary1\"); ctl00_MainContent_ValidationSummary1.validationGroup = \"FolioFiscal\"; //]]>  //<![CDATA[ $(\"#ctl00_MainContent_TxtUUID\").mask(\"hhhhhhhh-hhhh-hhhh-hhhh-hhhhhhhhhhhh\");validarCaracteres();var valores_catalogo_motivos_cancelacion = [\"00\",\"01\",\"02\",\"03\",\"04\"]; var textos_catalogo_motivos_cancelacion = [\"-- Seleccione una opci√≥n--\", \"01-Comprobante emitido con errores con relaci√≥n\",\"02-Comprobante emitido con errores sin relaci√≥n\",\"03-No se llev√≥ a cabo la operaci√≥n\",\"04-Operaci√≥n nominativa relacionada en una factura global\" ]; DefinePosicionInicial();updateDateField(ctl00_MainContent_CldFechaInicial2_SeleccionFecha); EstadoComprobante('-1'); EstadoComprobante('-1'); ConfiguraCombosMac(); var Page_ValidationActive = false; if (typeof(ValidatorOnLoad) == \"function\") { ValidatorOnLoad(); } function ValidatorOnSubmit() { if (Page_ValidationActive) { return ValidatorCommonOnSubmit(); } else { return true; } } (function(id) { var e = document.getElementById(id); if (e) { e.dispose = function() { Array.remove(Page_ValidationSummaries, document.getElementById(id)); } e = null; } })('ctl00_MainContent_ValidationSummary1'); document.getElementById('ctl00_MainContent_CldFechaInicial2_RvFecha').dispose = function() { Array.remove(Page_Validators, document.getElementById('ctl00_MainContent_CldFechaInicial2_RvFecha')); } document.getElementById('ctl00_MainContent_CldFechaFinal2_RvFecha').dispose = function() { Array.remove(Page_Validators, document.getElementById('ctl00_MainContent_CldFechaFinal2_RvFecha')); } Sys.Application.add_init(function() { $create(Sys.UI._UpdateProgress, {\"associatedUpdatePanelId\":null,\"displayAfter\":500,\"dynamicLayout\":true}, null, null, $get(\"ctl00_MainContent_UpdateProgress1\")); }); //]]>","product_name":null},{"type":null,"class_name":null,"name":null,"index":"0","value":null,"id":null,"use_type":false,"use_class_name":false,"use_name":false,"use_index":false,"use_value":false,"use_id":false,"var_type":1,"var_class_name":1,"var_name":1,"var_index":1,"var_id":1,"var_value":1,"properties":[{"name":"Type","variant":0,"value":"text","use":true},{"name":"Index","variant":0,"value":"0","use":false},{"name":"Value","variant":0,"value":"","use":false},{"name":"ClassName","variant":0,"value":"","use":true},{"name":"Name","variant":0,"value":"Interruptor de Navegaci√≥n \r\n\r\n\r\n Factura electr√≥nica \r\n\r\nConsulta CFDI  \r\n\r\nFactura Electr√≥nica\r\n\r\n\r\nRetenciones e Inf. de Pagos\r\n\r\n\r\n\r\nGeneraci√≥n de CFDI \r\n\r\nConfiguraci√≥n de datos V 4.0\r\n\r\n\r\nConfiguraci√≥n de datos V 3.3\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n  Inicio \r\n Consultar Facturas Emitidas\r\n \r\n\r\nRFC Autenticado: AAMD660518TF2 Salir \r\n\r\n\r\n \r\n\r\n\r\nConsultar Facturas Emitidas\r\n\r\n\r\n\r\n\r\n\r\n\r\nFolio Fiscal * \r\n\r\n\r\n\r\n\r\n \r\n\r\n  /* the div that holds the date picker calendar */ .dpDiv { } /* the table (within the div) that holds the date picker calendar */ .dpTable { font-family: Open Sans, Helvetica Neue, Helvetica, Arial, sans-serif; font-size: 18px; line-height: 1.4285; text-align: center; color: #333; background-color: #fff; box-shadow: 0px 2px 7px rgba(0,0,0,0.2); border-radius: 0; width: 300px; height: 300px; } /* the top table row that holds the month, year, and forward/backward buttons */ .dpTitleTR { background-color: #222; } /* the second table row, that holds the names of days of the week (Mo, Tu, We, etc.) */ .dpDayTR { border-bottom: 1px solid #111; } /* a table cell that holds a date number (either blank or 1-31) */ .dpTD { /* border: 1px solid #ece9d8;*/ color: #003399; } /* a table cell that holds a highlighted day (usually either today's date or the current date field value) */ .dpDayHighlightTD { background-color: #ffdf88; } /* the date number table cell that the mouse pointer is currently over (you can use contrasting colors to make it apparent which cell is being hovered over) */ .dpTDHover { background-color: #ffffff; border: 1px solid #888888; cursor: pointer; color: red; } /* the table cell that holds the name of the month and the year */ .dpTitleTD { } /* a table cell that holds one of the forward/backward buttons */ .dpButtonTD { } /* the table cell that holds the \"This Month\" or \"Close\" button at the bottom */ .dpTodayButtonTD { } /* a table cell that holds the names of days of the week (Mo, Tu, We, etc.) */ .dpDayTD { /*background-color: #FFFFFF;*/ /*border: 1px solid #AAAAAA;*/ text-transform: uppercase; font-weight:300; color: #9d9d9d; font-size: 10px; } /* additional style information for the text that indicates the month and year */ .dpTitleText { font-size: 18px; color: #fff; line-height: 1em; text-align: center; } /* additional style information for the cell that holds a highlighted day (usually either today's date or the current date field value) */ .dpDayHighlight { /*color: 4060ff; font-weight: bold;*/ color: #003399; text-decoration: none; } /* the forward/backward buttons at the top */ .dpButton { font-family: Tahoma; font-size: 8pt; color: gray; background: #d8e8ff; font-weight: normal; padding: 0px; } .dpButtonExtra { font-family: Tahoma; font-size: 8pt; color: gray; background: #d8e8ff; font-weight: bold; padding: 0px; margin-left: -8px; } /* the \"This Month\" and \"Close\" buttons at the bottom */ .dpTodayButton { font-family: Tahoma; font-size: 7pt; color: gray; background: #d8e8ff; font-weight: bold; } .surveyTable, .surveytd { border-color: #000000; border-style: solid; font-family: Tahoma; font-size: 10pt; } .surveyTable { /*border-width: 0 0 1px 1px;*/ border-spacing: 0; /*border-collapse: collapse;*/ font-family: Tahoma; font-size: 10pt; } .surveytd { margin: 0; padding: 4px; /*border-width: 1px 1px 0 0;*/ font-family: Tahoma; font-size: 10pt; } .surveyButton { border-top: solid 1px #CCCCCC; background-color: #E5E5E5; font-family: Tahoma; font-size: 10pt; } #DivCalendario { position: absolute; top: 1px; width: 220px; display: none; margin-top: 10px; z-index: 1000; background: white; } #DivTexto { display: block; width: 200px; }  \r\n\r\n\r\nFecha Inicial de Emisi√≥n * \r\n\r\n  \r\n\r\n\r\n00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 \r\n\r\n:\r\n\r\n\r\n00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 \r\n\r\n:\r\n\r\n\r\n00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 \r\n//DataPicker var datePickerDivID = \"datepicker\"; var iFrameDivID = \"datepickeriframe\"; var dayArrayShort = new Array('DOM', 'LUN', 'MAR', 'MIE', 'JUE', 'VIE', 'SAB'); var dayArrayMed = new Array('Dom', 'Lun', 'Mar', 'Mie', 'Jue', 'Vie', 'Sab'); var dayArrayLong = new Array('Domingo', 'Lunes', 'Martes', 'Miercoles', 'Jueves', 'Viernes', 'Sabado'); var monthArrayShort = new Array('Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'); var monthArrayMed = new Array('Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'); var monthArrayLong = new Array('Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'); // these variables define the date formatting we're expecting and outputting. // If you want to use a different format by default, change the defaultDateSeparator // and defaultDateFormat variables either here or on your HTML page. var defaultDateSeparator = \"/\"; // common values would be \"/\" or \".\" var defaultDateFormat = \"mdy\" // valid values are \"mdy\", \"chadmy\", and \"ymd\" var dateSeparator = defaultDateSeparator; var dateFormat = defaultDateFormat; var idCajaTexto = 'ctl00_MainContent_CldFechaInicial2_Calendario_text'; var _CustomAction = null; /** This is the main function you'll call from the onClick event of a button. Normally, you'll have something like this on your HTML page: Start Date: <input name=\"StartDate\"> <input type=button value=\"select\" onclick=\"displayDatePicker('StartDate');\"> That will cause the datepicker to be displayed beneath the StartDate field and any date that is chosen will update the value of that field. If you'd rather have the datepicker display beneath the button that was clicked, you can code the button like this: <input type=button value=\"select\" onclick=\"displayDatePicker('StartDate', this);\"> So, pretty much, the first argument (dateFieldName) is a string representing the name of the field that will be modified if the user picks a date, and the second argument (displayBelowThisObject) is optional and represents an actual node on the HTML document that the datepicker should be displayed below. In version 1.1 of this code, the dtFormat and dtSep variables were added, allowing you to use a specific date format or date separator for a given call to this function. Normally, you'll just want to set these defaults globally with the defaultDateSeparator and defaultDateFormat variables, but it doesn't hurt anything to add them as optional parameters here. An example of use is: <input type=button value=\"select\" onclick=\"displayDatePicker('StartDate', false, 'dmy', '.');\"> This would display the datepicker beneath the StartDate field (because the displayBelowThisObject parameter was false), and update the StartDate field with the chosen value of the datepicker using a date format of dd.mm.yyyy */ function displayDatePicker(dateFieldName, displayBelowThisObject, dtFormat, dtSep) { var targetDateField = document.getElementById(dateFieldName); // this._CustomAction = CustomAction; // // if we weren't told what node to display the datepicker beneath, just display it // beneath the date field we're updating if (!displayBelowThisObject) { displayBelowThisObject = targetDateField; } // if a date separator character was given, update the dateSeparator variable if (dtSep) dateSeparator = dtSep; else dateSeparator = defaultDateSeparator; // if a date format was given, update the dateFormat variable if (dtFormat) dateFormat = dtFormat; else dateFormat = defaultDateFormat; var x = displayBelowThisObject.offsetLeft; var y = displayBelowThisObject.offsetTop + displayBelowThisObject.offsetHeight; // deal with elements inside tables and such var parent = displayBelowThisObject; while (parent.offsetParent) { parent = parent.offsetParent; x += parent.offsetLeft; y += parent.offsetTop; } drawDatePicker(targetDateField, x, y); } /** Draw the datepicker object (which is just a table with calendar elements) at the specified x and y coordinates, using the targetDateField object as the input tag that will ultimately be populated with a date. This function will normally be called by the displayDatePicker function. */ function drawDatePicker(targetDateField, x, y) { var dt = getFieldDate(targetDateField.value); // the datepicker table will be drawn inside of a <div> with an ID defined by the // global datePickerDivID variable. If such a div doesn't yet exist on the HTML // document we're working with, add one. if (!document.getElementById(datePickerDivID)) { // don't use innerHTML to update the body, because it can cause global variables // that are currently pointing to objects on the page to have bad references //document.body.innerHTML += \"<div id='\" + datePickerDivID + \"' class='dpDiv'></div>\"; var newNode = document.createElement(\"div\"); newNode.setAttribute(\"id\", datePickerDivID); newNode.setAttribute(\"class\", \"dpDiv\"); //newNode.setAttribute(\"style\", \"visibility: hidden;\"); document.body.appendChild(newNode); } // move the datepicker div to the proper x,y coordinate and toggle the visiblity var pickerDiv = document.getElementById(datePickerDivID); pickerDiv.style.position = \"absolute\"; pickerDiv.style.left = x + \"px\"; pickerDiv.style.top = y + \"px\"; pickerDiv.style.visibility = (pickerDiv.style.visibility == \"visible\" ? \"hidden\" : \"visible\"); //pickerDiv.style.visibility = \"visible\"; pickerDiv.style.display = (pickerDiv.style.display == \"block\" ? \"none\" : \"block\"); pickerDiv.style.zIndex = 10000; // draw the datepicker table refreshDatePicker(targetDateField.name, dt.getFullYear(), dt.getMonth(), dt.getDate()); } /** This is the function that actually draws the datepicker calendar. */ function refreshDatePicker(dateFieldName, year, month, day) { // if no arguments are passed, use today's date; otherwise, month and year // are required (if a day is passed, it will be highlighted later) var thisDay = new Date(); if ((month >= 0) && (year > 0)) { thisDay = new Date(year, month, 1); } else { day = thisDay.getDate(); thisDay.setDate(1); } // the calendar will be drawn as a table // you can customize the table elements with a global CSS style sheet, // or by hardcoding style and formatting elements below var crlf = \"\\r\\n\"; var TABLE = \"<table cols=7 class='dpTable'>\" + crlf; var xTABLE = \"</table>\" + crlf; var TR = \"<tr class='dpTR'>\"; var TR_title = \"<tr class='dpTitleTR'>\"; var TR_days = \"<tr>\"; var TR_todaybutton = \"<tr class='dpTodayButtonTR'>\"; var xTR = \"</tr>\" + crlf; var TD = \"<td class='dpTD' onMouseOut='this.className=\\\"dpTD\\\";' onMouseOver=' this.className=\\\"dpTDHover\\\";' \"; // leave this tag open, because we'll be adding an onClick event var TD_title = \"<td colspan=5 class='dpTitleTD'>\"; var TD_buttons = \"<td class='dpButtonTD'>\"; var TD_todaybutton = \"<td colspan=7 class='dpTodayButtonTD'>\"; var TD_days = \"<td class='dpDayTD'>\"; var TD_selected = \"<td class='dpDayHighlightTD' onMouseOut='this.className=\\\"dpDayHighlightTD\\\";' onMouseOver='this.className=\\\"dpTDHover\\\";' \"; // leave this tag open, because we'll be adding an onClick event var xTD = \"</td>\" + crlf; var DIV_title = \"<div class='dpTitleText'>\"; var DIV_selected = \"<div class='dpDayHighlight'>\"; var xDIV = \"</div>\"; // start generating the code for the calendar table var html = TABLE; // this is the title bar, which displays the month and the buttons to // go back to a previous month or forward to the next month html += TR_title; html += TD_buttons + getButtonCode(dateFieldName, thisDay, -1, \"&lt;\") + xTD; html += TD_title + DIV_title + monthArrayLong[thisDay.getMonth()] + \" \" + thisDay.getFullYear() + xDIV + xTD; html += TD_buttons + getButtonCode(dateFieldName, thisDay, 1, \"&gt;\") + xTD; html += xTR; // this is the row that indicates which day of the week we're on html += TR_days; for (i = 0; i < dayArrayShort.length; i++) html += TD_days + dayArrayShort[i] + xTD; html += xTR; // now we'll start populating the table with days of the month html += TR; // first, the leading blanks for (i = 0; i < thisDay.getDay(); i++) html += TD + \"&nbsp;\" + xTD; // now, the days of the month do { dayNum = thisDay.getDate(); TD_onclick = \" onclick=\\\"updateDateField('\" + dateFieldName + \"', '\" + getDateString(thisDay) + \"');\\\">\"; if (dayNum == day) html += TD_selected + TD_onclick + DIV_selected + dayNum + xDIV + xTD; else html += TD + TD_onclick + dayNum + xTD; // if this is a Saturday, start a new row if (thisDay.getDay() == 6) html += xTR + TR; // increment the day thisDay.setDate(thisDay.getDate() + 1); } while (thisDay.getDate() > 1) // fill in any trailing blanks if (thisDay.getDay() > 0) { for (i = 6; i > thisDay.getDay(); i--) html += TD + \"&nbsp;\" + xTD; } html += xTR; // add a button to allow the user to easily return to today, or close the calendar var today = new Date(); var todayString = \"Today is \" + dayArrayMed[today.getDay()] + \", \" + monthArrayMed[today.getMonth()] + \" \" + today.getDate(); html += TR_todaybutton + TD_todaybutton; //html += \"<button class='dpTodayButton' onClick='refreshDatePicker(\\\"\" + dateFieldName + \"\\\");'>this month</button> \"; html += \"<button class='dpTodayButton' onClick='updateDateField(\\\"\" + dateFieldName + \"\\\");'>cerrar</button>\"; html += xTD + xTR; // and finally, close the table html += xTABLE; document.getElementById(datePickerDivID).innerHTML = html; // add an \"iFrame shim\" to allow the datepicker to display above selection lists adjustiFrame(); } /** Convenience function for writing the code for the buttons that bring us back or forward a month. */ function getButtonCode(dateFieldName, dateVal, adjust, label) { var newMonth = (dateVal.getMonth() + adjust) % 12; var newYear = dateVal.getFullYear() + parseInt((dateVal.getMonth() + adjust) / 12); if (newMonth < 0) { newMonth += 12; newYear += -1; } return \"<button class='dpButton' onClick='refreshDatePicker(\\\"\" + dateFieldName + \"\\\", \" + newYear + \", \" + newMonth + \");'>\" + label + \"</button>\"; } /** Convert a JavaScript Date object to a string, based on the dateFormat and dateSeparator variables at the beginning of this script library. */ function getDateString(dateVal) { var dayString = \"00\" + dateVal.getDate(); var monthString = \"00\" + (dateVal.getMonth() + 1); dayString = dayString.substring(dayString.length - 2); monthString = monthString.substring(monthString.length - 2); switch (dateFormat) { case \"dmy\": return dayString + dateSeparator + monthString + dateSeparator + dateVal.getFullYear(); case \"ymd\": return dateVal.getFullYear() + dateSeparator + monthString + dateSeparator + dayString; case \"mdy\": default: return monthString + dateSeparator + dayString + dateSeparator + dateVal.getFullYear(); } } /** Convert a string to a JavaScript Date object. */ function getFieldDate(dateString) { var dateVal; var dArray; var d, m, y; try { dArray = splitDateString(dateString); if (dArray) { switch (dateFormat) { case \"dmy\": d = parseInt(dArray[0], 10); m = parseInt(dArray[1], 10) - 1; y = parseInt(dArray[2], 10); break; case \"ymd\": d = parseInt(dArray[2], 10); m = parseInt(dArray[1], 10) - 1; y = parseInt(dArray[0], 10); break; case \"mdy\": default: d = parseInt(dArray[1], 10); m = parseInt(dArray[0], 10) - 1; y = parseInt(dArray[2], 10); break; } dateVal = new Date(y, m, d); } else if (dateString) { dateVal = new Date(dateString); } else { dateVal = new Date(); } } catch (e) { dateVal = new Date(); } return dateVal; } /** Try to split a date string into an array of elements, using common date separators. If the date is split, an array is returned; otherwise, we just return false. */ function splitDateString(dateString) { var dArray; if (dateString.indexOf(\"/\") >= 0) dArray = dateString.split(\"/\"); else if (dateString.indexOf(\".\") >= 0) dArray = dateString.split(\".\"); else if (dateString.indexOf(\"-\") >= 0) dArray = dateString.split(\"-\"); else if (dateString.indexOf(\"\\\\\") >= 0) dArray = dateString.split(\"\\\\\"); else dArray = false; return dArray; } /** Update the field with the given dateFieldName with the dateString that has been passed, and hide the datepicker. If no dateString is passed, just close the datepicker without changing the field value. Also, if the page developer has defined a function called datePickerClosed anywhere on the page or in an imported library, we will attempt to run that function with the updated field as a parameter. This can be used for such things as date validation, setting default values for related fields, etc. For example, you might have a function like this to validate a start date field: function datePickerClosed(dateField) { var dateObj = getFieldDate(dateField.value); var today = new Date(); today = new Date(today.getFullYear(), today.getMonth(), today.getDate()); if (dateField.name == \"StartDate\") { if (dateObj < today) { // if the date is before today, alert the user and display the datepicker again alert(\"Please enter a date that is today or later\"); dateField.value = \"\"; document.getElementById(datePickerDivID).style.visibility = \"visible\"; adjustiFrame(); } else { // if the date is okay, set the EndDate field to 7 days after the StartDate dateObj.setTime(dateObj.getTime() + (7 * 24 * 60 * 60 * 1000)); var endDateField = document.getElementsByName (\"EndDate\").item(0); endDateField.value = getDateString(dateObj); } } } */ function SetDDL(targetField, dateFieldName, dateString) { var StartDate = 2014; var EndDate = 2014; var IsInicial = dateFieldName.indexOf(\"FechaInicial\"); var IsFinal = dateFieldName.indexOf(\"FechaFinal\"); var hfInicial = document.getElementById(\"hfInicial\"); var hfFinal = document.getElementById(\"hfFinal\"); if(IsInicial > -1) { hfInicial.value = dateString; hfInicial.value = getFieldDate(hfInicial.value).getFullYear(); } if(IsFinal > -1) { hfFinal.value = dateString; hfFinal.value = getFieldDate(hfFinal.value).getFullYear(); } if(hfInicial.value != \"\") { StartDate = hfInicial.value; } if(hfFinal.value != \"\") { EndDate = hfFinal.value; } //var dt = getFieldDate(targetField.value); //var year = dt.getFullYear(); //alert(targetField.id); var ddl = document.getElementById(\"ctl00_MainContent_ddlComplementos\"); var passed = true; if(StartDate < 2014 || EndDate < 2014) { passed = false; } if(!passed) { var hfInicialBool = document.getElementById(\"hfInicialBool\"); hfInicialBool.value = \"true\"; if(ddl != null) { ddl.selectedIndex=0; ddl.disabled= true; } } if(passed) { var hfInicialBool = document.getElementById(\"hfInicialBool\"); hfInicialBool.value = \"false\"; if(ddl != null) ddl.disabled= false; } } function updateDateField(dateFieldName, dateString) { var targetDateField = document.getElementsByName(dateFieldName).item(0); if (dateString) { //var Contenedor = $('#'+ dateFieldName); var idDependiente = '#' + $(targetDateField).attr('dependiente'); if (false) { $(idDependiente + '_Calendario_text').val(dateString); //$(idDependiente + '_DdlHora').val(\"23\"); var opHora = $(idDependiente + '_DdlHora').find(\"option[value=23]\"); $(idDependiente + '_DdlHora').selectbox(\"change\", opHora.attr('value'), opHora.html()); //$(idDependiente + '_DdlMinuto').val(\"59\"); var opMinuto = $(idDependiente + '_DdlMinuto').find(\"option[value=59]\"); $(idDependiente + '_DdlMinuto').selectbox(\"change\", opMinuto.attr('value'), opMinuto.html()); //$(idDependiente + '_DdlSegundo').val(\"59\"); var opSegundo = $(idDependiente + '_DdlSegundo').find(\"option[value=59]\"); $(idDependiente + '_DdlSegundo').selectbox(\"change\", opSegundo.attr('value'), opSegundo.html()); } targetDateField.value = dateString; if (this._CustomAction != null) this._CustomAction(dateString); SetDDL(targetDateField, dateFieldName, dateString); } // targetDateField.fireEvent('onchange'); var pickerDiv = document.getElementById(datePickerDivID); if(pickerDiv != null) { pickerDiv.style.visibility = \"hidden\"; pickerDiv.style.display = \"none\"; adjustiFrame(); // after the datepicker has closed, optionally run a user-defined function called // datePickerClosed, passing the field that was just updated as a parameter // (note that this will only run if the user actually selected a date from the datepicker) if ((dateString) && (typeof (datePickerClosed) == \"function\")) datePickerClosed(targetDateField); } } /** Use an \"iFrame shim\" to deal with problems where the datepicker shows up behind selection list elements, if they're below the datepicker. */ function adjustiFrame(pickerDiv, iFrameDiv) { // we know that Opera doesn't like something about this, so if we // think we're using Opera, don't even try var is_opera = (navigator.userAgent.toLowerCase().indexOf(\"opera\") != -1); if (is_opera) return; // put a try/catch block around the whole thing, just in case try { if (!document.getElementById(iFrameDivID)) { // don't use innerHTML to update the body, because it can cause global variables // that are currently pointing to objects on the page to have bad references //document.body.innerHTML += \"<iframe id='\" + iFrameDivID + \"' src='javascript:false;' scrolling='no' frameborder='0'>\"; var newNode = document.createElement(\"iFrame\"); newNode.setAttribute(\"id\", iFrameDivID); // newNode.setAttribute(\"src\", \"javascript:false;\"); newNode.setAttribute(\"scrolling\", \"no\"); newNode.setAttribute(\"frameborder\", \"0\"); document.body.appendChild(newNode); } if (!pickerDiv) pickerDiv = document.getElementById(datePickerDivID); if (!iFrameDiv) iFrameDiv = document.getElementById(iFrameDivID); try { iFrameDiv.style.position = \"absolute\"; iFrameDiv.style.width = pickerDiv.offsetWidth; iFrameDiv.style.height = pickerDiv.offsetHeight; iFrameDiv.style.top = pickerDiv.style.top; iFrameDiv.style.left = pickerDiv.style.left; iFrameDiv.style.zIndex = pickerDiv.style.zIndex - 1; iFrameDiv.style.visibility = pickerDiv.style.visibility; iFrameDiv.style.display = pickerDiv.style.display; } catch (e) { } } catch (ee) { } } /* Function Ends for calendar chk line 379 for doubts*/ /// ////Define la posici√≥n en donde aparecer√° el calendario. function DefinePosicionCalendario(NombreContenedor, NombreEtiqueta, NombreCaja) { var lblFecha = $(NombreEtiqueta); //Instancia de la etiqueta var txtFecha = $(NombreCaja); //Instancia de la caja de texto var TopCalendario = txtFecha.offset().top + txtFecha.height(); //Posici√≥n del calendario var Contenedor = $(NombreContenedor).children(\"#SeleccionFecha\"); Contenedor.children(\"#DivCalendario\").css('left', txtFecha.offset().left).css('top', TopCalendario); } // ////Define las posiciones iniciales de los controles. function DefinePosicionInicial() { var lblFecha = $(\"#ctl00_MainContent_CldFechaInicial2_LblFecha\"); //Instancia de la etiqueta var txtFecha = $(\"#\" + idCajaTexto); //Instancia de la caja de texto var ancho = $(\"#DivTexto\").width() + lblFecha.width(); //Se obtiene el ancho del div principal var LeftBotonFecha = lblFecha.position().left + lblFecha.width() + txtFecha.width(); // Se obtiene la posisici√≥n del bot√≥n var TopDivTexto = parseInt(lblFecha.height() / 2) - parseInt($(\"#DivTexto\").height() / 2); //Se obtiene la posicion vertical de la caja de texto y del bot√≥n var Contenedor = $(\"#ctl00_MainContent_CldFechaInicial2_UpnlSeleccionFecha\").children(\"#SeleccionFecha\"); Contenedor.children(\"#SeleccionFecha\").width(ancho); } function ConfiguraCombosMac() { var isMac = navigator.userAgent.indexOf(\"Macintosh\") if(isMac != -1) $(document.getElementsByClassName(\"calendarCombo\")).css(\"width\", \"45px\"); } $(function() { DefinePosicionInicial(); //Se establece la acci√≥n para mostrar el calendario $(\"#ctl00_MainContent_CldFechaInicial2_BtnFecha2\").live('click', function() { if ($(\"#ctl00_MainContent_CldFechaInicial2_BtnFecha2\").attr('habilitado') == \"true\") { var cajaTexto = $(this).parent().find(\":input\"); displayDatePicker(cajaTexto.attr('id'), false, 'dmy', '/'); } }); });  \r\n\r\n /* the div that holds the date picker calendar */ .dpDiv { } /* the table (within the div) that holds the date picker calendar */ .dpTable { font-family: Open Sans, Helvetica Neue, Helvetica, Arial, sans-serif; font-size: 18px; line-height: 1.4285; text-align: center; color: #333; background-color: #fff; box-shadow: 0px 2px 7px rgba(0,0,0,0.2); border-radius: 0; width: 300px; height: 300px; } /* the top table row that holds the month, year, and forward/backward buttons */ .dpTitleTR { background-color: #222; } /* the second table row, that holds the names of days of the week (Mo, Tu, We, etc.) */ .dpDayTR { border-bottom: 1px solid #111; } /* a table cell that holds a date number (either blank or 1-31) */ .dpTD { /* border: 1px solid #ece9d8;*/ color: #003399; } /* a table cell that holds a highlighted day (usually either today's date or the current date field value) */ .dpDayHighlightTD { background-color: #ffdf88; } /* the date number table cell that the mouse pointer is currently over (you can use contrasting colors to make it apparent which cell is being hovered over) */ .dpTDHover { background-color: #ffffff; border: 1px solid #888888; cursor: pointer; color: red; } /* the table cell that holds the name of the month and the year */ .dpTitleTD { } /* a table cell that holds one of the forward/backward buttons */ .dpButtonTD { } /* the table cell that holds the \"This Month\" or \"Close\" button at the bottom */ .dpTodayButtonTD { } /* a table cell that holds the names of days of the week (Mo, Tu, We, etc.) */ .dpDayTD { /*background-color: #FFFFFF;*/ /*border: 1px solid #AAAAAA;*/ text-transform: uppercase; font-weight:300; color: #9d9d9d; font-size: 10px; } /* additional style information for the text that indicates the month and year */ .dpTitleText { font-size: 18px; color: #fff; line-height: 1em; text-align: center; } /* additional style information for the cell that holds a highlighted day (usually either today's date or the current date field value) */ .dpDayHighlight { /*color: 4060ff; font-weight: bold;*/ color: #003399; text-decoration: none; } /* the forward/backward buttons at the top */ .dpButton { font-family: Tahoma; font-size: 8pt; color: gray; background: #d8e8ff; font-weight: normal; padding: 0px; } .dpButtonExtra { font-family: Tahoma; font-size: 8pt; color: gray; background: #d8e8ff; font-weight: bold; padding: 0px; margin-left: -8px; } /* the \"This Month\" and \"Close\" buttons at the bottom */ .dpTodayButton { font-family: Tahoma; font-size: 7pt; color: gray; background: #d8e8ff; font-weight: bold; } .surveyTable, .surveytd { border-color: #000000; border-style: solid; font-family: Tahoma; font-size: 10pt; } .surveyTable { /*border-width: 0 0 1px 1px;*/ border-spacing: 0; /*border-collapse: collapse;*/ font-family: Tahoma; font-size: 10pt; } .surveytd { margin: 0; padding: 4px; /*border-width: 1px 1px 0 0;*/ font-family: Tahoma; font-size: 10pt; } .surveyButton { border-top: solid 1px #CCCCCC; background-color: #E5E5E5; font-family: Tahoma; font-size: 10pt; } #DivCalendario { position: absolute; top: 1px; width: 220px; display: none; margin-top: 10px; z-index: 1000; background: white; } #DivTexto { display: block; width: 200px; }  \r\n\r\n\r\nFecha Final de Emisi√≥n * \r\n\r\n  \r\n\r\n\r\n00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 \r\n\r\n:\r\n\r\n\r\n00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 \r\n\r\n:\r\n\r\n\r\n00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 \r\n//DataPicker var datePickerDivID = \"datepicker\"; var iFrameDivID = \"datepickeriframe\"; var dayArrayShort = new Array('DOM', 'LUN', 'MAR', 'MIE', 'JUE', 'VIE', 'SAB'); var dayArrayMed = new Array('Dom', 'Lun', 'Mar', 'Mie', 'Jue', 'Vie', 'Sab'); var dayArrayLong = new Array('Domingo', 'Lunes', 'Martes', 'Miercoles', 'Jueves', 'Viernes', 'Sabado'); var monthArrayShort = new Array('Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'); var monthArrayMed = new Array('Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'); var monthArrayLong = new Array('Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'); // these variables define the date formatting we're expecting and outputting. // If you want to use a different format by default, change the defaultDateSeparator // and defaultDateFormat variables either here or on your HTML page. var defaultDateSeparator = \"/\"; // common values would be \"/\" or \".\" var defaultDateFormat = \"mdy\" // valid values are \"mdy\", \"chadmy\", and \"ymd\" var dateSeparator = defaultDateSeparator; var dateFormat = defaultDateFormat; var idCajaTexto = 'ctl00_MainContent_CldFechaFinal2_Calendario_text'; var _CustomAction = null; /** This is the main function you'll call from the onClick event of a button. Normally, you'll have something like this on your HTML page: Start Date: <input name=\"StartDate\"> <input type=button value=\"select\" onclick=\"displayDatePicker('StartDate');\"> That will cause the datepicker to be displayed beneath the StartDate field and any date that is chosen will update the value of that field. If you'd rather have the datepicker display beneath the button that was clicked, you can code the button like this: <input type=button value=\"select\" onclick=\"displayDatePicker('StartDate', this);\"> So, pretty much, the first argument (dateFieldName) is a string representing the name of the field that will be modified if the user picks a date, and the second argument (displayBelowThisObject) is optional and represents an actual node on the HTML document that the datepicker should be displayed below. In version 1.1 of this code, the dtFormat and dtSep variables were added, allowing you to use a specific date format or date separator for a given call to this function. Normally, you'll just want to set these defaults globally with the defaultDateSeparator and defaultDateFormat variables, but it doesn't hurt anything to add them as optional parameters here. An example of use is: <input type=button value=\"select\" onclick=\"displayDatePicker('StartDate', false, 'dmy', '.');\"> This would display the datepicker beneath the StartDate field (because the displayBelowThisObject parameter was false), and update the StartDate field with the chosen value of the datepicker using a date format of dd.mm.yyyy */ function displayDatePicker(dateFieldName, displayBelowThisObject, dtFormat, dtSep) { var targetDateField = document.getElementById(dateFieldName); // this._CustomAction = CustomAction; // // if we weren't told what node to display the datepicker beneath, just display it // beneath the date field we're updating if (!displayBelowThisObject) { displayBelowThisObject = targetDateField; } // if a date separator character was given, update the dateSeparator variable if (dtSep) dateSeparator = dtSep; else dateSeparator = defaultDateSeparator; // if a date format was given, update the dateFormat variable if (dtFormat) dateFormat = dtFormat; else dateFormat = defaultDateFormat; var x = displayBelowThisObject.offsetLeft; var y = displayBelowThisObject.offsetTop + displayBelowThisObject.offsetHeight; // deal with elements inside tables and such var parent = displayBelowThisObject; while (parent.offsetParent) { parent = parent.offsetParent; x += parent.offsetLeft; y += parent.offsetTop; } drawDatePicker(targetDateField, x, y); } /** Draw the datepicker object (which is just a table with calendar elements) at the specified x and y coordinates, using the targetDateField object as the input tag that will ultimately be populated with a date. This function will normally be called by the displayDatePicker function. */ function drawDatePicker(targetDateField, x, y) { var dt = getFieldDate(targetDateField.value); // the datepicker table will be drawn inside of a <div> with an ID defined by the // global datePickerDivID variable. If such a div doesn't yet exist on the HTML // document we're working with, add one. if (!document.getElementById(datePickerDivID)) { // don't use innerHTML to update the body, because it can cause global variables // that are currently pointing to objects on the page to have bad references //document.body.innerHTML += \"<div id='\" + datePickerDivID + \"' class='dpDiv'></div>\"; var newNode = document.createElement(\"div\"); newNode.setAttribute(\"id\", datePickerDivID); newNode.setAttribute(\"class\", \"dpDiv\"); //newNode.setAttribute(\"style\", \"visibility: hidden;\"); document.body.appendChild(newNode); } // move the datepicker div to the proper x,y coordinate and toggle the visiblity var pickerDiv = document.getElementById(datePickerDivID); pickerDiv.style.position = \"absolute\"; pickerDiv.style.left = x + \"px\"; pickerDiv.style.top = y + \"px\"; pickerDiv.style.visibility = (pickerDiv.style.visibility == \"visible\" ? \"hidden\" : \"visible\"); //pickerDiv.style.visibility = \"visible\"; pickerDiv.style.display = (pickerDiv.style.display == \"block\" ? \"none\" : \"block\"); pickerDiv.style.zIndex = 10000; // draw the datepicker table refreshDatePicker(targetDateField.name, dt.getFullYear(), dt.getMonth(), dt.getDate()); } /** This is the function that actually draws the datepicker calendar. */ function refreshDatePicker(dateFieldName, year, month, day) { // if no arguments are passed, use today's date; otherwise, month and year // are required (if a day is passed, it will be highlighted later) var thisDay = new Date(); if ((month >= 0) && (year > 0)) { thisDay = new Date(year, month, 1); } else { day = thisDay.getDate(); thisDay.setDate(1); } // the calendar will be drawn as a table // you can customize the table elements with a global CSS style sheet, // or by hardcoding style and formatting elements below var crlf = \"\\r\\n\"; var TABLE = \"<table cols=7 class='dpTable'>\" + crlf; var xTABLE = \"</table>\" + crlf; var TR = \"<tr class='dpTR'>\"; var TR_title = \"<tr class='dpTitleTR'>\"; var TR_days = \"<tr>\"; var TR_todaybutton = \"<tr class='dpTodayButtonTR'>\"; var xTR = \"</tr>\" + crlf; var TD = \"<td class='dpTD' onMouseOut='this.className=\\\"dpTD\\\";' onMouseOver=' this.className=\\\"dpTDHover\\\";' \"; // leave this tag open, because we'll be adding an onClick event var TD_title = \"<td colspan=5 class='dpTitleTD'>\"; var TD_buttons = \"<td class='dpButtonTD'>\"; var TD_todaybutton = \"<td colspan=7 class='dpTodayButtonTD'>\"; var TD_days = \"<td class='dpDayTD'>\"; var TD_selected = \"<td class='dpDayHighlightTD' onMouseOut='this.className=\\\"dpDayHighlightTD\\\";' onMouseOver='this.className=\\\"dpTDHover\\\";' \"; // leave this tag open, because we'll be adding an onClick event var xTD = \"</td>\" + crlf; var DIV_title = \"<div class='dpTitleText'>\"; var DIV_selected = \"<div class='dpDayHighlight'>\"; var xDIV = \"</div>\"; // start generating the code for the calendar table var html = TABLE; // this is the title bar, which displays the month and the buttons to // go back to a previous month or forward to the next month html += TR_title; html += TD_buttons + getButtonCode(dateFieldName, thisDay, -1, \"&lt;\") + xTD; html += TD_title + DIV_title + monthArrayLong[thisDay.getMonth()] + \" \" + thisDay.getFullYear() + xDIV + xTD; html += TD_buttons + getButtonCode(dateFieldName, thisDay, 1, \"&gt;\") + xTD; html += xTR; // this is the row that indicates which day of the week we're on html += TR_days; for (i = 0; i < dayArrayShort.length; i++) html += TD_days + dayArrayShort[i] + xTD; html += xTR; // now we'll start populating the table with days of the month html += TR; // first, the leading blanks for (i = 0; i < thisDay.getDay(); i++) html += TD + \"&nbsp;\" + xTD; // now, the days of the month do { dayNum = thisDay.getDate(); TD_onclick = \" onclick=\\\"updateDateField('\" + dateFieldName + \"', '\" + getDateString(thisDay) + \"');\\\">\"; if (dayNum == day) html += TD_selected + TD_onclick + DIV_selected + dayNum + xDIV + xTD; else html += TD + TD_onclick + dayNum + xTD; // if this is a Saturday, start a new row if (thisDay.getDay() == 6) html += xTR + TR; // increment the day thisDay.setDate(thisDay.getDate() + 1); } while (thisDay.getDate() > 1) // fill in any trailing blanks if (thisDay.getDay() > 0) { for (i = 6; i > thisDay.getDay(); i--) html += TD + \"&nbsp;\" + xTD; } html += xTR; // add a button to allow the user to easily return to today, or close the calendar var today = new Date(); var todayString = \"Today is \" + dayArrayMed[today.getDay()] + \", \" + monthArrayMed[today.getMonth()] + \" \" + today.getDate(); html += TR_todaybutton + TD_todaybutton; //html += \"<button class='dpTodayButton' onClick='refreshDatePicker(\\\"\" + dateFieldName + \"\\\");'>this month</button> \"; html += \"<button class='dpTodayButton' onClick='updateDateField(\\\"\" + dateFieldName + \"\\\");'>cerrar</button>\"; html += xTD + xTR; // and finally, close the table html += xTABLE; document.getElementById(datePickerDivID).innerHTML = html; // add an \"iFrame shim\" to allow the datepicker to display above selection lists adjustiFrame(); } /** Convenience function for writing the code for the buttons that bring us back or forward a month. */ function getButtonCode(dateFieldName, dateVal, adjust, label) { var newMonth = (dateVal.getMonth() + adjust) % 12; var newYear = dateVal.getFullYear() + parseInt((dateVal.getMonth() + adjust) / 12); if (newMonth < 0) { newMonth += 12; newYear += -1; } return \"<button class='dpButton' onClick='refreshDatePicker(\\\"\" + dateFieldName + \"\\\", \" + newYear + \", \" + newMonth + \");'>\" + label + \"</button>\"; } /** Convert a JavaScript Date object to a string, based on the dateFormat and dateSeparator variables at the beginning of this script library. */ function getDateString(dateVal) { var dayString = \"00\" + dateVal.getDate(); var monthString = \"00\" + (dateVal.getMonth() + 1); dayString = dayString.substring(dayString.length - 2); monthString = monthString.substring(monthString.length - 2); switch (dateFormat) { case \"dmy\": return dayString + dateSeparator + monthString + dateSeparator + dateVal.getFullYear(); case \"ymd\": return dateVal.getFullYear() + dateSeparator + monthString + dateSeparator + dayString; case \"mdy\": default: return monthString + dateSeparator + dayString + dateSeparator + dateVal.getFullYear(); } } /** Convert a string to a JavaScript Date object. */ function getFieldDate(dateString) { var dateVal; var dArray; var d, m, y; try { dArray = splitDateString(dateString); if (dArray) { switch (dateFormat) { case \"dmy\": d = parseInt(dArray[0], 10); m = parseInt(dArray[1], 10) - 1; y = parseInt(dArray[2], 10); break; case \"ymd\": d = parseInt(dArray[2], 10); m = parseInt(dArray[1], 10) - 1; y = parseInt(dArray[0], 10); break; case \"mdy\": default: d = parseInt(dArray[1], 10); m = parseInt(dArray[0], 10) - 1; y = parseInt(dArray[2], 10); break; } dateVal = new Date(y, m, d); } else if (dateString) { dateVal = new Date(dateString); } else { dateVal = new Date(); } } catch (e) { dateVal = new Date(); } return dateVal; } /** Try to split a date string into an array of elements, using common date separators. If the date is split, an array is returned; otherwise, we just return false. */ function splitDateString(dateString) { var dArray; if (dateString.indexOf(\"/\") >= 0) dArray = dateString.split(\"/\"); else if (dateString.indexOf(\".\") >= 0) dArray = dateString.split(\".\"); else if (dateString.indexOf(\"-\") >= 0) dArray = dateString.split(\"-\"); else if (dateString.indexOf(\"\\\\\") >= 0) dArray = dateString.split(\"\\\\\"); else dArray = false; return dArray; } /** Update the field with the given dateFieldName with the dateString that has been passed, and hide the datepicker. If no dateString is passed, just close the datepicker without changing the field value. Also, if the page developer has defined a function called datePickerClosed anywhere on the page or in an imported library, we will attempt to run that function with the updated field as a parameter. This can be used for such things as date validation, setting default values for related fields, etc. For example, you might have a function like this to validate a start date field: function datePickerClosed(dateField) { var dateObj = getFieldDate(dateField.value); var today = new Date(); today = new Date(today.getFullYear(), today.getMonth(), today.getDate()); if (dateField.name == \"StartDate\") { if (dateObj < today) { // if the date is before today, alert the user and display the datepicker again alert(\"Please enter a date that is today or later\"); dateField.value = \"\"; document.getElementById(datePickerDivID).style.visibility = \"visible\"; adjustiFrame(); } else { // if the date is okay, set the EndDate field to 7 days after the StartDate dateObj.setTime(dateObj.getTime() + (7 * 24 * 60 * 60 * 1000)); var endDateField = document.getElementsByName (\"EndDate\").item(0); endDateField.value = getDateString(dateObj); } } } */ function SetDDL(targetField, dateFieldName, dateString) { var StartDate = 2014; var EndDate = 2014; var IsInicial = dateFieldName.indexOf(\"FechaInicial\"); var IsFinal = dateFieldName.indexOf(\"FechaFinal\"); var hfInicial = document.getElementById(\"hfInicial\"); var hfFinal = document.getElementById(\"hfFinal\"); if(IsInicial > -1) { hfInicial.value = dateString; hfInicial.value = getFieldDate(hfInicial.value).getFullYear(); } if(IsFinal > -1) { hfFinal.value = dateString; hfFinal.value = getFieldDate(hfFinal.value).getFullYear(); } if(hfInicial.value != \"\") { StartDate = hfInicial.value; } if(hfFinal.value != \"\") { EndDate = hfFinal.value; } //var dt = getFieldDate(targetField.value); //var year = dt.getFullYear(); //alert(targetField.id); var ddl = document.getElementById(\"ctl00_MainContent_ddlComplementos\"); var passed = true; if(StartDate < 2014 || EndDate < 2014) { passed = false; } if(!passed) { var hfInicialBool = document.getElementById(\"hfInicialBool\"); hfInicialBool.value = \"true\"; if(ddl != null) { ddl.selectedIndex=0; ddl.disabled= true; } } if(passed) { var hfInicialBool = document.getElementById(\"hfInicialBool\"); hfInicialBool.value = \"false\"; if(ddl != null) ddl.disabled= false; } } function updateDateField(dateFieldName, dateString) { var targetDateField = document.getElementsByName(dateFieldName).item(0); if (dateString) { //var Contenedor = $('#'+ dateFieldName); var idDependiente = '#' + $(targetDateField).attr('dependiente'); if (true) { $(idDependiente + '_Calendario_text').val(dateString); //$(idDependiente + '_DdlHora').val(\"23\"); var opHora = $(idDependiente + '_DdlHora').find(\"option[value=23]\"); $(idDependiente + '_DdlHora').selectbox(\"change\", opHora.attr('value'), opHora.html()); //$(idDependiente + '_DdlMinuto').val(\"59\"); var opMinuto = $(idDependiente + '_DdlMinuto').find(\"option[value=59]\"); $(idDependiente + '_DdlMinuto').selectbox(\"change\", opMinuto.attr('value'), opMinuto.html()); //$(idDependiente + '_DdlSegundo').val(\"59\"); var opSegundo = $(idDependiente + '_DdlSegundo').find(\"option[value=59]\"); $(idDependiente + '_DdlSegundo').selectbox(\"change\", opSegundo.attr('value'), opSegundo.html()); } targetDateField.value = dateString; if (this._CustomAction != null) this._CustomAction(dateString); SetDDL(targetDateField, dateFieldName, dateString); } // targetDateField.fireEvent('onchange'); var pickerDiv = document.getElementById(datePickerDivID); if(pickerDiv != null) { pickerDiv.style.visibility = \"hidden\"; pickerDiv.style.display = \"none\"; adjustiFrame(); // after the datepicker has closed, optionally run a user-defined function called // datePickerClosed, passing the field that was just updated as a parameter // (note that this will only run if the user actually selected a date from the datepicker) if ((dateString) && (typeof (datePickerClosed) == \"function\")) datePickerClosed(targetDateField); } } /** Use an \"iFrame shim\" to deal with problems where the datepicker shows up behind selection list elements, if they're below the datepicker. */ function adjustiFrame(pickerDiv, iFrameDiv) { // we know that Opera doesn't like something about this, so if we // think we're using Opera, don't even try var is_opera = (navigator.userAgent.toLowerCase().indexOf(\"opera\") != -1); if (is_opera) return; // put a try/catch block around the whole thing, just in case try { if (!document.getElementById(iFrameDivID)) { // don't use innerHTML to update the body, because it can cause global variables // that are currently pointing to objects on the page to have bad references //document.body.innerHTML += \"<iframe id='\" + iFrameDivID + \"' src='javascript:false;' scrolling='no' frameborder='0'>\"; var newNode = document.createElement(\"iFrame\"); newNode.setAttribute(\"id\", iFrameDivID); // newNode.setAttribute(\"src\", \"javascript:false;\"); newNode.setAttribute(\"scrolling\", \"no\"); newNode.setAttribute(\"frameborder\", \"0\"); document.body.appendChild(newNode); } if (!pickerDiv) pickerDiv = document.getElementById(datePickerDivID); if (!iFrameDiv) iFrameDiv = document.getElementById(iFrameDivID); try { iFrameDiv.style.position = \"absolute\"; iFrameDiv.style.width = pickerDiv.offsetWidth; iFrameDiv.style.height = pickerDiv.offsetHeight; iFrameDiv.style.top = pickerDiv.style.top; iFrameDiv.style.left = pickerDiv.style.left; iFrameDiv.style.zIndex = pickerDiv.style.zIndex - 1; iFrameDiv.style.visibility = pickerDiv.style.visibility; iFrameDiv.style.display = pickerDiv.style.display; } catch (e) { } } catch (ee) { } } /* Function Ends for calendar chk line 379 for doubts*/ /// ////Define la posici√≥n en donde aparecer√° el calendario. function DefinePosicionCalendario(NombreContenedor, NombreEtiqueta, NombreCaja) { var lblFecha = $(NombreEtiqueta); //Instancia de la etiqueta var txtFecha = $(NombreCaja); //Instancia de la caja de texto var TopCalendario = txtFecha.offset().top + txtFecha.height(); //Posici√≥n del calendario var Contenedor = $(NombreContenedor).children(\"#SeleccionFecha\"); Contenedor.children(\"#DivCalendario\").css('left', txtFecha.offset().left).css('top', TopCalendario); } // ////Define las posiciones iniciales de los controles. function DefinePosicionInicial() { var lblFecha = $(\"#ctl00_MainContent_CldFechaFinal2_LblFecha\"); //Instancia de la etiqueta var txtFecha = $(\"#\" + idCajaTexto); //Instancia de la caja de texto var ancho = $(\"#DivTexto\").width() + lblFecha.width(); //Se obtiene el ancho del div principal var LeftBotonFecha = lblFecha.position().left + lblFecha.width() + txtFecha.width(); // Se obtiene la posisici√≥n del bot√≥n var TopDivTexto = parseInt(lblFecha.height() / 2) - parseInt($(\"#DivTexto\").height() / 2); //Se obtiene la posicion vertical de la caja de texto y del bot√≥n var Contenedor = $(\"#ctl00_MainContent_CldFechaFinal2_UpnlSeleccionFecha\").children(\"#SeleccionFecha\"); Contenedor.children(\"#SeleccionFecha\").width(ancho); } function ConfiguraCombosMac() { var isMac = navigator.userAgent.indexOf(\"Macintosh\") if(isMac != -1) $(document.getElementsByClassName(\"calendarCombo\")).css(\"width\", \"45px\"); } $(function() { DefinePosicionInicial(); //Se establece la acci√≥n para mostrar el calendario $(\"#ctl00_MainContent_CldFechaFinal2_BtnFecha2\").live('click', function() { if ($(\"#ctl00_MainContent_CldFechaFinal2_BtnFecha2\").attr('habilitado') == \"true\") { var cajaTexto = $(this).parent().find(\":input\"); displayDatePicker(cajaTexto.attr('id'), false, 'dmy', '/'); } }); });  \r\n\r\n\r\nRFC Receptor \r\n\r\nRFC a cuenta terceros \r\n\r\nEstado del Comprobante \r\n\r\n\r\n\r\n\r\n\r\n\r\nSeleccione un valor... Cancelado Vigente \r\n\r\n\r\n\r\nTipo de Comprobante (Complemento) \r\n\r\nEstatus Cancelaci√≥n \r\n\r\n\r\n\r\n\r\nSeleccione un valor... Est√°ndar Acreditamiento de IEPS Aerol√≠neas Carta Porte Carta Porte 2.0 Certificado de Destrucci√≥n Comercio Exterior Comercio Exterior 1.1 Compra Venta de Divisas Consumo de Combustibles Consumo De Combustibles 1.1 Donatarias Estado De Cuenta Bancario Estado de Cuenta Combustibles 1.2 Estado de cuenta de combustibles de monederos electr√≥nicos. Gastos de Hidrocarburos INE 1.1 Ingresos de Hidrocarburos Instituciones Educativas Privadas (Pago de colegiatura) Leyendas Fiscales Mis Cuentas Notarios P√∫blicos Obras de artes y antig√ºedades Otros Derechos e Impuestos Pago en Especie Persona F√≠sica Integrante de Coordinado Recepcion de Pagos Recepci√≥n de Pagos Recibo de donativo Recibo de Pago de Salarios Recibo de Pago de Salarios 1.2 Sector de Ventas al Detalle (Detallista) Servicios de construcci√≥n SPEI de Tercero a Tercero Sustituci√≥n y renovaci√≥n vehicular Terceros Terceros Timbre Fiscal Digital Turista o Pasajero Extranjero Vales de Despensa Veh√≠culo Usado Venta de Vehiculos \r\n(Criterio de b√∫squeda aplicable a CFDI emitidas a partir del 01/01/2014) \r\n\r\nSeleccione un valor... En Proceso Rechazada  Plazo vencido Sin proceso \r\n\r\n\r\nSeleccione un valor... Cancelado con aceptaci√≥n Cancelado sin aceptaci√≥n Plazo vencido \r\n\r\n\r\n* Campos obligatorios \r\n\r\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  Acciones \r\n\r\nFolio Fiscal \r\n\r\nRFC Emisor \r\n\r\nNombre o Raz√≥n Social del Emisor \r\n\r\nRFC Receptor \r\n\r\nNombre o Raz√≥n Social del Receptor \r\n\r\nFecha de Emisi√≥n \r\n\r\nFecha de Certificaci√≥n \r\n\r\nPAC que Certific√≥ \r\n\r\nTotal \r\n\r\nEfecto del Comprobante \r\n\r\nEstatus de cancelaci√≥n \r\n\r\nEstado del Comprobante \r\n\r\nEstatus de Proceso de Cancelaci√≥n \r\n\r\nFecha de Proceso de Cancelaci√≥n \r\n\r\nRFC a cuenta de terceros \r\n\r\nMotivo \r\n\r\nFolio de Sustituci√≥n \r\n\r\n\r\n\r\n\r\n\r\n\r\n         \r\n\r\n\r\n\r\n\r\n\r\nNo existen registros que cumplan con los criterios de b√∫squeda ingresados, intentar nuevamente.\r\n   \r\n\r\n\r\n\r\n \r\nEspere un momento...\r\n \r\n\r\n\r\n\r\n\r\nAddenda\r\n\r\n\r\n¬°Error! \r\n\r\n\r\n\r\n\r\nArchivo (.xml)*:  Buscar    \r\n \r\n\r\n* Campos obligatorios \r\n\r\n Cancelar Integrar \r\n \r\n\r\n\r\n\r\nConfirmaci√≥n.\r\n\r\n\r\n\r\n¬øDesea descargar el archivo xml?\r\n\r\n\r\nCerrar Guardar \r\n   \r\n\r\n\r\n\r\nRegistro de Motivos de Cancelaci√≥n \r\n\r\n\r\n!!! Atenci√≥n !!! \r\n* Estos campos son obligatorios\r\n\r\n** Estos campos no tienen el formato correcto\r\n\r\n\r\n\r\nPara cada CFDI que desea cancelar debe capturar el motivo de cancelaci√≥n.\r\n\r\n\r\n \r\nCerrar  \r\n \r\n\r\n \r\n\r\n\r\nRFC a cuenta de terceros\r\n\r\n\r\nNo fue posible obtener la informaci√≥n de los RFC a cuenta de terceros \r\n\r\n\r\n\r\n\r\nUUID Consultado :\r\n\r\n\r\n\r\n\r\nRFC Tercero\r\n\r\nNombre Tercero\r\n\r\n\r\n\r\n\r\nCerrar \r\n       /// Variables (Blobs) var validCookieInterval; var validSesionInterval; var downloadCookie = 'DownloadedFile' /** * Funci√≥n que muestra el update progress y crea 2 Intervals uno para validar que la descarga del archivo * se haya realizado y el otro mantiene la sesi√≥n. */ function ShowProgress() { validSesionInterval = setInterval(function () { MantieneSesion(); }, 60000); $get('ctl00_MainContent_UpdateProgress1').style.display = 'block'; validCookieInterval = setInterval(function () { if ($.cookie(downloadCookie) != null && $.cookie(downloadCookie) == \"OK\") { $.cookie(downloadCookie, null); $get('ctl00_MainContent_UpdateProgress1').style.display = \"none\"; clearInterval(validCookieInterval);//delete interval clearInterval(validSesionInterval); } }, 2000); } /** * Funci√≥n valida que al menos este seleccionado un registro. * Se toman los valores de los registros seleccionados (blobUri) y los guarda en un hidden **/ function validarSeleccionDescarga() { document.getElementById('dvAlert').innerHTML = ''; if ($('.ListaFolios').filter(':checked').length == 0) { //alert(\"Favor de seleccionar registro(s)\") var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-info alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Atenci√≥n! <br/></strong> Favor de seleccionar registro(s)\"; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#dvAlert').offset().top }, 'slow'); return false; } else { ShowProgress(); validarDescargaMasiva(); return false; } } function MetadataDescarga() { $('#hdnValAccion').attr('value', 'DescargaMetadata'); //ValidaCaptcha(); // Se habilita cuando este captcha AccionCaptcha(); // Se quita cuando este captcha return false; } function DescargaMetadata() { document.getElementById('dvAlert').innerHTML = ''; ShowProgress(); Metadatos(); return false; } function Metadatos() { var urlValidaDescarga = \"ConsultaEmisor.aspx/DescargaMetadatos\"; var Parametros = document.getElementById('hfParametrosMetadata').value; var data = encodeURIComponent($.base64.encode(Parametros)); $.ajax({ url: urlValidaDescarga, type: \"POST\", dataType: \"json\", contentType: 'application/json; charset=utf-8', data: \"{'Parametros':'\" + data + \"'}\", cache: false, async: true, success: function (respuestaValidacion) { $get('ctl00_MainContent_UpdateProgress1').style.display = \"none\"; document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); if (respuestaValidacion.d.startsWith(\"Error:\")) { newDivSuccess.className = \"alert alert-danger alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Error! <br/></strong>\" + respuestaValidacion.d.replace(\"Error:\", \"\"); } else { newDivSuccess.className = \"alert alert-success alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Descarga realizada con √©xito! <br/></strong>\" + respuestaValidacion.d; } document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#dvAlert').offset().top }, 'slow'); }, error: function (errorDetail) { $get('ctl00_MainContent_UpdateProgress1').style.display = \"none\"; document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-danger alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Error! <br/></strong> Ocurrio un error al procesar su solicitud. Por favor intentelo m√°s tarde\"; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#dvAlert').offset().top }, 'slow'); }, }); } function ValidaCaptcha() { $(\"#ventanaModalCaptcha\").modal(\"show\"); } function AccionCaptcha() { //$(\"#ventanaModalCaptcha\").modal(\"hide\"); // Se habilita cuando este captcha var accion = $(\"#hdnValAccion\").val(); if (accion.split('¬¨')[0] == \"DescargaMasiva\") { validarDescargaMasiva(); } else if (accion.split('¬¨')[0] == \"DescargaMetadata\") { DescargaMetadata(); } else { var uriblob1 = accion.split('¬¨')[1]; validarDescargaUnitaria(uriblob1); } } function testvalidarDescargaMasiva() { var datos = \"api/ValidaDescarga/\" + $('.ListaFolios').filter(':checked').length; PageMethods.RecuperaRepresentacionImpresa(datos, onDescargaMasivaSucceed, onDescargaMasivaFailed); } function onDescargaMasivaSucceed(result, userContext, methodName) { document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-success alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Descarga realizada con √©xito! <br/></strong>\" + result; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#dvAlert').offset().top }, 'slow'); } function onDescargaMasivaFailed(result, userContext, methodName) { document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-danger alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Descarga realizada con √©xito! <br/></strong>\" + result; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#dvAlert').offset().top }, 'slow'); //alert(result); } function validarDescargaMasiva() { var urlValidaDescarga = \"ConsultaEmisor.aspx/ValidarDescarga\"; $.ajax({ url: urlValidaDescarga, type: \"POST\", dataType: \"json\", contentType: 'application/json; charset=utf-8', data: \"{ id: \" + $('.ListaFolios').filter(':checked').length + \" }\", cache: false, async: true, success: function (respuestaValidacion) { if (respuestaValidacion.d) { respuestaValidacion = respuestaValidacion.d; } if (respuestaValidacion.Codigo == 0) { var folioUriDescaga = []; var descargaMasivaUrisModel = {}; var indiceFolio = 0; $(\"input.ListaFolios:checked\").each(function () { var folioDescarga = $(this).val(); var uriDescarga = $(this).parent().find(\"#ListaFoliosUrl\").val(); folioUriDescaga[indiceFolio] = { Folio: folioDescarga, Uri: uriDescarga }; indiceFolio = indiceFolio + 1; }); descargaMasivaUrisModel.FolioUriList = folioUriDescaga; var data = encodeURIComponent($.base64.encode(JSON.stringify(descargaMasivaUrisModel))); $.ajax({ url: \"ConsultaEmisor.aspx/Descargar\", type: \"POST\", dataType: \"json\", contentType: 'application/json; charset=utf-8', cache: false, async: true, data: \"{'param':'\" + data + \"'}\", success: function (respuestaDescarga) { $get('ctl00_MainContent_UpdateProgress1').style.display = \"none\"; document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); if (respuestaDescarga.d.startsWith(\"Error:\")) { newDivSuccess.className = \"alert alert-danger alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Ocurri√≥ un Error en la Descarga! <br/></strong>\" + respuestaDescarga.d.replace(\"Error:\", \"\"); } else { newDivSuccess.className = \"alert alert-success alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Descarga realizada con √©xito! <br/></strong>\" + respuestaDescarga.d; } document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#dvAlert').offset().top }, 'slow'); //alert(respuestaDescarga.d); }, error: function (xhr, ajaxOptions, thrownError) { //alert('Ocurrio un error al registrar la descarga :'); //alert(xhr.responseText); $get('ctl00_MainContent_UpdateProgress1').style.display = \"none\"; document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-danger alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Ocurri√≥ un Error en la Descarga! <br/></strong>\" + xhr.responseText; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#dvAlert').offset().top }, 'slow'); } }); } else { $get('ctl00_MainContent_UpdateProgress1').style.display = \"none\"; //alert(respuestaValidacion.Mensaje); document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-warning alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Precauci√≥n! <br/></strong>\" + respuestaValidacion.Mensaje; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#dvAlert').offset().top }, 'slow'); } }, error: function (errorDetail) { document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-danger alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Error! <br/></strong> Ocurrio un error al procesar su solicitud. Por favor intentelo m√°s tarde\"; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#dvAlert').offset().top }, 'slow'); }, }); } function validarDescargaUnitaria(blobUri) { var urlValidaDescargaUnitaria = \"ConsultaEmisor.aspx/ValidarDescarga\"; var dataParam = 1; $.ajax({ url: urlValidaDescargaUnitaria, type: \"POST\", dataType: \"json\", contentType: 'application/json; charset=utf-8', data: \"{ id:1 }\", cache: false, async: true, success: function (respuestaValidacion) { if (respuestaValidacion.d) { respuestaValidacion = respuestaValidacion.d; } if (respuestaValidacion.Codigo == 0) { var opcionesUnitaria = \"width=5,height=5,scrollbars=yes,menubar=no,status=no,directories=no,location=no,toolbar=no,resizable=yes,titlebar=no\"; window.open(blobUri, \"RecuperacionCFDI\", opcionesUnitaria); } else { $get('ctl00_MainContent_UpdateProgress1').style.display = \"none\"; document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-warning alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Atenci√≥n! <br/></strong> \" + respuestaValidacion.Mensaje; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#dvAlert').offset().top }, 'slow'); //alert(respuestaValidacion.Mensaje); } } }); } //Se agrega manejador de evento para cuando se termine la llamda del UpdatePanel Sys.WebForms.PageRequestManager.getInstance().add_endRequest(endQueryRequest); //function _doPostBack(eventTarget, eventArgument) { // document.forms[0]._EVENTTARGET.value = eventTarget; // document.forms[0]._EVENTARGUMENT.value = eventArgument; // document.forms[0].submit(); //} //Funcic√≥n que Forza la correcci√≥n del renderizado de tablas en IE9 function endQueryRequest(sender, e) { var hfInicialBool = document.getElementById(\"hfInicialBool\"); if (hfInicialBool.value == \"true\") { var ddl = document.getElementById(\"ddlComplementos\"); ddl.selectedIndex = 0; ddl.disabled = true; } if (hfInicialBool.value == \"false\") { var ddl = document.getElementById(\"ddlComplementos\"); ddl.disabled = false; } CorregirTablaResultados(document.getElementById(\"ctl00_MainContent_PnlResultados\")); } var rfcetiqueta; var rfcvalido; $(document).ready(function () { var hfFlag = document.getElementById('hfFlag'); var hfData = document.getElementById('hfDatos'); var hfDescarga = document.getElementById('hfDescarga'); var hfCancelacion = document.getElementById('hfCancelacion'); if (hfFlag.value == \"true\" && hfData.value != null && hfData.value != \"\") { SetValue(); } if (hfFlag.value == \"false\" && hfData.value != null && hfData.value != \"\") { SetValueSinPatron(); } if (hfCancelacion.value == \"NoElementosSeleccionados\") { document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-warning alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Atenci√≥n! <br/></strong> No ha seleccionado folios, seleccione elementos para cancelar.\"; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#ctl00_MainContent_TxtRfcReceptor').offset().top }, 'slow'); //alert('El o los comprobantes ya se encuentran cancelados'); } if (hfCancelacion.value == \"CancelacionesEnProceso\") { document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-warning alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Atenci√≥n! <br/></strong> Uno o m√°s de los elementos seleccionados ya cuenta con un proceso de cancelaci√≥n.\"; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#ctl00_MainContent_TxtRfcReceptor').offset().top }, 'slow'); //alert('El o los comprobantes ya se encuentran cancelados'); } if (hfCancelacion.value == \"ExistenCancelados\") { document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-warning alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Atenci√≥n! <br/></strong> Uno o m√°s de los elementos seleccionados han sido cancelados con anterioridad.\"; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#ctl00_MainContent_TxtRfcReceptor').offset().top }, 'slow'); //alert('El o los comprobantes ya se encuentran cancelados'); } if (hfCancelacion.value == \"ExisteRelacionado\") { document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-warning alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Atenci√≥n! <br/></strong> Ha seleccionado un elemento que tiene relaci√≥n por lo que no puede ser cancelado sin un folio relacionado.\"; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#dvAlert').offset().top }, 'slow'); } if (hfFlag.value == \"false\" && hfData.value == \"\" && hfCancelacion.value == \"\") { document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-warning alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Atenci√≥n! <br/></strong> No se puede realizar la solicitud de cancelaci√≥n ya que uno de los comprobantes no es simplificado.\"; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#dvAlert').offset().top }, 'slow'); } if (hfDescarga.value == \"CuotaParcial\") { document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-warning alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Atenci√≥n! <br/></strong> Est√°s intentando descargas m√°s documentos de los permitidos.\"; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#dvAlert').offset().top }, 'slow'); //alert(\"Est√°s intentando descargas m√°s documentos de los permitidos.\"); } if (hfDescarga.value == \"CuotaCompleta\") { document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-warning alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Atenci√≥n! <br/></strong> Ya no puedes descargar m√°s documentos, espera hasta ma√±ana.\"; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#dvAlert').offset().top }, 'slow'); //alert(\"Ya no puedes descargar m√°s documentos, espera hasta ma√±ana.\"); } if (hfDescarga.value == \"CuotaLibre\") { var opciones = \"width=100,height=50,scrollbars=yes,menubar=no,status=no,directories=no,location=no,toolbar=no,resizable=yes,titlebar=no\"; } $('#ctl00_MainContent_BtnBusqueda').live('click', function () { $(\"#ctl00_MainContent_PnlErrores\").empty(); $(\"#ctl00_MainContent_PnlErrores\").css('display', 'none'); var fechaInicial = $('#ctl00_MainContent_CldFechaInicial2_Calendario_text').val(); var horaInicial = $('#ctl00_MainContent_CldFechaInicial2_DdlHora').val(); var minutoInicial = $('#ctl00_MainContent_CldFechaInicial2_DdlMinuto').val(); var segundoInicial = $('#ctl00_MainContent_CldFechaInicial2_DdlSegundo').val(); var fechaSplitInicial = splitTextoFecha(fechaInicial, '/'); var fechaFinal = $('#ctl00_MainContent_CldFechaFinal2_Calendario_text').val(); var horaFinal = $('#ctl00_MainContent_CldFechaFinal2_DdlHora').val(); var minutoFinal = $('#ctl00_MainContent_CldFechaFinal2_DdlMinuto').val(); var segundoFinal = $('#ctl00_MainContent_CldFechaFinal2_DdlSegundo').val(); var fechaSplitFinal = splitTextoFecha(fechaFinal, '/'); //Se resta uno al valor del mes porque en JavaScript los meses numericamente se representan del 0 - 11 var dateInicial = new Date(fechaSplitInicial[2], parseEntero(fechaSplitInicial[1]) - 1, fechaSplitInicial[0], horaInicial, minutoInicial, segundoInicial, 0); var dateFinal = new Date(fechaSplitFinal[2], parseEntero(fechaSplitFinal[1]) - 1, fechaSplitFinal[0], horaFinal, minutoFinal, segundoFinal, 0); //Se verifica que la fehca final no sea menor a la incial if (dateFinal < dateInicial) { $(\"#ctl00_MainContent_PnlErrores\").append('<ul><li>La fecha inicial no puede ser posterior a la fecha final</li></ul>'); $(\"#ctl00_MainContent_PnlErrores\").css('display', 'inline'); return false; } //Se agrega un a√±o a la fecha incial y esa sera la fecha m√°xima a elegir var maxDate = new Date(dateInicial.getFullYear() + 1, dateInicial.getMonth(), dateInicial.getDate(), dateInicial.getHours(), dateInicial.getMinutes(), dateInicial.getSeconds()); //Se verifica si el mes es diferente, para actual ante la logica de suma del 29 de Febrero, que da como resultado 1 de Marzo if (maxDate.getMonth() != dateInicial.getMonth()) maxDate.setDate(maxDate.getDate() - 1); //Se compara que la fecha final no sea mayor a la fecha m√°xima if (dateFinal > maxDate) { $(\"#ctl00_MainContent_PnlErrores\").append('<ul><li>La consulta esta limitada a rangos de fechas de m√°ximo 12 meses.</li></ul>'); $(\"#ctl00_MainContent_PnlErrores\").css('display', 'inline'); return false; } }); $(\"#ctl00_MainContent_RdoFolioFiscal\").live('click', function () { //$(\"#datepicker\").css('visibility', 'hidden'); //$(\"#datepicker\").css('display', 'none'); //$(\"#datepickeriframe\").css('visibility', 'hidden'); //$(\"#datepickeriframe\").css('display', 'none'); validaRfcAutenticado(); }); $(\"#ctl00_MainContent_BtnBusqueda\").live('mouseover', function (event) { validaRfcAutenticado(); }); $(\"#ctl00_MainContent_BtnCancelar\").live('mouseover', function (event) { validaRfcAutenticado(); }); $(\"#BtnImprimirVisible\").live('click', function (event) { validaRfcAutenticado(); }); $(\"#ctl00_MainContent_BtnImprimir\").live('mouseover', function (event) { validaRfcAutenticado(); }); $(\"#ctl00_MainContent_BtnDescargar\").live('mouseover', function (event) { validaRfcAutenticado(); }); $(\"#ctl00_MainContent_BtnMetadata\").live('mouseover', function (event) { validaRfcAutenticado(); }); $(\"#ctl00_MainContent_RdoFechas\").live('click', function () { validaRfcAutenticado(); }); }); function AccionCfdi(blobUri, argumento) { //if (rfcvalido) { MantieneSesion(); var event = window.event; var opciones = \"\"; if (argumento == \"Detalle\") { opciones = \"width=5,height=5,scrollbars=yes,menubar=no,status=no,directories=no,location=no,toolbar=no,resizable=yes,titlebar=no\"; window.open(blobUri, \"DetalleCfdi\", opciones); } else if (argumento == \"Recuperacion\") { validarDescargaUnitaria(blobUri); } else if (argumento == \"Acuse\") { opciones = \"width=5,height=5,scrollbars=yes,menubar=no,status=no,directories=no,location=no,toolbar=no,resizable=yes,titlebar=no\"; window.open(blobUri, \"AcuseCancelacion\", opciones); } else if (argumento == \"Addenda\") { $('#modalExito').modal('show'); $('#errorFirmadoSL').hide(); $('#hfXML')[0].value = blobUri; } if (event.stopstopPropagation) { event.stopPropagation(); } else { event.cancelBubble = true; } //} } function consultaCuentaTerceros(parametros) { var urlConsultaCuentaTerceros = \"ConsultaEmisor.aspx/ConsultaCuentaTerceros\"; var Parametros = parametros; var data = encodeURIComponent($.base64.encode(Parametros)); $(\"#divResultadosTerceros\").hide(); $(\"#datosTerceros\").html(\"\"); $('#divErrorTerceros').hide(); $.ajax({ url: urlConsultaCuentaTerceros, type: \"POST\", dataType: \"json\", contentType: 'application/json; charset=utf-8', data: \"{'Parametros':'\" + data + \"'}\", cache: false, async: true, success: function (respuestaStr) { respuesta = JSON.parse(respuestaStr.d); if (respuesta.Estatus == 1) { listaTerceros = respuesta.ListCuentaTerceros; var contendTable = \"\"; for (var indice = 0; indice < listaTerceros.length; indice++) { contendTable = contendTable + \"<tr>\"; contendTable = contendTable + '<td>' + listaTerceros[indice].RfcACuentaTerceros + '</td>'; contendTable = contendTable + '<td>' + listaTerceros[indice].NombreACuentaTerceros + '</td>'; contendTable = contendTable + \"</tr>\"; } var params = parametros.split(\"|\"); $(\"#uuidConsultado\").text(params[0]); $(\"#datosTerceros\").html(contendTable); $(\"#divResultadosTerceros\").show(); $('#modalCuentaTerceros').modal('show'); } else { $('#modalCuentaTerceros').modal('show'); $('#divErrorTerceros').show(); $(\"#divResultadosTerceros\").hide(); } }, error: function (errorDetail) { alert(\"Error en la consulta de terceros\"); }, }); } ////Funci√≥n que maneja la seleccion y deseleccion multiple global para cancelaci√≥n function manejaseleccion() { var s = document.getElementById(\"seleccionador\"); var estado = s.checked; $('.ListaFolios').each(function (i, obj) { obj.checked = estado; }); } //Crea y retorna el html para los select de cancelacion de folios function crearSelectMotivoCancelacion(folio) { //var valores_catalogo_motivos_cancelacion = //Los valores de estos arreglos son llenados en el page_load desde el servicio de catalgos; //var textos_catalogo_motivos_cancelacion = //Los valores de estos arreglos son llenados en el page_load desde el servicio de catalgos; var select = document.createElement(\"select\"); select.name = \"ddl\" + folio; select.id = \"ddl\" + folio; for (let i = 0; i <= valores_catalogo_motivos_cancelacion.length - 1; i++) { var option = document.createElement(\"option\"); option.value = valores_catalogo_motivos_cancelacion[i]; option.text = textos_catalogo_motivos_cancelacion[i]; select.appendChild(option); } return select.outerHTML; } //Crea y retorna el html para el input del folio realcionado function CrearInputFolioRelacionado(folio) { var input = document.createElement(\"input\"); input.name = \"input\" + folio; input.id = \"input\" + folio; return input.outerHTML; } //Genera eventos onchange a los combos que se creraron dinamicamente para la cancelacion function AgregaEventoACombosDinamicos() { $(\"input.ListaFolios:checked\").each(function () { document.getElementById('ddl' + $(this).val()).addEventListener('change', function () { //console.log('You selected: ' + this.value + '-' + $(this).val() + this.id.replace('ddl', '')); //console.log(this.value === \"01\"); if (this.value === \"01\") { $(\"#input\" + this.id.replace('ddl', '')).show(); } else { $(\"#input\" + this.id.replace('ddl', '')).val(''); $(\"#input\" + this.id.replace('ddl', '')).hide(); } }); $(\"#input\" + $(this).val()).attr('style','text-transform: uppercase;'); $(\"#input\" + $(this).val()).mask(\"hhhhhhhh-hhhh-hhhh-hhhh-hhhhhhhhhhhh\"); $(\"#input\" + $(this).val()).hide(); }); } function validaMotivosCancelacion() { var expected = true; var errorFormato = false; $(\".error\").remove(); $(\"input.ListaFolios:checked\").each(function () { console.log(\"validando \" + $(this).val() + \": valor seleccionado :\" + $(\"#ddl\" + $(this).val()).val() + \", valor input :\" + $(\"#input\" + $(this).val()).val()); if ($(\"#input\" + $(this).val()).val().indexOf('_') != -1) { console.log(\"debe ingrar un UUID Valido\"); } if ($(\"#ddl\" + $(this).val()).val() === \"00\") { $(\"#ddl\" + $(this).val()).before('<span class=\"error\">*</span>'); expected = false; } //if ($(\"#ddl\" + $(this).val()).val() === \"01\" && $(\"#input\" + $(this).val()).val().replace('_', '').replace('-', '') === \"\") { // $(\"#input\" + $(this).val()).before('<span class=\"error\">*</span>'); // expected = false; //} //if ($(\"#ddl\" + $(this).val()).val() === \"01\" && $(\"#input\" + $(this).val()).val().indexOf('_') != -1) { // $(\"#input\" + $(this).val()).before('<span class=\"error\">**</span>'); // expected = false; // errorFormato = true; //} }); $(\"#errorFirmadoSL_cancelacion\").css(\"display\", ((expected) ? \"none\" : \"block\")); $(\"#errorCliente_cancelacion_formatoUUID\").css(\"display\", ((!errorFormato) ? \"none\" : \"block\")); return expected; } function creaPropiedadJSON(nombre, valor) { var expected = \"\\\"\" + nombre + \"\\\":\" + \"\\\"\" + valor + \"\\\"\"; return expected; } function PrepararJSONCancelacion() { var valido = validaMotivosCancelacion(); if (valido) { console.log('preparando JSON'); var JSONCancelacion = \"[\"; $(\"input.ListaFolios:checked\").each(function () { JSONCancelacion += \"{\" JSONCancelacion += creaPropiedadJSON(\"UUID\", $(this).val()) + \",\"; JSONCancelacion += creaPropiedadJSON(\"Motivo\", $(\"#ddl\" + $(this).val()).val()) + \",\"; JSONCancelacion += creaPropiedadJSON(\"FolioSustitucion\", $(\"#input\" + $(this).val()).val().replace(\"________-____-____-____-____________\",\"\")); JSONCancelacion += \"},\" }); JSONCancelacion += \"]\"; $(\"#hfJSONCancelacion\").val(JSONCancelacion); console.log('JSON preparado ' + $(\"#hfJSONCancelacion\").val()); } return valido; } ////Funci√≥n para mostrar el modal de captura de motivos de cancelaci√≥n function CancelarSeleccionCliente() { $('#dvMotivosCancelacion').empty(); var htmlHeader = \"<tr><th>Folio Fiscal</th><th>Motivo Cancelaci√≥n</th><th>Folio Relacionado</th></tr>\" var htmlTable = \"<table>\" + htmlHeader; $(\"input.ListaFolios:checked\").each(function () { htmlTable += \"<tr >\" ; htmlTable += \"<td ><small><b>\" + $(this).val() + \"</b></small></td>\"; htmlTable += \"<td ><small>\" + crearSelectMotivoCancelacion($(this).val()) + \"</small></td>\"; htmlTable += \"<td ><small>\" + CrearInputFolioRelacionado($(this).val()) + \"</small></td>\"; htmlTable += \"</tr>\" }); htmlTable += \"</table>\"; var tableMotivosCancelacion = document.createElement('div'); tableMotivosCancelacion.innerHTML = htmlTable; document.getElementById('dvMotivosCancelacion').appendChild(tableMotivosCancelacion); AgregaEventoACombosDinamicos(); $('#modalCancelacion').modal('show'); return false; } ////Funci√≥n que maneja la seleccion y deseleccion multiple por elemento para cancelaci√≥n function validaseleccion() { var estado = true; $('.ListaFolios').each(function (i, obj) { if (!(obj.checked)) estado = false; }); var s = document.getElementById(\"seleccionador\"); s.checked = estado; } ////Funci√≥n que oculta los panelers de resultados function ocultaResultados() { $(\"#ctl00_MainContent_PnlResultados\").css('display', 'none'); $(\"#ctl00_MainContent_PnlNoResultados\").css('display', 'none'); } ////Funci√≥n que invoca al metodo de recuperaci√≥n de acuse. function recuperaAcuse(datos) { MantieneSesion(); PageMethods.RecuperaAcuse(datos, onRecuperaAcuseSucceed, onRecuperaAcuseFailed); } function validarCaracteres() { supressUpdatePanelRequestErrorCharacters(\"#ctl00_MainContent_TxtRfcReceptor\"); } function recuperaRepresentacionImpresa(datos) { PageMethods.RecuperaRepresentacionImpresa(datos, onRecuperaRISucceed, onRecuperaRIFailed); } function onRecuperaRISucceed(result, userContext, methodName) { opciones = \"width=5,height=5,scrollbars=no,menubar=no,status=no,directories=no,location=no,toolbar=no,resizable=no,titlebar=no\"; window.open(result, \"RecuperacionRepresentacionImpresa\", opciones); } function onRecuperaRIFailed(result, userContext, methodName) { document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-warning alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Atenci√≥n! <br/></strong> No se ha podido recuperar la representaci√≥n Impresa, por favor intentelo m√°s tarde.\"; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#dvAlert').offset().top }, 'slow'); //alert(\"No se ha podido recuperar la representaci√≥n Impresa, por favor intentelo m√°s tarde.\"); } function onRecuperaAcuseSucceed(result, userContext, methodName) { opciones = \"width=5,height=5,scrollbars=yes,menubar=no,status=no,directories=no,location=no,toolbar=no,resizable=yes,titlebar=no\"; window.open(result, \"RecuperacionAcuseCancelacion\", opciones); } function onRecuperaAcuseFailed(result, userContext, methodName) { document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-warning alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Atenci√≥n! <br/></strong> No se ha podido recuperar el acuse de cancelaci√≥n, por favor intentelo m√°s tarde.\"; document.getElementById('dvAlert').appendChild(newDivSuccess); //alert(\"No se ha podido recuperar el acuse de cancelaci√≥n, por favor intentelo m√°s tarde.\"); } function SetValue() { if (confirm(\"¬øSeguro desea cancelar la seleccion?\")) { document.getElementById('setLinkButton').click(); //$(\"#hiddenFlagCancelacion\").val = \"true\"; //document.forms[\"fulanito\"].action=\"CancelaBeta\" // .submit(); } else { //alert('NO'); } } function SetValueSinPatron() { document.getElementById('setLinkButton').click(); } function Pager(tableName, itemsPerPage) { this.tableName = tableName; this.itemsPerPage = itemsPerPage; this.currentPage = 1; this.pages = 0; this.inited = false; this.showRecords = function (from, to) { var rows = document.getElementById(tableName).rows; // i starts from 1 to skip table header row for (var i = 1; i < rows.length; i++) { if (i < from || i > to) rows[i].style.display = 'none'; else rows[i].style.display = ''; } } this.showPage = function (pageNumber) { if (!this.inited) { alert(\"not inited\"); return; } var oldPageAnchor = document.getElementById('pg' + this.currentPage); oldPageAnchor.className = 'pg-normal'; this.currentPage = pageNumber; var newPageAnchor = document.getElementById('pg' + this.currentPage); newPageAnchor.className = 'pg-selected'; var from = (pageNumber - 1) * itemsPerPage + 1; var to = from + itemsPerPage - 1; this.showRecords(from, to); } this.prev = function () { if (this.currentPage > 1) this.showPage(this.currentPage - 1); } this.next = function () { if (this.currentPage < this.pages) { this.showPage(this.currentPage + 1); } } this.init = function () { var rows = document.getElementById(tableName).rows; var records = (rows.length - 1); this.pages = Math.ceil(records / itemsPerPage); this.inited = true; } this.showPageNav = function (pagerName, positionId) { if (!this.inited) { alert(\"not inited\"); return; } var element = document.getElementById(positionId); var pagerHtml = '<ul class=\"pagination\">'; pagerHtml += '<li onclick=\"' + pagerName + '.prev();\"><a>&laquo;</a></li>'; for (var page = 1; page <= this.pages; page++) pagerHtml += '<li id=\"pg' + page + '\" class=\"pg-normal\" onclick=\"' + pagerName + '.showPage(' + page + ');\"><a>' + page + '</a></li>'; pagerHtml += '<li onclick=\"' + pagerName + '.next();\"><a>&raquo;</a></li>'; element.innerHTML = pagerHtml; } }","use":true},{"name":"AutomationId","variant":0,"value":"","use":false},{"name":"AcceleratorKey","variant":0,"value":"","use":false},{"name":"AccessKey","variant":0,"value":"","use":false},{"name":"FrameworkId","variant":0,"value":"InternetExplorer","use":false},{"name":"HasKeyboardFocus","variant":0,"value":"False","use":false},{"name":"HelpText","variant":0,"value":"","use":false},{"name":"IsContentElement","variant":0,"value":"True","use":false},{"name":"IsControlElement","variant":0,"value":"True","use":false},{"name":"IsEnabled","variant":0,"value":"True","use":false},{"name":"IsKeyboardFocusable","variant":0,"value":"False","use":false},{"name":"IsOffscreen","variant":0,"value":"False","use":false},{"name":"IsPassword","variant":0,"value":"False","use":false},{"name":"IsRequiredForForm","variant":0,"value":"False","use":false},{"name":"ItemType","variant":0,"value":"","use":false},{"name":"ProcessId","variant":0,"value":"15208","use":false}],"items":null,"automationType":"ui","app_title":"Interruptor de Navegaci√≥n \r\n\r\n\r\n Factura electr√≥nica \r\n\r\nConsulta CFDI  \r\n\r\nFactura Electr√≥nica\r\n\r\n\r\nRetenciones e Inf. de Pagos\r\n\r\n\r\n\r\nGeneraci√≥n de CFDI \r\n\r\nConfiguraci√≥n de datos V 4.0\r\n\r\n\r\nConfiguraci√≥n de datos V 3.3\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n  Inicio \r\n Consultar Facturas Emitidas\r\n \r\n\r\nRFC Autenticado: AAMD660518TF2 Salir \r\n\r\n\r\n \r\n\r\n\r\nConsultar Facturas Emitidas\r\n\r\n\r\n\r\n\r\n\r\n\r\nFolio Fiscal * \r\n\r\n\r\n\r\n\r\n \r\n\r\n  /* the div that holds the date picker calendar */ .dpDiv { } /* the table (within the div) that holds the date picker calendar */ .dpTable { font-family: Open Sans, Helvetica Neue, Helvetica, Arial, sans-serif; font-size: 18px; line-height: 1.4285; text-align: center; color: #333; background-color: #fff; box-shadow: 0px 2px 7px rgba(0,0,0,0.2); border-radius: 0; width: 300px; height: 300px; } /* the top table row that holds the month, year, and forward/backward buttons */ .dpTitleTR { background-color: #222; } /* the second table row, that holds the names of days of the week (Mo, Tu, We, etc.) */ .dpDayTR { border-bottom: 1px solid #111; } /* a table cell that holds a date number (either blank or 1-31) */ .dpTD { /* border: 1px solid #ece9d8;*/ color: #003399; } /* a table cell that holds a highlighted day (usually either today's date or the current date field value) */ .dpDayHighlightTD { background-color: #ffdf88; } /* the date number table cell that the mouse pointer is currently over (you can use contrasting colors to make it apparent which cell is being hovered over) */ .dpTDHover { background-color: #ffffff; border: 1px solid #888888; cursor: pointer; color: red; } /* the table cell that holds the name of the month and the year */ .dpTitleTD { } /* a table cell that holds one of the forward/backward buttons */ .dpButtonTD { } /* the table cell that holds the \"This Month\" or \"Close\" button at the bottom */ .dpTodayButtonTD { } /* a table cell that holds the names of days of the week (Mo, Tu, We, etc.) */ .dpDayTD { /*background-color: #FFFFFF;*/ /*border: 1px solid #AAAAAA;*/ text-transform: uppercase; font-weight:300; color: #9d9d9d; font-size: 10px; } /* additional style information for the text that indicates the month and year */ .dpTitleText { font-size: 18px; color: #fff; line-height: 1em; text-align: center; } /* additional style information for the cell that holds a highlighted day (usually either today's date or the current date field value) */ .dpDayHighlight { /*color: 4060ff; font-weight: bold;*/ color: #003399; text-decoration: none; } /* the forward/backward buttons at the top */ .dpButton { font-family: Tahoma; font-size: 8pt; color: gray; background: #d8e8ff; font-weight: normal; padding: 0px; } .dpButtonExtra { font-family: Tahoma; font-size: 8pt; color: gray; background: #d8e8ff; font-weight: bold; padding: 0px; margin-left: -8px; } /* the \"This Month\" and \"Close\" buttons at the bottom */ .dpTodayButton { font-family: Tahoma; font-size: 7pt; color: gray; background: #d8e8ff; font-weight: bold; } .surveyTable, .surveytd { border-color: #000000; border-style: solid; font-family: Tahoma; font-size: 10pt; } .surveyTable { /*border-width: 0 0 1px 1px;*/ border-spacing: 0; /*border-collapse: collapse;*/ font-family: Tahoma; font-size: 10pt; } .surveytd { margin: 0; padding: 4px; /*border-width: 1px 1px 0 0;*/ font-family: Tahoma; font-size: 10pt; } .surveyButton { border-top: solid 1px #CCCCCC; background-color: #E5E5E5; font-family: Tahoma; font-size: 10pt; } #DivCalendario { position: absolute; top: 1px; width: 220px; display: none; margin-top: 10px; z-index: 1000; background: white; } #DivTexto { display: block; width: 200px; }  \r\n\r\n\r\nFecha Inicial de Emisi√≥n * \r\n\r\n  \r\n\r\n\r\n00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 \r\n\r\n:\r\n\r\n\r\n00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 \r\n\r\n:\r\n\r\n\r\n00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 \r\n//DataPicker var datePickerDivID = \"datepicker\"; var iFrameDivID = \"datepickeriframe\"; var dayArrayShort = new Array('DOM', 'LUN', 'MAR', 'MIE', 'JUE', 'VIE', 'SAB'); var dayArrayMed = new Array('Dom', 'Lun', 'Mar', 'Mie', 'Jue', 'Vie', 'Sab'); var dayArrayLong = new Array('Domingo', 'Lunes', 'Martes', 'Miercoles', 'Jueves', 'Viernes', 'Sabado'); var monthArrayShort = new Array('Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'); var monthArrayMed = new Array('Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'); var monthArrayLong = new Array('Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'); // these variables define the date formatting we're expecting and outputting. // If you want to use a different format by default, change the defaultDateSeparator // and defaultDateFormat variables either here or on your HTML page. var defaultDateSeparator = \"/\"; // common values would be \"/\" or \".\" var defaultDateFormat = \"mdy\" // valid values are \"mdy\", \"chadmy\", and \"ymd\" var dateSeparator = defaultDateSeparator; var dateFormat = defaultDateFormat; var idCajaTexto = 'ctl00_MainContent_CldFechaInicial2_Calendario_text'; var _CustomAction = null; /** This is the main function you'll call from the onClick event of a button. Normally, you'll have something like this on your HTML page: Start Date: <input name=\"StartDate\"> <input type=button value=\"select\" onclick=\"displayDatePicker('StartDate');\"> That will cause the datepicker to be displayed beneath the StartDate field and any date that is chosen will update the value of that field. If you'd rather have the datepicker display beneath the button that was clicked, you can code the button like this: <input type=button value=\"select\" onclick=\"displayDatePicker('StartDate', this);\"> So, pretty much, the first argument (dateFieldName) is a string representing the name of the field that will be modified if the user picks a date, and the second argument (displayBelowThisObject) is optional and represents an actual node on the HTML document that the datepicker should be displayed below. In version 1.1 of this code, the dtFormat and dtSep variables were added, allowing you to use a specific date format or date separator for a given call to this function. Normally, you'll just want to set these defaults globally with the defaultDateSeparator and defaultDateFormat variables, but it doesn't hurt anything to add them as optional parameters here. An example of use is: <input type=button value=\"select\" onclick=\"displayDatePicker('StartDate', false, 'dmy', '.');\"> This would display the datepicker beneath the StartDate field (because the displayBelowThisObject parameter was false), and update the StartDate field with the chosen value of the datepicker using a date format of dd.mm.yyyy */ function displayDatePicker(dateFieldName, displayBelowThisObject, dtFormat, dtSep) { var targetDateField = document.getElementById(dateFieldName); // this._CustomAction = CustomAction; // // if we weren't told what node to display the datepicker beneath, just display it // beneath the date field we're updating if (!displayBelowThisObject) { displayBelowThisObject = targetDateField; } // if a date separator character was given, update the dateSeparator variable if (dtSep) dateSeparator = dtSep; else dateSeparator = defaultDateSeparator; // if a date format was given, update the dateFormat variable if (dtFormat) dateFormat = dtFormat; else dateFormat = defaultDateFormat; var x = displayBelowThisObject.offsetLeft; var y = displayBelowThisObject.offsetTop + displayBelowThisObject.offsetHeight; // deal with elements inside tables and such var parent = displayBelowThisObject; while (parent.offsetParent) { parent = parent.offsetParent; x += parent.offsetLeft; y += parent.offsetTop; } drawDatePicker(targetDateField, x, y); } /** Draw the datepicker object (which is just a table with calendar elements) at the specified x and y coordinates, using the targetDateField object as the input tag that will ultimately be populated with a date. This function will normally be called by the displayDatePicker function. */ function drawDatePicker(targetDateField, x, y) { var dt = getFieldDate(targetDateField.value); // the datepicker table will be drawn inside of a <div> with an ID defined by the // global datePickerDivID variable. If such a div doesn't yet exist on the HTML // document we're working with, add one. if (!document.getElementById(datePickerDivID)) { // don't use innerHTML to update the body, because it can cause global variables // that are currently pointing to objects on the page to have bad references //document.body.innerHTML += \"<div id='\" + datePickerDivID + \"' class='dpDiv'></div>\"; var newNode = document.createElement(\"div\"); newNode.setAttribute(\"id\", datePickerDivID); newNode.setAttribute(\"class\", \"dpDiv\"); //newNode.setAttribute(\"style\", \"visibility: hidden;\"); document.body.appendChild(newNode); } // move the datepicker div to the proper x,y coordinate and toggle the visiblity var pickerDiv = document.getElementById(datePickerDivID); pickerDiv.style.position = \"absolute\"; pickerDiv.style.left = x + \"px\"; pickerDiv.style.top = y + \"px\"; pickerDiv.style.visibility = (pickerDiv.style.visibility == \"visible\" ? \"hidden\" : \"visible\"); //pickerDiv.style.visibility = \"visible\"; pickerDiv.style.display = (pickerDiv.style.display == \"block\" ? \"none\" : \"block\"); pickerDiv.style.zIndex = 10000; // draw the datepicker table refreshDatePicker(targetDateField.name, dt.getFullYear(), dt.getMonth(), dt.getDate()); } /** This is the function that actually draws the datepicker calendar. */ function refreshDatePicker(dateFieldName, year, month, day) { // if no arguments are passed, use today's date; otherwise, month and year // are required (if a day is passed, it will be highlighted later) var thisDay = new Date(); if ((month >= 0) && (year > 0)) { thisDay = new Date(year, month, 1); } else { day = thisDay.getDate(); thisDay.setDate(1); } // the calendar will be drawn as a table // you can customize the table elements with a global CSS style sheet, // or by hardcoding style and formatting elements below var crlf = \"\\r\\n\"; var TABLE = \"<table cols=7 class='dpTable'>\" + crlf; var xTABLE = \"</table>\" + crlf; var TR = \"<tr class='dpTR'>\"; var TR_title = \"<tr class='dpTitleTR'>\"; var TR_days = \"<tr>\"; var TR_todaybutton = \"<tr class='dpTodayButtonTR'>\"; var xTR = \"</tr>\" + crlf; var TD = \"<td class='dpTD' onMouseOut='this.className=\\\"dpTD\\\";' onMouseOver=' this.className=\\\"dpTDHover\\\";' \"; // leave this tag open, because we'll be adding an onClick event var TD_title = \"<td colspan=5 class='dpTitleTD'>\"; var TD_buttons = \"<td class='dpButtonTD'>\"; var TD_todaybutton = \"<td colspan=7 class='dpTodayButtonTD'>\"; var TD_days = \"<td class='dpDayTD'>\"; var TD_selected = \"<td class='dpDayHighlightTD' onMouseOut='this.className=\\\"dpDayHighlightTD\\\";' onMouseOver='this.className=\\\"dpTDHover\\\";' \"; // leave this tag open, because we'll be adding an onClick event var xTD = \"</td>\" + crlf; var DIV_title = \"<div class='dpTitleText'>\"; var DIV_selected = \"<div class='dpDayHighlight'>\"; var xDIV = \"</div>\"; // start generating the code for the calendar table var html = TABLE; // this is the title bar, which displays the month and the buttons to // go back to a previous month or forward to the next month html += TR_title; html += TD_buttons + getButtonCode(dateFieldName, thisDay, -1, \"&lt;\") + xTD; html += TD_title + DIV_title + monthArrayLong[thisDay.getMonth()] + \" \" + thisDay.getFullYear() + xDIV + xTD; html += TD_buttons + getButtonCode(dateFieldName, thisDay, 1, \"&gt;\") + xTD; html += xTR; // this is the row that indicates which day of the week we're on html += TR_days; for (i = 0; i < dayArrayShort.length; i++) html += TD_days + dayArrayShort[i] + xTD; html += xTR; // now we'll start populating the table with days of the month html += TR; // first, the leading blanks for (i = 0; i < thisDay.getDay(); i++) html += TD + \"&nbsp;\" + xTD; // now, the days of the month do { dayNum = thisDay.getDate(); TD_onclick = \" onclick=\\\"updateDateField('\" + dateFieldName + \"', '\" + getDateString(thisDay) + \"');\\\">\"; if (dayNum == day) html += TD_selected + TD_onclick + DIV_selected + dayNum + xDIV + xTD; else html += TD + TD_onclick + dayNum + xTD; // if this is a Saturday, start a new row if (thisDay.getDay() == 6) html += xTR + TR; // increment the day thisDay.setDate(thisDay.getDate() + 1); } while (thisDay.getDate() > 1) // fill in any trailing blanks if (thisDay.getDay() > 0) { for (i = 6; i > thisDay.getDay(); i--) html += TD + \"&nbsp;\" + xTD; } html += xTR; // add a button to allow the user to easily return to today, or close the calendar var today = new Date(); var todayString = \"Today is \" + dayArrayMed[today.getDay()] + \", \" + monthArrayMed[today.getMonth()] + \" \" + today.getDate(); html += TR_todaybutton + TD_todaybutton; //html += \"<button class='dpTodayButton' onClick='refreshDatePicker(\\\"\" + dateFieldName + \"\\\");'>this month</button> \"; html += \"<button class='dpTodayButton' onClick='updateDateField(\\\"\" + dateFieldName + \"\\\");'>cerrar</button>\"; html += xTD + xTR; // and finally, close the table html += xTABLE; document.getElementById(datePickerDivID).innerHTML = html; // add an \"iFrame shim\" to allow the datepicker to display above selection lists adjustiFrame(); } /** Convenience function for writing the code for the buttons that bring us back or forward a month. */ function getButtonCode(dateFieldName, dateVal, adjust, label) { var newMonth = (dateVal.getMonth() + adjust) % 12; var newYear = dateVal.getFullYear() + parseInt((dateVal.getMonth() + adjust) / 12); if (newMonth < 0) { newMonth += 12; newYear += -1; } return \"<button class='dpButton' onClick='refreshDatePicker(\\\"\" + dateFieldName + \"\\\", \" + newYear + \", \" + newMonth + \");'>\" + label + \"</button>\"; } /** Convert a JavaScript Date object to a string, based on the dateFormat and dateSeparator variables at the beginning of this script library. */ function getDateString(dateVal) { var dayString = \"00\" + dateVal.getDate(); var monthString = \"00\" + (dateVal.getMonth() + 1); dayString = dayString.substring(dayString.length - 2); monthString = monthString.substring(monthString.length - 2); switch (dateFormat) { case \"dmy\": return dayString + dateSeparator + monthString + dateSeparator + dateVal.getFullYear(); case \"ymd\": return dateVal.getFullYear() + dateSeparator + monthString + dateSeparator + dayString; case \"mdy\": default: return monthString + dateSeparator + dayString + dateSeparator + dateVal.getFullYear(); } } /** Convert a string to a JavaScript Date object. */ function getFieldDate(dateString) { var dateVal; var dArray; var d, m, y; try { dArray = splitDateString(dateString); if (dArray) { switch (dateFormat) { case \"dmy\": d = parseInt(dArray[0], 10); m = parseInt(dArray[1], 10) - 1; y = parseInt(dArray[2], 10); break; case \"ymd\": d = parseInt(dArray[2], 10); m = parseInt(dArray[1], 10) - 1; y = parseInt(dArray[0], 10); break; case \"mdy\": default: d = parseInt(dArray[1], 10); m = parseInt(dArray[0], 10) - 1; y = parseInt(dArray[2], 10); break; } dateVal = new Date(y, m, d); } else if (dateString) { dateVal = new Date(dateString); } else { dateVal = new Date(); } } catch (e) { dateVal = new Date(); } return dateVal; } /** Try to split a date string into an array of elements, using common date separators. If the date is split, an array is returned; otherwise, we just return false. */ function splitDateString(dateString) { var dArray; if (dateString.indexOf(\"/\") >= 0) dArray = dateString.split(\"/\"); else if (dateString.indexOf(\".\") >= 0) dArray = dateString.split(\".\"); else if (dateString.indexOf(\"-\") >= 0) dArray = dateString.split(\"-\"); else if (dateString.indexOf(\"\\\\\") >= 0) dArray = dateString.split(\"\\\\\"); else dArray = false; return dArray; } /** Update the field with the given dateFieldName with the dateString that has been passed, and hide the datepicker. If no dateString is passed, just close the datepicker without changing the field value. Also, if the page developer has defined a function called datePickerClosed anywhere on the page or in an imported library, we will attempt to run that function with the updated field as a parameter. This can be used for such things as date validation, setting default values for related fields, etc. For example, you might have a function like this to validate a start date field: function datePickerClosed(dateField) { var dateObj = getFieldDate(dateField.value); var today = new Date(); today = new Date(today.getFullYear(), today.getMonth(), today.getDate()); if (dateField.name == \"StartDate\") { if (dateObj < today) { // if the date is before today, alert the user and display the datepicker again alert(\"Please enter a date that is today or later\"); dateField.value = \"\"; document.getElementById(datePickerDivID).style.visibility = \"visible\"; adjustiFrame(); } else { // if the date is okay, set the EndDate field to 7 days after the StartDate dateObj.setTime(dateObj.getTime() + (7 * 24 * 60 * 60 * 1000)); var endDateField = document.getElementsByName (\"EndDate\").item(0); endDateField.value = getDateString(dateObj); } } } */ function SetDDL(targetField, dateFieldName, dateString) { var StartDate = 2014; var EndDate = 2014; var IsInicial = dateFieldName.indexOf(\"FechaInicial\"); var IsFinal = dateFieldName.indexOf(\"FechaFinal\"); var hfInicial = document.getElementById(\"hfInicial\"); var hfFinal = document.getElementById(\"hfFinal\"); if(IsInicial > -1) { hfInicial.value = dateString; hfInicial.value = getFieldDate(hfInicial.value).getFullYear(); } if(IsFinal > -1) { hfFinal.value = dateString; hfFinal.value = getFieldDate(hfFinal.value).getFullYear(); } if(hfInicial.value != \"\") { StartDate = hfInicial.value; } if(hfFinal.value != \"\") { EndDate = hfFinal.value; } //var dt = getFieldDate(targetField.value); //var year = dt.getFullYear(); //alert(targetField.id); var ddl = document.getElementById(\"ctl00_MainContent_ddlComplementos\"); var passed = true; if(StartDate < 2014 || EndDate < 2014) { passed = false; } if(!passed) { var hfInicialBool = document.getElementById(\"hfInicialBool\"); hfInicialBool.value = \"true\"; if(ddl != null) { ddl.selectedIndex=0; ddl.disabled= true; } } if(passed) { var hfInicialBool = document.getElementById(\"hfInicialBool\"); hfInicialBool.value = \"false\"; if(ddl != null) ddl.disabled= false; } } function updateDateField(dateFieldName, dateString) { var targetDateField = document.getElementsByName(dateFieldName).item(0); if (dateString) { //var Contenedor = $('#'+ dateFieldName); var idDependiente = '#' + $(targetDateField).attr('dependiente'); if (false) { $(idDependiente + '_Calendario_text').val(dateString); //$(idDependiente + '_DdlHora').val(\"23\"); var opHora = $(idDependiente + '_DdlHora').find(\"option[value=23]\"); $(idDependiente + '_DdlHora').selectbox(\"change\", opHora.attr('value'), opHora.html()); //$(idDependiente + '_DdlMinuto').val(\"59\"); var opMinuto = $(idDependiente + '_DdlMinuto').find(\"option[value=59]\"); $(idDependiente + '_DdlMinuto').selectbox(\"change\", opMinuto.attr('value'), opMinuto.html()); //$(idDependiente + '_DdlSegundo').val(\"59\"); var opSegundo = $(idDependiente + '_DdlSegundo').find(\"option[value=59]\"); $(idDependiente + '_DdlSegundo').selectbox(\"change\", opSegundo.attr('value'), opSegundo.html()); } targetDateField.value = dateString; if (this._CustomAction != null) this._CustomAction(dateString); SetDDL(targetDateField, dateFieldName, dateString); } // targetDateField.fireEvent('onchange'); var pickerDiv = document.getElementById(datePickerDivID); if(pickerDiv != null) { pickerDiv.style.visibility = \"hidden\"; pickerDiv.style.display = \"none\"; adjustiFrame(); // after the datepicker has closed, optionally run a user-defined function called // datePickerClosed, passing the field that was just updated as a parameter // (note that this will only run if the user actually selected a date from the datepicker) if ((dateString) && (typeof (datePickerClosed) == \"function\")) datePickerClosed(targetDateField); } } /** Use an \"iFrame shim\" to deal with problems where the datepicker shows up behind selection list elements, if they're below the datepicker. */ function adjustiFrame(pickerDiv, iFrameDiv) { // we know that Opera doesn't like something about this, so if we // think we're using Opera, don't even try var is_opera = (navigator.userAgent.toLowerCase().indexOf(\"opera\") != -1); if (is_opera) return; // put a try/catch block around the whole thing, just in case try { if (!document.getElementById(iFrameDivID)) { // don't use innerHTML to update the body, because it can cause global variables // that are currently pointing to objects on the page to have bad references //document.body.innerHTML += \"<iframe id='\" + iFrameDivID + \"' src='javascript:false;' scrolling='no' frameborder='0'>\"; var newNode = document.createElement(\"iFrame\"); newNode.setAttribute(\"id\", iFrameDivID); // newNode.setAttribute(\"src\", \"javascript:false;\"); newNode.setAttribute(\"scrolling\", \"no\"); newNode.setAttribute(\"frameborder\", \"0\"); document.body.appendChild(newNode); } if (!pickerDiv) pickerDiv = document.getElementById(datePickerDivID); if (!iFrameDiv) iFrameDiv = document.getElementById(iFrameDivID); try { iFrameDiv.style.position = \"absolute\"; iFrameDiv.style.width = pickerDiv.offsetWidth; iFrameDiv.style.height = pickerDiv.offsetHeight; iFrameDiv.style.top = pickerDiv.style.top; iFrameDiv.style.left = pickerDiv.style.left; iFrameDiv.style.zIndex = pickerDiv.style.zIndex - 1; iFrameDiv.style.visibility = pickerDiv.style.visibility; iFrameDiv.style.display = pickerDiv.style.display; } catch (e) { } } catch (ee) { } } /* Function Ends for calendar chk line 379 for doubts*/ /// ////Define la posici√≥n en donde aparecer√° el calendario. function DefinePosicionCalendario(NombreContenedor, NombreEtiqueta, NombreCaja) { var lblFecha = $(NombreEtiqueta); //Instancia de la etiqueta var txtFecha = $(NombreCaja); //Instancia de la caja de texto var TopCalendario = txtFecha.offset().top + txtFecha.height(); //Posici√≥n del calendario var Contenedor = $(NombreContenedor).children(\"#SeleccionFecha\"); Contenedor.children(\"#DivCalendario\").css('left', txtFecha.offset().left).css('top', TopCalendario); } // ////Define las posiciones iniciales de los controles. function DefinePosicionInicial() { var lblFecha = $(\"#ctl00_MainContent_CldFechaInicial2_LblFecha\"); //Instancia de la etiqueta var txtFecha = $(\"#\" + idCajaTexto); //Instancia de la caja de texto var ancho = $(\"#DivTexto\").width() + lblFecha.width(); //Se obtiene el ancho del div principal var LeftBotonFecha = lblFecha.position().left + lblFecha.width() + txtFecha.width(); // Se obtiene la posisici√≥n del bot√≥n var TopDivTexto = parseInt(lblFecha.height() / 2) - parseInt($(\"#DivTexto\").height() / 2); //Se obtiene la posicion vertical de la caja de texto y del bot√≥n var Contenedor = $(\"#ctl00_MainContent_CldFechaInicial2_UpnlSeleccionFecha\").children(\"#SeleccionFecha\"); Contenedor.children(\"#SeleccionFecha\").width(ancho); } function ConfiguraCombosMac() { var isMac = navigator.userAgent.indexOf(\"Macintosh\") if(isMac != -1) $(document.getElementsByClassName(\"calendarCombo\")).css(\"width\", \"45px\"); } $(function() { DefinePosicionInicial(); //Se establece la acci√≥n para mostrar el calendario $(\"#ctl00_MainContent_CldFechaInicial2_BtnFecha2\").live('click', function() { if ($(\"#ctl00_MainContent_CldFechaInicial2_BtnFecha2\").attr('habilitado') == \"true\") { var cajaTexto = $(this).parent().find(\":input\"); displayDatePicker(cajaTexto.attr('id'), false, 'dmy', '/'); } }); });  \r\n\r\n /* the div that holds the date picker calendar */ .dpDiv { } /* the table (within the div) that holds the date picker calendar */ .dpTable { font-family: Open Sans, Helvetica Neue, Helvetica, Arial, sans-serif; font-size: 18px; line-height: 1.4285; text-align: center; color: #333; background-color: #fff; box-shadow: 0px 2px 7px rgba(0,0,0,0.2); border-radius: 0; width: 300px; height: 300px; } /* the top table row that holds the month, year, and forward/backward buttons */ .dpTitleTR { background-color: #222; } /* the second table row, that holds the names of days of the week (Mo, Tu, We, etc.) */ .dpDayTR { border-bottom: 1px solid #111; } /* a table cell that holds a date number (either blank or 1-31) */ .dpTD { /* border: 1px solid #ece9d8;*/ color: #003399; } /* a table cell that holds a highlighted day (usually either today's date or the current date field value) */ .dpDayHighlightTD { background-color: #ffdf88; } /* the date number table cell that the mouse pointer is currently over (you can use contrasting colors to make it apparent which cell is being hovered over) */ .dpTDHover { background-color: #ffffff; border: 1px solid #888888; cursor: pointer; color: red; } /* the table cell that holds the name of the month and the year */ .dpTitleTD { } /* a table cell that holds one of the forward/backward buttons */ .dpButtonTD { } /* the table cell that holds the \"This Month\" or \"Close\" button at the bottom */ .dpTodayButtonTD { } /* a table cell that holds the names of days of the week (Mo, Tu, We, etc.) */ .dpDayTD { /*background-color: #FFFFFF;*/ /*border: 1px solid #AAAAAA;*/ text-transform: uppercase; font-weight:300; color: #9d9d9d; font-size: 10px; } /* additional style information for the text that indicates the month and year */ .dpTitleText { font-size: 18px; color: #fff; line-height: 1em; text-align: center; } /* additional style information for the cell that holds a highlighted day (usually either today's date or the current date field value) */ .dpDayHighlight { /*color: 4060ff; font-weight: bold;*/ color: #003399; text-decoration: none; } /* the forward/backward buttons at the top */ .dpButton { font-family: Tahoma; font-size: 8pt; color: gray; background: #d8e8ff; font-weight: normal; padding: 0px; } .dpButtonExtra { font-family: Tahoma; font-size: 8pt; color: gray; background: #d8e8ff; font-weight: bold; padding: 0px; margin-left: -8px; } /* the \"This Month\" and \"Close\" buttons at the bottom */ .dpTodayButton { font-family: Tahoma; font-size: 7pt; color: gray; background: #d8e8ff; font-weight: bold; } .surveyTable, .surveytd { border-color: #000000; border-style: solid; font-family: Tahoma; font-size: 10pt; } .surveyTable { /*border-width: 0 0 1px 1px;*/ border-spacing: 0; /*border-collapse: collapse;*/ font-family: Tahoma; font-size: 10pt; } .surveytd { margin: 0; padding: 4px; /*border-width: 1px 1px 0 0;*/ font-family: Tahoma; font-size: 10pt; } .surveyButton { border-top: solid 1px #CCCCCC; background-color: #E5E5E5; font-family: Tahoma; font-size: 10pt; } #DivCalendario { position: absolute; top: 1px; width: 220px; display: none; margin-top: 10px; z-index: 1000; background: white; } #DivTexto { display: block; width: 200px; }  \r\n\r\n\r\nFecha Final de Emisi√≥n * \r\n\r\n  \r\n\r\n\r\n00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 \r\n\r\n:\r\n\r\n\r\n00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 \r\n\r\n:\r\n\r\n\r\n00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 \r\n//DataPicker var datePickerDivID = \"datepicker\"; var iFrameDivID = \"datepickeriframe\"; var dayArrayShort = new Array('DOM', 'LUN', 'MAR', 'MIE', 'JUE', 'VIE', 'SAB'); var dayArrayMed = new Array('Dom', 'Lun', 'Mar', 'Mie', 'Jue', 'Vie', 'Sab'); var dayArrayLong = new Array('Domingo', 'Lunes', 'Martes', 'Miercoles', 'Jueves', 'Viernes', 'Sabado'); var monthArrayShort = new Array('Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'); var monthArrayMed = new Array('Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'); var monthArrayLong = new Array('Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'); // these variables define the date formatting we're expecting and outputting. // If you want to use a different format by default, change the defaultDateSeparator // and defaultDateFormat variables either here or on your HTML page. var defaultDateSeparator = \"/\"; // common values would be \"/\" or \".\" var defaultDateFormat = \"mdy\" // valid values are \"mdy\", \"chadmy\", and \"ymd\" var dateSeparator = defaultDateSeparator; var dateFormat = defaultDateFormat; var idCajaTexto = 'ctl00_MainContent_CldFechaFinal2_Calendario_text'; var _CustomAction = null; /** This is the main function you'll call from the onClick event of a button. Normally, you'll have something like this on your HTML page: Start Date: <input name=\"StartDate\"> <input type=button value=\"select\" onclick=\"displayDatePicker('StartDate');\"> That will cause the datepicker to be displayed beneath the StartDate field and any date that is chosen will update the value of that field. If you'd rather have the datepicker display beneath the button that was clicked, you can code the button like this: <input type=button value=\"select\" onclick=\"displayDatePicker('StartDate', this);\"> So, pretty much, the first argument (dateFieldName) is a string representing the name of the field that will be modified if the user picks a date, and the second argument (displayBelowThisObject) is optional and represents an actual node on the HTML document that the datepicker should be displayed below. In version 1.1 of this code, the dtFormat and dtSep variables were added, allowing you to use a specific date format or date separator for a given call to this function. Normally, you'll just want to set these defaults globally with the defaultDateSeparator and defaultDateFormat variables, but it doesn't hurt anything to add them as optional parameters here. An example of use is: <input type=button value=\"select\" onclick=\"displayDatePicker('StartDate', false, 'dmy', '.');\"> This would display the datepicker beneath the StartDate field (because the displayBelowThisObject parameter was false), and update the StartDate field with the chosen value of the datepicker using a date format of dd.mm.yyyy */ function displayDatePicker(dateFieldName, displayBelowThisObject, dtFormat, dtSep) { var targetDateField = document.getElementById(dateFieldName); // this._CustomAction = CustomAction; // // if we weren't told what node to display the datepicker beneath, just display it // beneath the date field we're updating if (!displayBelowThisObject) { displayBelowThisObject = targetDateField; } // if a date separator character was given, update the dateSeparator variable if (dtSep) dateSeparator = dtSep; else dateSeparator = defaultDateSeparator; // if a date format was given, update the dateFormat variable if (dtFormat) dateFormat = dtFormat; else dateFormat = defaultDateFormat; var x = displayBelowThisObject.offsetLeft; var y = displayBelowThisObject.offsetTop + displayBelowThisObject.offsetHeight; // deal with elements inside tables and such var parent = displayBelowThisObject; while (parent.offsetParent) { parent = parent.offsetParent; x += parent.offsetLeft; y += parent.offsetTop; } drawDatePicker(targetDateField, x, y); } /** Draw the datepicker object (which is just a table with calendar elements) at the specified x and y coordinates, using the targetDateField object as the input tag that will ultimately be populated with a date. This function will normally be called by the displayDatePicker function. */ function drawDatePicker(targetDateField, x, y) { var dt = getFieldDate(targetDateField.value); // the datepicker table will be drawn inside of a <div> with an ID defined by the // global datePickerDivID variable. If such a div doesn't yet exist on the HTML // document we're working with, add one. if (!document.getElementById(datePickerDivID)) { // don't use innerHTML to update the body, because it can cause global variables // that are currently pointing to objects on the page to have bad references //document.body.innerHTML += \"<div id='\" + datePickerDivID + \"' class='dpDiv'></div>\"; var newNode = document.createElement(\"div\"); newNode.setAttribute(\"id\", datePickerDivID); newNode.setAttribute(\"class\", \"dpDiv\"); //newNode.setAttribute(\"style\", \"visibility: hidden;\"); document.body.appendChild(newNode); } // move the datepicker div to the proper x,y coordinate and toggle the visiblity var pickerDiv = document.getElementById(datePickerDivID); pickerDiv.style.position = \"absolute\"; pickerDiv.style.left = x + \"px\"; pickerDiv.style.top = y + \"px\"; pickerDiv.style.visibility = (pickerDiv.style.visibility == \"visible\" ? \"hidden\" : \"visible\"); //pickerDiv.style.visibility = \"visible\"; pickerDiv.style.display = (pickerDiv.style.display == \"block\" ? \"none\" : \"block\"); pickerDiv.style.zIndex = 10000; // draw the datepicker table refreshDatePicker(targetDateField.name, dt.getFullYear(), dt.getMonth(), dt.getDate()); } /** This is the function that actually draws the datepicker calendar. */ function refreshDatePicker(dateFieldName, year, month, day) { // if no arguments are passed, use today's date; otherwise, month and year // are required (if a day is passed, it will be highlighted later) var thisDay = new Date(); if ((month >= 0) && (year > 0)) { thisDay = new Date(year, month, 1); } else { day = thisDay.getDate(); thisDay.setDate(1); } // the calendar will be drawn as a table // you can customize the table elements with a global CSS style sheet, // or by hardcoding style and formatting elements below var crlf = \"\\r\\n\"; var TABLE = \"<table cols=7 class='dpTable'>\" + crlf; var xTABLE = \"</table>\" + crlf; var TR = \"<tr class='dpTR'>\"; var TR_title = \"<tr class='dpTitleTR'>\"; var TR_days = \"<tr>\"; var TR_todaybutton = \"<tr class='dpTodayButtonTR'>\"; var xTR = \"</tr>\" + crlf; var TD = \"<td class='dpTD' onMouseOut='this.className=\\\"dpTD\\\";' onMouseOver=' this.className=\\\"dpTDHover\\\";' \"; // leave this tag open, because we'll be adding an onClick event var TD_title = \"<td colspan=5 class='dpTitleTD'>\"; var TD_buttons = \"<td class='dpButtonTD'>\"; var TD_todaybutton = \"<td colspan=7 class='dpTodayButtonTD'>\"; var TD_days = \"<td class='dpDayTD'>\"; var TD_selected = \"<td class='dpDayHighlightTD' onMouseOut='this.className=\\\"dpDayHighlightTD\\\";' onMouseOver='this.className=\\\"dpTDHover\\\";' \"; // leave this tag open, because we'll be adding an onClick event var xTD = \"</td>\" + crlf; var DIV_title = \"<div class='dpTitleText'>\"; var DIV_selected = \"<div class='dpDayHighlight'>\"; var xDIV = \"</div>\"; // start generating the code for the calendar table var html = TABLE; // this is the title bar, which displays the month and the buttons to // go back to a previous month or forward to the next month html += TR_title; html += TD_buttons + getButtonCode(dateFieldName, thisDay, -1, \"&lt;\") + xTD; html += TD_title + DIV_title + monthArrayLong[thisDay.getMonth()] + \" \" + thisDay.getFullYear() + xDIV + xTD; html += TD_buttons + getButtonCode(dateFieldName, thisDay, 1, \"&gt;\") + xTD; html += xTR; // this is the row that indicates which day of the week we're on html += TR_days; for (i = 0; i < dayArrayShort.length; i++) html += TD_days + dayArrayShort[i] + xTD; html += xTR; // now we'll start populating the table with days of the month html += TR; // first, the leading blanks for (i = 0; i < thisDay.getDay(); i++) html += TD + \"&nbsp;\" + xTD; // now, the days of the month do { dayNum = thisDay.getDate(); TD_onclick = \" onclick=\\\"updateDateField('\" + dateFieldName + \"', '\" + getDateString(thisDay) + \"');\\\">\"; if (dayNum == day) html += TD_selected + TD_onclick + DIV_selected + dayNum + xDIV + xTD; else html += TD + TD_onclick + dayNum + xTD; // if this is a Saturday, start a new row if (thisDay.getDay() == 6) html += xTR + TR; // increment the day thisDay.setDate(thisDay.getDate() + 1); } while (thisDay.getDate() > 1) // fill in any trailing blanks if (thisDay.getDay() > 0) { for (i = 6; i > thisDay.getDay(); i--) html += TD + \"&nbsp;\" + xTD; } html += xTR; // add a button to allow the user to easily return to today, or close the calendar var today = new Date(); var todayString = \"Today is \" + dayArrayMed[today.getDay()] + \", \" + monthArrayMed[today.getMonth()] + \" \" + today.getDate(); html += TR_todaybutton + TD_todaybutton; //html += \"<button class='dpTodayButton' onClick='refreshDatePicker(\\\"\" + dateFieldName + \"\\\");'>this month</button> \"; html += \"<button class='dpTodayButton' onClick='updateDateField(\\\"\" + dateFieldName + \"\\\");'>cerrar</button>\"; html += xTD + xTR; // and finally, close the table html += xTABLE; document.getElementById(datePickerDivID).innerHTML = html; // add an \"iFrame shim\" to allow the datepicker to display above selection lists adjustiFrame(); } /** Convenience function for writing the code for the buttons that bring us back or forward a month. */ function getButtonCode(dateFieldName, dateVal, adjust, label) { var newMonth = (dateVal.getMonth() + adjust) % 12; var newYear = dateVal.getFullYear() + parseInt((dateVal.getMonth() + adjust) / 12); if (newMonth < 0) { newMonth += 12; newYear += -1; } return \"<button class='dpButton' onClick='refreshDatePicker(\\\"\" + dateFieldName + \"\\\", \" + newYear + \", \" + newMonth + \");'>\" + label + \"</button>\"; } /** Convert a JavaScript Date object to a string, based on the dateFormat and dateSeparator variables at the beginning of this script library. */ function getDateString(dateVal) { var dayString = \"00\" + dateVal.getDate(); var monthString = \"00\" + (dateVal.getMonth() + 1); dayString = dayString.substring(dayString.length - 2); monthString = monthString.substring(monthString.length - 2); switch (dateFormat) { case \"dmy\": return dayString + dateSeparator + monthString + dateSeparator + dateVal.getFullYear(); case \"ymd\": return dateVal.getFullYear() + dateSeparator + monthString + dateSeparator + dayString; case \"mdy\": default: return monthString + dateSeparator + dayString + dateSeparator + dateVal.getFullYear(); } } /** Convert a string to a JavaScript Date object. */ function getFieldDate(dateString) { var dateVal; var dArray; var d, m, y; try { dArray = splitDateString(dateString); if (dArray) { switch (dateFormat) { case \"dmy\": d = parseInt(dArray[0], 10); m = parseInt(dArray[1], 10) - 1; y = parseInt(dArray[2], 10); break; case \"ymd\": d = parseInt(dArray[2], 10); m = parseInt(dArray[1], 10) - 1; y = parseInt(dArray[0], 10); break; case \"mdy\": default: d = parseInt(dArray[1], 10); m = parseInt(dArray[0], 10) - 1; y = parseInt(dArray[2], 10); break; } dateVal = new Date(y, m, d); } else if (dateString) { dateVal = new Date(dateString); } else { dateVal = new Date(); } } catch (e) { dateVal = new Date(); } return dateVal; } /** Try to split a date string into an array of elements, using common date separators. If the date is split, an array is returned; otherwise, we just return false. */ function splitDateString(dateString) { var dArray; if (dateString.indexOf(\"/\") >= 0) dArray = dateString.split(\"/\"); else if (dateString.indexOf(\".\") >= 0) dArray = dateString.split(\".\"); else if (dateString.indexOf(\"-\") >= 0) dArray = dateString.split(\"-\"); else if (dateString.indexOf(\"\\\\\") >= 0) dArray = dateString.split(\"\\\\\"); else dArray = false; return dArray; } /** Update the field with the given dateFieldName with the dateString that has been passed, and hide the datepicker. If no dateString is passed, just close the datepicker without changing the field value. Also, if the page developer has defined a function called datePickerClosed anywhere on the page or in an imported library, we will attempt to run that function with the updated field as a parameter. This can be used for such things as date validation, setting default values for related fields, etc. For example, you might have a function like this to validate a start date field: function datePickerClosed(dateField) { var dateObj = getFieldDate(dateField.value); var today = new Date(); today = new Date(today.getFullYear(), today.getMonth(), today.getDate()); if (dateField.name == \"StartDate\") { if (dateObj < today) { // if the date is before today, alert the user and display the datepicker again alert(\"Please enter a date that is today or later\"); dateField.value = \"\"; document.getElementById(datePickerDivID).style.visibility = \"visible\"; adjustiFrame(); } else { // if the date is okay, set the EndDate field to 7 days after the StartDate dateObj.setTime(dateObj.getTime() + (7 * 24 * 60 * 60 * 1000)); var endDateField = document.getElementsByName (\"EndDate\").item(0); endDateField.value = getDateString(dateObj); } } } */ function SetDDL(targetField, dateFieldName, dateString) { var StartDate = 2014; var EndDate = 2014; var IsInicial = dateFieldName.indexOf(\"FechaInicial\"); var IsFinal = dateFieldName.indexOf(\"FechaFinal\"); var hfInicial = document.getElementById(\"hfInicial\"); var hfFinal = document.getElementById(\"hfFinal\"); if(IsInicial > -1) { hfInicial.value = dateString; hfInicial.value = getFieldDate(hfInicial.value).getFullYear(); } if(IsFinal > -1) { hfFinal.value = dateString; hfFinal.value = getFieldDate(hfFinal.value).getFullYear(); } if(hfInicial.value != \"\") { StartDate = hfInicial.value; } if(hfFinal.value != \"\") { EndDate = hfFinal.value; } //var dt = getFieldDate(targetField.value); //var year = dt.getFullYear(); //alert(targetField.id); var ddl = document.getElementById(\"ctl00_MainContent_ddlComplementos\"); var passed = true; if(StartDate < 2014 || EndDate < 2014) { passed = false; } if(!passed) { var hfInicialBool = document.getElementById(\"hfInicialBool\"); hfInicialBool.value = \"true\"; if(ddl != null) { ddl.selectedIndex=0; ddl.disabled= true; } } if(passed) { var hfInicialBool = document.getElementById(\"hfInicialBool\"); hfInicialBool.value = \"false\"; if(ddl != null) ddl.disabled= false; } } function updateDateField(dateFieldName, dateString) { var targetDateField = document.getElementsByName(dateFieldName).item(0); if (dateString) { //var Contenedor = $('#'+ dateFieldName); var idDependiente = '#' + $(targetDateField).attr('dependiente'); if (true) { $(idDependiente + '_Calendario_text').val(dateString); //$(idDependiente + '_DdlHora').val(\"23\"); var opHora = $(idDependiente + '_DdlHora').find(\"option[value=23]\"); $(idDependiente + '_DdlHora').selectbox(\"change\", opHora.attr('value'), opHora.html()); //$(idDependiente + '_DdlMinuto').val(\"59\"); var opMinuto = $(idDependiente + '_DdlMinuto').find(\"option[value=59]\"); $(idDependiente + '_DdlMinuto').selectbox(\"change\", opMinuto.attr('value'), opMinuto.html()); //$(idDependiente + '_DdlSegundo').val(\"59\"); var opSegundo = $(idDependiente + '_DdlSegundo').find(\"option[value=59]\"); $(idDependiente + '_DdlSegundo').selectbox(\"change\", opSegundo.attr('value'), opSegundo.html()); } targetDateField.value = dateString; if (this._CustomAction != null) this._CustomAction(dateString); SetDDL(targetDateField, dateFieldName, dateString); } // targetDateField.fireEvent('onchange'); var pickerDiv = document.getElementById(datePickerDivID); if(pickerDiv != null) { pickerDiv.style.visibility = \"hidden\"; pickerDiv.style.display = \"none\"; adjustiFrame(); // after the datepicker has closed, optionally run a user-defined function called // datePickerClosed, passing the field that was just updated as a parameter // (note that this will only run if the user actually selected a date from the datepicker) if ((dateString) && (typeof (datePickerClosed) == \"function\")) datePickerClosed(targetDateField); } } /** Use an \"iFrame shim\" to deal with problems where the datepicker shows up behind selection list elements, if they're below the datepicker. */ function adjustiFrame(pickerDiv, iFrameDiv) { // we know that Opera doesn't like something about this, so if we // think we're using Opera, don't even try var is_opera = (navigator.userAgent.toLowerCase().indexOf(\"opera\") != -1); if (is_opera) return; // put a try/catch block around the whole thing, just in case try { if (!document.getElementById(iFrameDivID)) { // don't use innerHTML to update the body, because it can cause global variables // that are currently pointing to objects on the page to have bad references //document.body.innerHTML += \"<iframe id='\" + iFrameDivID + \"' src='javascript:false;' scrolling='no' frameborder='0'>\"; var newNode = document.createElement(\"iFrame\"); newNode.setAttribute(\"id\", iFrameDivID); // newNode.setAttribute(\"src\", \"javascript:false;\"); newNode.setAttribute(\"scrolling\", \"no\"); newNode.setAttribute(\"frameborder\", \"0\"); document.body.appendChild(newNode); } if (!pickerDiv) pickerDiv = document.getElementById(datePickerDivID); if (!iFrameDiv) iFrameDiv = document.getElementById(iFrameDivID); try { iFrameDiv.style.position = \"absolute\"; iFrameDiv.style.width = pickerDiv.offsetWidth; iFrameDiv.style.height = pickerDiv.offsetHeight; iFrameDiv.style.top = pickerDiv.style.top; iFrameDiv.style.left = pickerDiv.style.left; iFrameDiv.style.zIndex = pickerDiv.style.zIndex - 1; iFrameDiv.style.visibility = pickerDiv.style.visibility; iFrameDiv.style.display = pickerDiv.style.display; } catch (e) { } } catch (ee) { } } /* Function Ends for calendar chk line 379 for doubts*/ /// ////Define la posici√≥n en donde aparecer√° el calendario. function DefinePosicionCalendario(NombreContenedor, NombreEtiqueta, NombreCaja) { var lblFecha = $(NombreEtiqueta); //Instancia de la etiqueta var txtFecha = $(NombreCaja); //Instancia de la caja de texto var TopCalendario = txtFecha.offset().top + txtFecha.height(); //Posici√≥n del calendario var Contenedor = $(NombreContenedor).children(\"#SeleccionFecha\"); Contenedor.children(\"#DivCalendario\").css('left', txtFecha.offset().left).css('top', TopCalendario); } // ////Define las posiciones iniciales de los controles. function DefinePosicionInicial() { var lblFecha = $(\"#ctl00_MainContent_CldFechaFinal2_LblFecha\"); //Instancia de la etiqueta var txtFecha = $(\"#\" + idCajaTexto); //Instancia de la caja de texto var ancho = $(\"#DivTexto\").width() + lblFecha.width(); //Se obtiene el ancho del div principal var LeftBotonFecha = lblFecha.position().left + lblFecha.width() + txtFecha.width(); // Se obtiene la posisici√≥n del bot√≥n var TopDivTexto = parseInt(lblFecha.height() / 2) - parseInt($(\"#DivTexto\").height() / 2); //Se obtiene la posicion vertical de la caja de texto y del bot√≥n var Contenedor = $(\"#ctl00_MainContent_CldFechaFinal2_UpnlSeleccionFecha\").children(\"#SeleccionFecha\"); Contenedor.children(\"#SeleccionFecha\").width(ancho); } function ConfiguraCombosMac() { var isMac = navigator.userAgent.indexOf(\"Macintosh\") if(isMac != -1) $(document.getElementsByClassName(\"calendarCombo\")).css(\"width\", \"45px\"); } $(function() { DefinePosicionInicial(); //Se establece la acci√≥n para mostrar el calendario $(\"#ctl00_MainContent_CldFechaFinal2_BtnFecha2\").live('click', function() { if ($(\"#ctl00_MainContent_CldFechaFinal2_BtnFecha2\").attr('habilitado') == \"true\") { var cajaTexto = $(this).parent().find(\":input\"); displayDatePicker(cajaTexto.attr('id'), false, 'dmy', '/'); } }); });  \r\n\r\n\r\nRFC Receptor \r\n\r\nRFC a cuenta terceros \r\n\r\nEstado del Comprobante \r\n\r\n\r\n\r\n\r\n\r\n\r\nSeleccione un valor... Cancelado Vigente \r\n\r\n\r\n\r\nTipo de Comprobante (Complemento) \r\n\r\nEstatus Cancelaci√≥n \r\n\r\n\r\n\r\n\r\nSeleccione un valor... Est√°ndar Acreditamiento de IEPS Aerol√≠neas Carta Porte Carta Porte 2.0 Certificado de Destrucci√≥n Comercio Exterior Comercio Exterior 1.1 Compra Venta de Divisas Consumo de Combustibles Consumo De Combustibles 1.1 Donatarias Estado De Cuenta Bancario Estado de Cuenta Combustibles 1.2 Estado de cuenta de combustibles de monederos electr√≥nicos. Gastos de Hidrocarburos INE 1.1 Ingresos de Hidrocarburos Instituciones Educativas Privadas (Pago de colegiatura) Leyendas Fiscales Mis Cuentas Notarios P√∫blicos Obras de artes y antig√ºedades Otros Derechos e Impuestos Pago en Especie Persona F√≠sica Integrante de Coordinado Recepcion de Pagos Recepci√≥n de Pagos Recibo de donativo Recibo de Pago de Salarios Recibo de Pago de Salarios 1.2 Sector de Ventas al Detalle (Detallista) Servicios de construcci√≥n SPEI de Tercero a Tercero Sustituci√≥n y renovaci√≥n vehicular Terceros Terceros Timbre Fiscal Digital Turista o Pasajero Extranjero Vales de Despensa Veh√≠culo Usado Venta de Vehiculos \r\n(Criterio de b√∫squeda aplicable a CFDI emitidas a partir del 01/01/2014) \r\n\r\nSeleccione un valor... En Proceso Rechazada  Plazo vencido Sin proceso \r\n\r\n\r\nSeleccione un valor... Cancelado con aceptaci√≥n Cancelado sin aceptaci√≥n Plazo vencido \r\n\r\n\r\n* Campos obligatorios \r\n\r\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  Acciones \r\n\r\nFolio Fiscal \r\n\r\nRFC Emisor \r\n\r\nNombre o Raz√≥n Social del Emisor \r\n\r\nRFC Receptor \r\n\r\nNombre o Raz√≥n Social del Receptor \r\n\r\nFecha de Emisi√≥n \r\n\r\nFecha de Certificaci√≥n \r\n\r\nPAC que Certific√≥ \r\n\r\nTotal \r\n\r\nEfecto del Comprobante \r\n\r\nEstatus de cancelaci√≥n \r\n\r\nEstado del Comprobante \r\n\r\nEstatus de Proceso de Cancelaci√≥n \r\n\r\nFecha de Proceso de Cancelaci√≥n \r\n\r\nRFC a cuenta de terceros \r\n\r\nMotivo \r\n\r\nFolio de Sustituci√≥n \r\n\r\n\r\n\r\n\r\n\r\n\r\n         \r\n\r\n\r\n\r\n\r\n\r\nNo existen registros que cumplan con los criterios de b√∫squeda ingresados, intentar nuevamente.\r\n   \r\n\r\n\r\n\r\n \r\nEspere un momento...\r\n \r\n\r\n\r\n\r\n\r\nAddenda\r\n\r\n\r\n¬°Error! \r\n\r\n\r\n\r\n\r\nArchivo (.xml)*:  Buscar    \r\n \r\n\r\n* Campos obligatorios \r\n\r\n Cancelar Integrar \r\n \r\n\r\n\r\n\r\nConfirmaci√≥n.\r\n\r\n\r\n\r\n¬øDesea descargar el archivo xml?\r\n\r\n\r\nCerrar Guardar \r\n   \r\n\r\n\r\n\r\nRegistro de Motivos de Cancelaci√≥n \r\n\r\n\r\n!!! Atenci√≥n !!! \r\n* Estos campos son obligatorios\r\n\r\n** Estos campos no tienen el formato correcto\r\n\r\n\r\n\r\nPara cada CFDI que desea cancelar debe capturar el motivo de cancelaci√≥n.\r\n\r\n\r\n \r\nCerrar  \r\n \r\n\r\n \r\n\r\n\r\nRFC a cuenta de terceros\r\n\r\n\r\nNo fue posible obtener la informaci√≥n de los RFC a cuenta de terceros \r\n\r\n\r\n\r\n\r\nUUID Consultado :\r\n\r\n\r\n\r\n\r\nRFC Tercero\r\n\r\nNombre Tercero\r\n\r\n\r\n\r\n\r\nCerrar \r\n       /// Variables (Blobs) var validCookieInterval; var validSesionInterval; var downloadCookie = 'DownloadedFile' /** * Funci√≥n que muestra el update progress y crea 2 Intervals uno para validar que la descarga del archivo * se haya realizado y el otro mantiene la sesi√≥n. */ function ShowProgress() { validSesionInterval = setInterval(function () { MantieneSesion(); }, 60000); $get('ctl00_MainContent_UpdateProgress1').style.display = 'block'; validCookieInterval = setInterval(function () { if ($.cookie(downloadCookie) != null && $.cookie(downloadCookie) == \"OK\") { $.cookie(downloadCookie, null); $get('ctl00_MainContent_UpdateProgress1').style.display = \"none\"; clearInterval(validCookieInterval);//delete interval clearInterval(validSesionInterval); } }, 2000); } /** * Funci√≥n valida que al menos este seleccionado un registro. * Se toman los valores de los registros seleccionados (blobUri) y los guarda en un hidden **/ function validarSeleccionDescarga() { document.getElementById('dvAlert').innerHTML = ''; if ($('.ListaFolios').filter(':checked').length == 0) { //alert(\"Favor de seleccionar registro(s)\") var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-info alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Atenci√≥n! <br/></strong> Favor de seleccionar registro(s)\"; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#dvAlert').offset().top }, 'slow'); return false; } else { ShowProgress(); validarDescargaMasiva(); return false; } } function MetadataDescarga() { $('#hdnValAccion').attr('value', 'DescargaMetadata'); //ValidaCaptcha(); // Se habilita cuando este captcha AccionCaptcha(); // Se quita cuando este captcha return false; } function DescargaMetadata() { document.getElementById('dvAlert').innerHTML = ''; ShowProgress(); Metadatos(); return false; } function Metadatos() { var urlValidaDescarga = \"ConsultaEmisor.aspx/DescargaMetadatos\"; var Parametros = document.getElementById('hfParametrosMetadata').value; var data = encodeURIComponent($.base64.encode(Parametros)); $.ajax({ url: urlValidaDescarga, type: \"POST\", dataType: \"json\", contentType: 'application/json; charset=utf-8', data: \"{'Parametros':'\" + data + \"'}\", cache: false, async: true, success: function (respuestaValidacion) { $get('ctl00_MainContent_UpdateProgress1').style.display = \"none\"; document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); if (respuestaValidacion.d.startsWith(\"Error:\")) { newDivSuccess.className = \"alert alert-danger alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Error! <br/></strong>\" + respuestaValidacion.d.replace(\"Error:\", \"\"); } else { newDivSuccess.className = \"alert alert-success alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Descarga realizada con √©xito! <br/></strong>\" + respuestaValidacion.d; } document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#dvAlert').offset().top }, 'slow'); }, error: function (errorDetail) { $get('ctl00_MainContent_UpdateProgress1').style.display = \"none\"; document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-danger alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Error! <br/></strong> Ocurrio un error al procesar su solicitud. Por favor intentelo m√°s tarde\"; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#dvAlert').offset().top }, 'slow'); }, }); } function ValidaCaptcha() { $(\"#ventanaModalCaptcha\").modal(\"show\"); } function AccionCaptcha() { //$(\"#ventanaModalCaptcha\").modal(\"hide\"); // Se habilita cuando este captcha var accion = $(\"#hdnValAccion\").val(); if (accion.split('¬¨')[0] == \"DescargaMasiva\") { validarDescargaMasiva(); } else if (accion.split('¬¨')[0] == \"DescargaMetadata\") { DescargaMetadata(); } else { var uriblob1 = accion.split('¬¨')[1]; validarDescargaUnitaria(uriblob1); } } function testvalidarDescargaMasiva() { var datos = \"api/ValidaDescarga/\" + $('.ListaFolios').filter(':checked').length; PageMethods.RecuperaRepresentacionImpresa(datos, onDescargaMasivaSucceed, onDescargaMasivaFailed); } function onDescargaMasivaSucceed(result, userContext, methodName) { document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-success alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Descarga realizada con √©xito! <br/></strong>\" + result; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#dvAlert').offset().top }, 'slow'); } function onDescargaMasivaFailed(result, userContext, methodName) { document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-danger alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Descarga realizada con √©xito! <br/></strong>\" + result; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#dvAlert').offset().top }, 'slow'); //alert(result); } function validarDescargaMasiva() { var urlValidaDescarga = \"ConsultaEmisor.aspx/ValidarDescarga\"; $.ajax({ url: urlValidaDescarga, type: \"POST\", dataType: \"json\", contentType: 'application/json; charset=utf-8', data: \"{ id: \" + $('.ListaFolios').filter(':checked').length + \" }\", cache: false, async: true, success: function (respuestaValidacion) { if (respuestaValidacion.d) { respuestaValidacion = respuestaValidacion.d; } if (respuestaValidacion.Codigo == 0) { var folioUriDescaga = []; var descargaMasivaUrisModel = {}; var indiceFolio = 0; $(\"input.ListaFolios:checked\").each(function () { var folioDescarga = $(this).val(); var uriDescarga = $(this).parent().find(\"#ListaFoliosUrl\").val(); folioUriDescaga[indiceFolio] = { Folio: folioDescarga, Uri: uriDescarga }; indiceFolio = indiceFolio + 1; }); descargaMasivaUrisModel.FolioUriList = folioUriDescaga; var data = encodeURIComponent($.base64.encode(JSON.stringify(descargaMasivaUrisModel))); $.ajax({ url: \"ConsultaEmisor.aspx/Descargar\", type: \"POST\", dataType: \"json\", contentType: 'application/json; charset=utf-8', cache: false, async: true, data: \"{'param':'\" + data + \"'}\", success: function (respuestaDescarga) { $get('ctl00_MainContent_UpdateProgress1').style.display = \"none\"; document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); if (respuestaDescarga.d.startsWith(\"Error:\")) { newDivSuccess.className = \"alert alert-danger alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Ocurri√≥ un Error en la Descarga! <br/></strong>\" + respuestaDescarga.d.replace(\"Error:\", \"\"); } else { newDivSuccess.className = \"alert alert-success alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Descarga realizada con √©xito! <br/></strong>\" + respuestaDescarga.d; } document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#dvAlert').offset().top }, 'slow'); //alert(respuestaDescarga.d); }, error: function (xhr, ajaxOptions, thrownError) { //alert('Ocurrio un error al registrar la descarga :'); //alert(xhr.responseText); $get('ctl00_MainContent_UpdateProgress1').style.display = \"none\"; document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-danger alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Ocurri√≥ un Error en la Descarga! <br/></strong>\" + xhr.responseText; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#dvAlert').offset().top }, 'slow'); } }); } else { $get('ctl00_MainContent_UpdateProgress1').style.display = \"none\"; //alert(respuestaValidacion.Mensaje); document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-warning alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Precauci√≥n! <br/></strong>\" + respuestaValidacion.Mensaje; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#dvAlert').offset().top }, 'slow'); } }, error: function (errorDetail) { document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-danger alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Error! <br/></strong> Ocurrio un error al procesar su solicitud. Por favor intentelo m√°s tarde\"; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#dvAlert').offset().top }, 'slow'); }, }); } function validarDescargaUnitaria(blobUri) { var urlValidaDescargaUnitaria = \"ConsultaEmisor.aspx/ValidarDescarga\"; var dataParam = 1; $.ajax({ url: urlValidaDescargaUnitaria, type: \"POST\", dataType: \"json\", contentType: 'application/json; charset=utf-8', data: \"{ id:1 }\", cache: false, async: true, success: function (respuestaValidacion) { if (respuestaValidacion.d) { respuestaValidacion = respuestaValidacion.d; } if (respuestaValidacion.Codigo == 0) { var opcionesUnitaria = \"width=5,height=5,scrollbars=yes,menubar=no,status=no,directories=no,location=no,toolbar=no,resizable=yes,titlebar=no\"; window.open(blobUri, \"RecuperacionCFDI\", opcionesUnitaria); } else { $get('ctl00_MainContent_UpdateProgress1').style.display = \"none\"; document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-warning alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Atenci√≥n! <br/></strong> \" + respuestaValidacion.Mensaje; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#dvAlert').offset().top }, 'slow'); //alert(respuestaValidacion.Mensaje); } } }); } //Se agrega manejador de evento para cuando se termine la llamda del UpdatePanel Sys.WebForms.PageRequestManager.getInstance().add_endRequest(endQueryRequest); //function _doPostBack(eventTarget, eventArgument) { // document.forms[0]._EVENTTARGET.value = eventTarget; // document.forms[0]._EVENTARGUMENT.value = eventArgument; // document.forms[0].submit(); //} //Funcic√≥n que Forza la correcci√≥n del renderizado de tablas en IE9 function endQueryRequest(sender, e) { var hfInicialBool = document.getElementById(\"hfInicialBool\"); if (hfInicialBool.value == \"true\") { var ddl = document.getElementById(\"ddlComplementos\"); ddl.selectedIndex = 0; ddl.disabled = true; } if (hfInicialBool.value == \"false\") { var ddl = document.getElementById(\"ddlComplementos\"); ddl.disabled = false; } CorregirTablaResultados(document.getElementById(\"ctl00_MainContent_PnlResultados\")); } var rfcetiqueta; var rfcvalido; $(document).ready(function () { var hfFlag = document.getElementById('hfFlag'); var hfData = document.getElementById('hfDatos'); var hfDescarga = document.getElementById('hfDescarga'); var hfCancelacion = document.getElementById('hfCancelacion'); if (hfFlag.value == \"true\" && hfData.value != null && hfData.value != \"\") { SetValue(); } if (hfFlag.value == \"false\" && hfData.value != null && hfData.value != \"\") { SetValueSinPatron(); } if (hfCancelacion.value == \"NoElementosSeleccionados\") { document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-warning alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Atenci√≥n! <br/></strong> No ha seleccionado folios, seleccione elementos para cancelar.\"; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#ctl00_MainContent_TxtRfcReceptor').offset().top }, 'slow'); //alert('El o los comprobantes ya se encuentran cancelados'); } if (hfCancelacion.value == \"CancelacionesEnProceso\") { document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-warning alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Atenci√≥n! <br/></strong> Uno o m√°s de los elementos seleccionados ya cuenta con un proceso de cancelaci√≥n.\"; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#ctl00_MainContent_TxtRfcReceptor').offset().top }, 'slow'); //alert('El o los comprobantes ya se encuentran cancelados'); } if (hfCancelacion.value == \"ExistenCancelados\") { document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-warning alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Atenci√≥n! <br/></strong> Uno o m√°s de los elementos seleccionados han sido cancelados con anterioridad.\"; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#ctl00_MainContent_TxtRfcReceptor').offset().top }, 'slow'); //alert('El o los comprobantes ya se encuentran cancelados'); } if (hfCancelacion.value == \"ExisteRelacionado\") { document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-warning alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Atenci√≥n! <br/></strong> Ha seleccionado un elemento que tiene relaci√≥n por lo que no puede ser cancelado sin un folio relacionado.\"; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#dvAlert').offset().top }, 'slow'); } if (hfFlag.value == \"false\" && hfData.value == \"\" && hfCancelacion.value == \"\") { document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-warning alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Atenci√≥n! <br/></strong> No se puede realizar la solicitud de cancelaci√≥n ya que uno de los comprobantes no es simplificado.\"; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#dvAlert').offset().top }, 'slow'); } if (hfDescarga.value == \"CuotaParcial\") { document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-warning alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Atenci√≥n! <br/></strong> Est√°s intentando descargas m√°s documentos de los permitidos.\"; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#dvAlert').offset().top }, 'slow'); //alert(\"Est√°s intentando descargas m√°s documentos de los permitidos.\"); } if (hfDescarga.value == \"CuotaCompleta\") { document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-warning alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Atenci√≥n! <br/></strong> Ya no puedes descargar m√°s documentos, espera hasta ma√±ana.\"; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#dvAlert').offset().top }, 'slow'); //alert(\"Ya no puedes descargar m√°s documentos, espera hasta ma√±ana.\"); } if (hfDescarga.value == \"CuotaLibre\") { var opciones = \"width=100,height=50,scrollbars=yes,menubar=no,status=no,directories=no,location=no,toolbar=no,resizable=yes,titlebar=no\"; } $('#ctl00_MainContent_BtnBusqueda').live('click', function () { $(\"#ctl00_MainContent_PnlErrores\").empty(); $(\"#ctl00_MainContent_PnlErrores\").css('display', 'none'); var fechaInicial = $('#ctl00_MainContent_CldFechaInicial2_Calendario_text').val(); var horaInicial = $('#ctl00_MainContent_CldFechaInicial2_DdlHora').val(); var minutoInicial = $('#ctl00_MainContent_CldFechaInicial2_DdlMinuto').val(); var segundoInicial = $('#ctl00_MainContent_CldFechaInicial2_DdlSegundo').val(); var fechaSplitInicial = splitTextoFecha(fechaInicial, '/'); var fechaFinal = $('#ctl00_MainContent_CldFechaFinal2_Calendario_text').val(); var horaFinal = $('#ctl00_MainContent_CldFechaFinal2_DdlHora').val(); var minutoFinal = $('#ctl00_MainContent_CldFechaFinal2_DdlMinuto').val(); var segundoFinal = $('#ctl00_MainContent_CldFechaFinal2_DdlSegundo').val(); var fechaSplitFinal = splitTextoFecha(fechaFinal, '/'); //Se resta uno al valor del mes porque en JavaScript los meses numericamente se representan del 0 - 11 var dateInicial = new Date(fechaSplitInicial[2], parseEntero(fechaSplitInicial[1]) - 1, fechaSplitInicial[0], horaInicial, minutoInicial, segundoInicial, 0); var dateFinal = new Date(fechaSplitFinal[2], parseEntero(fechaSplitFinal[1]) - 1, fechaSplitFinal[0], horaFinal, minutoFinal, segundoFinal, 0); //Se verifica que la fehca final no sea menor a la incial if (dateFinal < dateInicial) { $(\"#ctl00_MainContent_PnlErrores\").append('<ul><li>La fecha inicial no puede ser posterior a la fecha final</li></ul>'); $(\"#ctl00_MainContent_PnlErrores\").css('display', 'inline'); return false; } //Se agrega un a√±o a la fecha incial y esa sera la fecha m√°xima a elegir var maxDate = new Date(dateInicial.getFullYear() + 1, dateInicial.getMonth(), dateInicial.getDate(), dateInicial.getHours(), dateInicial.getMinutes(), dateInicial.getSeconds()); //Se verifica si el mes es diferente, para actual ante la logica de suma del 29 de Febrero, que da como resultado 1 de Marzo if (maxDate.getMonth() != dateInicial.getMonth()) maxDate.setDate(maxDate.getDate() - 1); //Se compara que la fecha final no sea mayor a la fecha m√°xima if (dateFinal > maxDate) { $(\"#ctl00_MainContent_PnlErrores\").append('<ul><li>La consulta esta limitada a rangos de fechas de m√°ximo 12 meses.</li></ul>'); $(\"#ctl00_MainContent_PnlErrores\").css('display', 'inline'); return false; } }); $(\"#ctl00_MainContent_RdoFolioFiscal\").live('click', function () { //$(\"#datepicker\").css('visibility', 'hidden'); //$(\"#datepicker\").css('display', 'none'); //$(\"#datepickeriframe\").css('visibility', 'hidden'); //$(\"#datepickeriframe\").css('display', 'none'); validaRfcAutenticado(); }); $(\"#ctl00_MainContent_BtnBusqueda\").live('mouseover', function (event) { validaRfcAutenticado(); }); $(\"#ctl00_MainContent_BtnCancelar\").live('mouseover', function (event) { validaRfcAutenticado(); }); $(\"#BtnImprimirVisible\").live('click', function (event) { validaRfcAutenticado(); }); $(\"#ctl00_MainContent_BtnImprimir\").live('mouseover', function (event) { validaRfcAutenticado(); }); $(\"#ctl00_MainContent_BtnDescargar\").live('mouseover', function (event) { validaRfcAutenticado(); }); $(\"#ctl00_MainContent_BtnMetadata\").live('mouseover', function (event) { validaRfcAutenticado(); }); $(\"#ctl00_MainContent_RdoFechas\").live('click', function () { validaRfcAutenticado(); }); }); function AccionCfdi(blobUri, argumento) { //if (rfcvalido) { MantieneSesion(); var event = window.event; var opciones = \"\"; if (argumento == \"Detalle\") { opciones = \"width=5,height=5,scrollbars=yes,menubar=no,status=no,directories=no,location=no,toolbar=no,resizable=yes,titlebar=no\"; window.open(blobUri, \"DetalleCfdi\", opciones); } else if (argumento == \"Recuperacion\") { validarDescargaUnitaria(blobUri); } else if (argumento == \"Acuse\") { opciones = \"width=5,height=5,scrollbars=yes,menubar=no,status=no,directories=no,location=no,toolbar=no,resizable=yes,titlebar=no\"; window.open(blobUri, \"AcuseCancelacion\", opciones); } else if (argumento == \"Addenda\") { $('#modalExito').modal('show'); $('#errorFirmadoSL').hide(); $('#hfXML')[0].value = blobUri; } if (event.stopstopPropagation) { event.stopPropagation(); } else { event.cancelBubble = true; } //} } function consultaCuentaTerceros(parametros) { var urlConsultaCuentaTerceros = \"ConsultaEmisor.aspx/ConsultaCuentaTerceros\"; var Parametros = parametros; var data = encodeURIComponent($.base64.encode(Parametros)); $(\"#divResultadosTerceros\").hide(); $(\"#datosTerceros\").html(\"\"); $('#divErrorTerceros').hide(); $.ajax({ url: urlConsultaCuentaTerceros, type: \"POST\", dataType: \"json\", contentType: 'application/json; charset=utf-8', data: \"{'Parametros':'\" + data + \"'}\", cache: false, async: true, success: function (respuestaStr) { respuesta = JSON.parse(respuestaStr.d); if (respuesta.Estatus == 1) { listaTerceros = respuesta.ListCuentaTerceros; var contendTable = \"\"; for (var indice = 0; indice < listaTerceros.length; indice++) { contendTable = contendTable + \"<tr>\"; contendTable = contendTable + '<td>' + listaTerceros[indice].RfcACuentaTerceros + '</td>'; contendTable = contendTable + '<td>' + listaTerceros[indice].NombreACuentaTerceros + '</td>'; contendTable = contendTable + \"</tr>\"; } var params = parametros.split(\"|\"); $(\"#uuidConsultado\").text(params[0]); $(\"#datosTerceros\").html(contendTable); $(\"#divResultadosTerceros\").show(); $('#modalCuentaTerceros').modal('show'); } else { $('#modalCuentaTerceros').modal('show'); $('#divErrorTerceros').show(); $(\"#divResultadosTerceros\").hide(); } }, error: function (errorDetail) { alert(\"Error en la consulta de terceros\"); }, }); } ////Funci√≥n que maneja la seleccion y deseleccion multiple global para cancelaci√≥n function manejaseleccion() { var s = document.getElementById(\"seleccionador\"); var estado = s.checked; $('.ListaFolios').each(function (i, obj) { obj.checked = estado; }); } //Crea y retorna el html para los select de cancelacion de folios function crearSelectMotivoCancelacion(folio) { //var valores_catalogo_motivos_cancelacion = //Los valores de estos arreglos son llenados en el page_load desde el servicio de catalgos; //var textos_catalogo_motivos_cancelacion = //Los valores de estos arreglos son llenados en el page_load desde el servicio de catalgos; var select = document.createElement(\"select\"); select.name = \"ddl\" + folio; select.id = \"ddl\" + folio; for (let i = 0; i <= valores_catalogo_motivos_cancelacion.length - 1; i++) { var option = document.createElement(\"option\"); option.value = valores_catalogo_motivos_cancelacion[i]; option.text = textos_catalogo_motivos_cancelacion[i]; select.appendChild(option); } return select.outerHTML; } //Crea y retorna el html para el input del folio realcionado function CrearInputFolioRelacionado(folio) { var input = document.createElement(\"input\"); input.name = \"input\" + folio; input.id = \"input\" + folio; return input.outerHTML; } //Genera eventos onchange a los combos que se creraron dinamicamente para la cancelacion function AgregaEventoACombosDinamicos() { $(\"input.ListaFolios:checked\").each(function () { document.getElementById('ddl' + $(this).val()).addEventListener('change', function () { //console.log('You selected: ' + this.value + '-' + $(this).val() + this.id.replace('ddl', '')); //console.log(this.value === \"01\"); if (this.value === \"01\") { $(\"#input\" + this.id.replace('ddl', '')).show(); } else { $(\"#input\" + this.id.replace('ddl', '')).val(''); $(\"#input\" + this.id.replace('ddl', '')).hide(); } }); $(\"#input\" + $(this).val()).attr('style','text-transform: uppercase;'); $(\"#input\" + $(this).val()).mask(\"hhhhhhhh-hhhh-hhhh-hhhh-hhhhhhhhhhhh\"); $(\"#input\" + $(this).val()).hide(); }); } function validaMotivosCancelacion() { var expected = true; var errorFormato = false; $(\".error\").remove(); $(\"input.ListaFolios:checked\").each(function () { console.log(\"validando \" + $(this).val() + \": valor seleccionado :\" + $(\"#ddl\" + $(this).val()).val() + \", valor input :\" + $(\"#input\" + $(this).val()).val()); if ($(\"#input\" + $(this).val()).val().indexOf('_') != -1) { console.log(\"debe ingrar un UUID Valido\"); } if ($(\"#ddl\" + $(this).val()).val() === \"00\") { $(\"#ddl\" + $(this).val()).before('<span class=\"error\">*</span>'); expected = false; } //if ($(\"#ddl\" + $(this).val()).val() === \"01\" && $(\"#input\" + $(this).val()).val().replace('_', '').replace('-', '') === \"\") { // $(\"#input\" + $(this).val()).before('<span class=\"error\">*</span>'); // expected = false; //} //if ($(\"#ddl\" + $(this).val()).val() === \"01\" && $(\"#input\" + $(this).val()).val().indexOf('_') != -1) { // $(\"#input\" + $(this).val()).before('<span class=\"error\">**</span>'); // expected = false; // errorFormato = true; //} }); $(\"#errorFirmadoSL_cancelacion\").css(\"display\", ((expected) ? \"none\" : \"block\")); $(\"#errorCliente_cancelacion_formatoUUID\").css(\"display\", ((!errorFormato) ? \"none\" : \"block\")); return expected; } function creaPropiedadJSON(nombre, valor) { var expected = \"\\\"\" + nombre + \"\\\":\" + \"\\\"\" + valor + \"\\\"\"; return expected; } function PrepararJSONCancelacion() { var valido = validaMotivosCancelacion(); if (valido) { console.log('preparando JSON'); var JSONCancelacion = \"[\"; $(\"input.ListaFolios:checked\").each(function () { JSONCancelacion += \"{\" JSONCancelacion += creaPropiedadJSON(\"UUID\", $(this).val()) + \",\"; JSONCancelacion += creaPropiedadJSON(\"Motivo\", $(\"#ddl\" + $(this).val()).val()) + \",\"; JSONCancelacion += creaPropiedadJSON(\"FolioSustitucion\", $(\"#input\" + $(this).val()).val().replace(\"________-____-____-____-____________\",\"\")); JSONCancelacion += \"},\" }); JSONCancelacion += \"]\"; $(\"#hfJSONCancelacion\").val(JSONCancelacion); console.log('JSON preparado ' + $(\"#hfJSONCancelacion\").val()); } return valido; } ////Funci√≥n para mostrar el modal de captura de motivos de cancelaci√≥n function CancelarSeleccionCliente() { $('#dvMotivosCancelacion').empty(); var htmlHeader = \"<tr><th>Folio Fiscal</th><th>Motivo Cancelaci√≥n</th><th>Folio Relacionado</th></tr>\" var htmlTable = \"<table>\" + htmlHeader; $(\"input.ListaFolios:checked\").each(function () { htmlTable += \"<tr >\" ; htmlTable += \"<td ><small><b>\" + $(this).val() + \"</b></small></td>\"; htmlTable += \"<td ><small>\" + crearSelectMotivoCancelacion($(this).val()) + \"</small></td>\"; htmlTable += \"<td ><small>\" + CrearInputFolioRelacionado($(this).val()) + \"</small></td>\"; htmlTable += \"</tr>\" }); htmlTable += \"</table>\"; var tableMotivosCancelacion = document.createElement('div'); tableMotivosCancelacion.innerHTML = htmlTable; document.getElementById('dvMotivosCancelacion').appendChild(tableMotivosCancelacion); AgregaEventoACombosDinamicos(); $('#modalCancelacion').modal('show'); return false; } ////Funci√≥n que maneja la seleccion y deseleccion multiple por elemento para cancelaci√≥n function validaseleccion() { var estado = true; $('.ListaFolios').each(function (i, obj) { if (!(obj.checked)) estado = false; }); var s = document.getElementById(\"seleccionador\"); s.checked = estado; } ////Funci√≥n que oculta los panelers de resultados function ocultaResultados() { $(\"#ctl00_MainContent_PnlResultados\").css('display', 'none'); $(\"#ctl00_MainContent_PnlNoResultados\").css('display', 'none'); } ////Funci√≥n que invoca al metodo de recuperaci√≥n de acuse. function recuperaAcuse(datos) { MantieneSesion(); PageMethods.RecuperaAcuse(datos, onRecuperaAcuseSucceed, onRecuperaAcuseFailed); } function validarCaracteres() { supressUpdatePanelRequestErrorCharacters(\"#ctl00_MainContent_TxtRfcReceptor\"); } function recuperaRepresentacionImpresa(datos) { PageMethods.RecuperaRepresentacionImpresa(datos, onRecuperaRISucceed, onRecuperaRIFailed); } function onRecuperaRISucceed(result, userContext, methodName) { opciones = \"width=5,height=5,scrollbars=no,menubar=no,status=no,directories=no,location=no,toolbar=no,resizable=no,titlebar=no\"; window.open(result, \"RecuperacionRepresentacionImpresa\", opciones); } function onRecuperaRIFailed(result, userContext, methodName) { document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-warning alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Atenci√≥n! <br/></strong> No se ha podido recuperar la representaci√≥n Impresa, por favor intentelo m√°s tarde.\"; document.getElementById('dvAlert').appendChild(newDivSuccess); $('html, body').animate({ scrollTop: $('#dvAlert').offset().top }, 'slow'); //alert(\"No se ha podido recuperar la representaci√≥n Impresa, por favor intentelo m√°s tarde.\"); } function onRecuperaAcuseSucceed(result, userContext, methodName) { opciones = \"width=5,height=5,scrollbars=yes,menubar=no,status=no,directories=no,location=no,toolbar=no,resizable=yes,titlebar=no\"; window.open(result, \"RecuperacionAcuseCancelacion\", opciones); } function onRecuperaAcuseFailed(result, userContext, methodName) { document.getElementById('dvAlert').innerHTML = ''; var newDivSuccess = document.createElement('div'); newDivSuccess.className = \"alert alert-warning alert-dismissible\"; newDivSuccess.innerHTML = \"<button type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button><strong>¬°Atenci√≥n! <br/></strong> No se ha podido recuperar el acuse de cancelaci√≥n, por favor intentelo m√°s tarde.\"; document.getElementById('dvAlert').appendChild(newDivSuccess); //alert(\"No se ha podido recuperar el acuse de cancelaci√≥n, por favor intentelo m√°s tarde.\"); } function SetValue() { if (confirm(\"¬øSeguro desea cancelar la seleccion?\")) { document.getElementById('setLinkButton').click(); //$(\"#hiddenFlagCancelacion\").val = \"true\"; //document.forms[\"fulanito\"].action=\"CancelaBeta\" // .submit(); } else { //alert('NO'); } } function SetValueSinPatron() { document.getElementById('setLinkButton').click(); } function Pager(tableName, itemsPerPage) { this.tableName = tableName; this.itemsPerPage = itemsPerPage; this.currentPage = 1; this.pages = 0; this.inited = false; this.showRecords = function (from, to) { var rows = document.getElementById(tableName).rows; // i starts from 1 to skip table header row for (var i = 1; i < rows.length; i++) { if (i < from || i > to) rows[i].style.display = 'none'; else rows[i].style.display = ''; } } this.showPage = function (pageNumber) { if (!this.inited) { alert(\"not inited\"); return; } var oldPageAnchor = document.getElementById('pg' + this.currentPage); oldPageAnchor.className = 'pg-normal'; this.currentPage = pageNumber; var newPageAnchor = document.getElementById('pg' + this.currentPage); newPageAnchor.className = 'pg-selected'; var from = (pageNumber - 1) * itemsPerPage + 1; var to = from + itemsPerPage - 1; this.showRecords(from, to); } this.prev = function () { if (this.currentPage > 1) this.showPage(this.currentPage - 1); } this.next = function () { if (this.currentPage < this.pages) { this.showPage(this.currentPage + 1); } } this.init = function () { var rows = document.getElementById(tableName).rows; var records = (rows.length - 1); this.pages = Math.ceil(records / itemsPerPage); this.inited = true; } this.showPageNav = function (pagerName, positionId) { if (!this.inited) { alert(\"not inited\"); return; } var element = document.getElementById(positionId); var pagerHtml = '<ul class=\"pagination\">'; pagerHtml += '<li onclick=\"' + pagerName + '.prev();\"><a>&laquo;</a></li>'; for (var page = 1; page <= this.pages; page++) pagerHtml += '<li id=\"pg' + page + '\" class=\"pg-normal\" onclick=\"' + pagerName + '.showPage(' + page + ');\"><a>' + page + '</a></li>'; pagerHtml += '<li onclick=\"' + pagerName + '.next();\"><a>&raquo;</a></li>'; element.innerHTML = pagerHtml; } }","product_name":null},{"type":null,"class_name":null,"name":null,"index":"0","value":null,"id":null,"use_type":false,"use_class_name":false,"use_name":false,"use_index":false,"use_value":false,"use_id":false,"var_type":1,"var_class_name":1,"var_name":1,"var_index":1,"var_id":1,"var_value":1,"properties":[{"name":"Type","variant":0,"value":"hyperlink","use":true},{"name":"Index","variant":0,"value":"0","use":false},{"name":"Value","variant":0,"value":"https://portalcfdi.facturaelectronica.sat.gob.mx/","use":false},{"name":"ClassName","variant":0,"value":"","use":true},{"name":"Name","variant":0,"value":"Factura electr√≥nica","use":true},{"name":"AutomationId","variant":0,"value":"","use":false},{"name":"AcceleratorKey","variant":0,"value":"","use":false},{"name":"AccessKey","variant":0,"value":"","use":false},{"name":"FrameworkId","variant":0,"value":"InternetExplorer","use":false},{"name":"HasKeyboardFocus","variant":0,"value":"False","use":false},{"name":"HelpText","variant":0,"value":"","use":false},{"name":"IsContentElement","variant":0,"value":"True","use":false},{"name":"IsControlElement","variant":0,"value":"True","use":false},{"name":"IsEnabled","variant":0,"value":"True","use":false},{"name":"IsKeyboardFocusable","variant":0,"value":"False","use":false},{"name":"IsOffscreen","variant":0,"value":"False","use":false},{"name":"IsPassword","variant":0,"value":"False","use":false},{"name":"IsRequiredForForm","variant":0,"value":"False","use":false},{"name":"ItemType","variant":0,"value":"","use":false},{"name":"ProcessId","variant":0,"value":"15208","use":false}],"items":null,"automationType":"ui","app_title":"Factura electr√≥nica","product_name":null},{"type":null,"class_name":null,"name":null,"index":"0","value":null,"id":null,"use_type":false,"use_class_name":false,"use_name":false,"use_index":false,"use_value":false,"use_id":false,"var_type":1,"var_class_name":1,"var_name":1,"var_index":1,"var_id":1,"var_value":1,"properties":[{"name":"Type","variant":0,"value":"text","use":true},{"name":"Index","variant":0,"value":"0","use":false},{"name":"Value","variant":0,"value":"https://portalcfdi.facturaelectronica.sat.gob.mx/","use":false},{"name":"ClassName","variant":0,"value":"","use":true},{"name":"Name","variant":0,"value":"Factura electr√≥nica","use":true},{"name":"AutomationId","variant":0,"value":"","use":false},{"name":"AcceleratorKey","variant":0,"value":"","use":false},{"name":"AccessKey","variant":0,"value":"","use":false},{"name":"FrameworkId","variant":0,"value":"","use":false},{"name":"HasKeyboardFocus","variant":0,"value":"False","use":false},{"name":"HelpText","variant":0,"value":"","use":false},{"name":"IsContentElement","variant":0,"value":"True","use":false},{"name":"IsControlElement","variant":0,"value":"True","use":false},{"name":"IsEnabled","variant":0,"value":"True","use":false},{"name":"IsKeyboardFocusable","variant":0,"value":"False","use":false},{"name":"IsOffscreen","variant":0,"value":"False","use":false},{"name":"IsPassword","variant":0,"value":"False","use":false},{"name":"IsRequiredForForm","variant":0,"value":"False","use":false},{"name":"ItemType","variant":0,"value":"","use":false},{"name":"ProcessId","variant":0,"value":"15208","use":false}],"items":null,"automationType":"ui","app_title":"Factura electr√≥nica","product_name":"msivaCFDI"}],"screenshotPath":"screenshots\\picker-1673638965578.png","version":"5.2.0","lastModified":"9.0.4","comment":""},"elementType":"interface"}],"elementType":"interface"}]